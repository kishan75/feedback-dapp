{"ast":null,"code":"import _slicedToArray from \"F:\\\\BlockChain\\\\Projects\\\\feedback-dapp-full\\\\feedback-dapp\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nconst _excluded = [\"defaultValue\", \"children\", \"className\", \"component\", \"components\", \"componentsProps\", \"disabled\", \"error\", \"focused\", \"onChange\", \"required\", \"value\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { unstable_useControlled as useControlled } from '@mui/utils';\nimport FormControlUnstyledContext from './FormControlContext';\nimport appendOwnerState from '../utils/appendOwnerState';\nimport classes from './formControlUnstyledClasses';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nfunction hasValue(value) {\n  return value != null && !(Array.isArray(value) && value.length === 0) && value !== '';\n}\n/**\n * Provides context such as filled/focused/error/required for form inputs.\n * Relying on the context provides high flexibility and ensures that the state always stays\n * consistent across the children of the `FormControl`.\n * This context is used by the following components:\n *\n * *   FormLabel\n * *   FormHelperText\n * *   Input\n * *   InputLabel\n *\n * You can find one composition example below and more going to [the demos](https://mui.com/components/text-fields/#components).\n *\n * ```jsx\n * <FormControl>\n *   <InputLabel htmlFor=\"my-input\">Email address</InputLabel>\n *   <Input id=\"my-input\" aria-describedby=\"my-helper-text\" />\n *   <FormHelperText id=\"my-helper-text\">We'll never share your email.</FormHelperText>\n * </FormControl>\n * ```\n *\n * ⚠️ Only one `Input` can be used within a FormControl because it create visual inconsistencies.\n * For instance, only one input can be focused at the same time, the state shouldn't be shared.\n *\n * Demos:\n *\n * - [Text Fields](https://mui.com/components/text-fields/)\n *\n * API:\n *\n * - [FormControlUnstyled API](https://mui.com/api/form-control-unstyled/)\n */\n\n\nconst FormControlUnstyled =\n/*#__PURE__*/\nReact.forwardRef(function FormControlUnstyled(props, ref) {\n  var _ref;\n\n  const defaultValue = props.defaultValue,\n        children = props.children,\n        className = props.className,\n        component = props.component,\n        _props$components = props.components,\n        components = _props$components === void 0 ? {} : _props$components,\n        _props$componentsProp = props.componentsProps,\n        componentsProps = _props$componentsProp === void 0 ? {} : _props$componentsProp,\n        _props$disabled = props.disabled,\n        disabled = _props$disabled === void 0 ? false : _props$disabled,\n        _props$error = props.error,\n        error = _props$error === void 0 ? false : _props$error,\n        visuallyFocused = props.focused,\n        onChange = props.onChange,\n        _props$required = props.required,\n        required = _props$required === void 0 ? false : _props$required,\n        incomingValue = props.value,\n        other = _objectWithoutPropertiesLoose(props, _excluded);\n\n  const _useControlled = useControlled({\n    controlled: incomingValue,\n    default: defaultValue,\n    name: 'FormControl',\n    state: 'value'\n  }),\n        _useControlled2 = _slicedToArray(_useControlled, 2),\n        value = _useControlled2[0],\n        setValue = _useControlled2[1];\n\n  const filled = hasValue(value);\n\n  const _React$useState = React.useState(false),\n        _React$useState2 = _slicedToArray(_React$useState, 2),\n        focusedState = _React$useState2[0],\n        setFocused = _React$useState2[1];\n\n  if (disabled && focusedState) {\n    setFocused(false);\n  }\n\n  const focused = visuallyFocused !== undefined && !disabled ? visuallyFocused : focusedState;\n\n  const ownerState = _extends({}, props, {\n    disabled,\n    error,\n    filled,\n    focused,\n    required\n  });\n\n  let registerEffect = () => {};\n\n  if (process.env.NODE_ENV !== 'production') {\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    const registeredInput = React.useRef(false);\n\n    registerEffect = () => {\n      if (registeredInput.current) {\n        console.error(['MUI: There are multiple `Input` components inside a FormControl.', 'This creates visual inconsistencies, only use one `Input`.'].join('\\n'));\n      }\n\n      registeredInput.current = true;\n      return () => {\n        registeredInput.current = false;\n      };\n    };\n  }\n\n  const handleChange = event => {\n    setValue(event.target.value);\n    onChange == null ? void 0 : onChange(event);\n  };\n\n  const childContext = {\n    disabled,\n    error,\n    filled,\n    focused,\n    onBlur: () => {\n      setFocused(false);\n    },\n    onChange: handleChange,\n    onFocus: () => {\n      setFocused(true);\n    },\n    registerEffect,\n    required,\n    value: value != null ? value : ''\n  };\n  const Root = (_ref = component != null ? component : components.Root) != null ? _ref : 'div';\n  const rootProps = appendOwnerState(Root, _extends({}, other, componentsProps.root), ownerState);\n  return (\n    /*#__PURE__*/\n    _jsx(FormControlUnstyledContext.Provider, {\n      value: childContext,\n      children:\n      /*#__PURE__*/\n      _jsx(Root, _extends({\n        ref: ref\n      }, rootProps, {\n        className: clsx(classes.root, className, rootProps == null ? void 0 : rootProps.className, disabled && classes.disabled),\n        children: children\n      }))\n    })\n  );\n});\nprocess.env.NODE_ENV !== \"production\" ? FormControlUnstyled.propTypes\n/* remove-proptypes */\n= {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit TypeScript types and run \"yarn proptypes\"  |\n  // ----------------------------------------------------------------------\n\n  /**\n   * The content of the component.\n   */\n  children: PropTypes.node,\n\n  /**\n   * Class name applied to the root element.\n   */\n  className: PropTypes.string,\n\n  /**\n   * The component used for the root node.\n   * Either a string to use a HTML element or a component.\n   */\n  component: PropTypes.elementType,\n\n  /**\n   * The components used for each slot inside the FormControl.\n   * Either a string to use a HTML element or a component.\n   * @default {}\n   */\n  components: PropTypes.shape({\n    Root: PropTypes.elementType\n  }),\n\n  /**\n   * @ignore\n   */\n  componentsProps: PropTypes.shape({\n    root: PropTypes.object\n  }),\n\n  /**\n   * @ignore\n   */\n  defaultValue: PropTypes.any,\n\n  /**\n   * If `true`, the label, input and helper text should be displayed in a disabled state.\n   * @default false\n   */\n  disabled: PropTypes.bool,\n\n  /**\n   * If `true`, the label is displayed in an error state.\n   * @default false\n   */\n  error: PropTypes.bool,\n\n  /**\n   * If `true`, the component is displayed in focused state.\n   * @default false\n   */\n  focused: PropTypes.bool,\n\n  /**\n   * @ignore\n   */\n  onChange: PropTypes.func,\n\n  /**\n   * If `true`, the label will indicate that the `input` is required.\n   * @default false\n   */\n  required: PropTypes.bool,\n\n  /**\n   * @ignore\n   */\n  value: PropTypes.any\n} : void 0;\nexport default FormControlUnstyled;","map":null,"metadata":{},"sourceType":"module"}