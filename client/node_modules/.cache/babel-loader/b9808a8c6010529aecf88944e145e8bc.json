{"ast":null,"code":"class LazyIterableIterator {\n  constructor(producer) {\n    this.producer = producer;\n  }\n\n  [Symbol.iterator]() {\n    if (this.it === undefined) {\n      this.it = this.producer();\n    }\n\n    return this.it;\n  }\n\n  next() {\n    if (this.it === undefined) {\n      this.it = this.producer();\n    }\n\n    return this.it.next();\n  }\n\n}\n\nexport function makeLazy(producer) {\n  return new LazyIterableIterator(producer);\n}","map":null,"metadata":{},"sourceType":"module"}