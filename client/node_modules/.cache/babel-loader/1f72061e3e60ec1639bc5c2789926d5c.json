{"ast":null,"code":"import { fullUnicode } from '../../fullUnicode.js';\nimport { frequency } from '../../frequency.js';\nimport { mapToConstant } from '../../mapToConstant.js';\nimport { convertFromNext, convertToNext } from '../../../check/arbitrary/definition/Converters.js';\nconst lowerCaseMapper = {\n  num: 26,\n  build: v => String.fromCharCode(v + 0x61)\n};\nconst upperCaseMapper = {\n  num: 26,\n  build: v => String.fromCharCode(v + 0x41)\n};\nconst numericMapper = {\n  num: 10,\n  build: v => String.fromCharCode(v + 0x30)\n};\n\nfunction percentCharArbMapper(c) {\n  const encoded = encodeURIComponent(c);\n  return c !== encoded ? encoded : \"%\".concat(c.charCodeAt(0).toString(16));\n}\n\nfunction percentCharArbUnmapper(value) {\n  if (typeof value !== 'string') {\n    throw new Error('Unsupported');\n  }\n\n  const decoded = decodeURIComponent(value);\n  return decoded;\n}\n\nconst percentCharArb = convertFromNext(convertToNext(fullUnicode()).map(percentCharArbMapper, percentCharArbUnmapper));\nexport const buildLowerAlphaArbitrary = others => mapToConstant(lowerCaseMapper, {\n  num: others.length,\n  build: v => others[v]\n});\nexport const buildLowerAlphaNumericArbitrary = others => mapToConstant(lowerCaseMapper, numericMapper, {\n  num: others.length,\n  build: v => others[v]\n});\nexport const buildAlphaNumericArbitrary = others => mapToConstant(lowerCaseMapper, upperCaseMapper, numericMapper, {\n  num: others.length,\n  build: v => others[v]\n});\nexport const buildAlphaNumericPercentArbitrary = others => frequency({\n  weight: 10,\n  arbitrary: buildAlphaNumericArbitrary(others)\n}, {\n  weight: 1,\n  arbitrary: percentCharArb\n});","map":null,"metadata":{},"sourceType":"module"}