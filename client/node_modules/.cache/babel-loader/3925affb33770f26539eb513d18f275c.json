{"ast":null,"code":"class Nil {\n  [Symbol.iterator]() {\n    return this;\n  }\n\n  next(value) {\n    return {\n      value,\n      done: true\n    };\n  }\n\n}\n\nNil.nil = new Nil();\nexport function nilHelper() {\n  return Nil.nil;\n}\nexport function* mapHelper(g, f) {\n  for (const v of g) {\n    yield f(v);\n  }\n}\nexport function* flatMapHelper(g, f) {\n  for (const v of g) {\n    yield* f(v);\n  }\n}\nexport function* filterHelper(g, f) {\n  for (const v of g) {\n    if (f(v)) {\n      yield v;\n    }\n  }\n}\nexport function* takeNHelper(g, n) {\n  for (let i = 0; i < n; ++i) {\n    const cur = g.next();\n\n    if (cur.done) {\n      break;\n    }\n\n    yield cur.value;\n  }\n}\nexport function* takeWhileHelper(g, f) {\n  let cur = g.next();\n\n  while (!cur.done && f(cur.value)) {\n    yield cur.value;\n    cur = g.next();\n  }\n}\nexport function* joinHelper(g, others) {\n  for (let cur = g.next(); !cur.done; cur = g.next()) {\n    yield cur.value;\n  }\n\n  for (const s of others) {\n    for (let cur = s.next(); !cur.done; cur = s.next()) {\n      yield cur.value;\n    }\n  }\n}","map":null,"metadata":{},"sourceType":"module"}