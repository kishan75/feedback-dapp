{"ast":null,"code":"\"use strict\";\n/**\n * Methods for getting and modifying attributes.\n *\n * @module cheerio/attributes\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.toggleClass = exports.removeClass = exports.addClass = exports.hasClass = exports.removeAttr = exports.val = exports.data = exports.prop = exports.attr = void 0;\n\nvar static_1 = require(\"../static\");\n\nvar utils_1 = require(\"../utils\");\n\nvar hasOwn = Object.prototype.hasOwnProperty;\nvar rspace = /\\s+/;\nvar dataAttrPrefix = 'data-';\n/*\n * Lookup table for coercing string data-* attributes to their corresponding\n * JavaScript primitives\n */\n\nvar primitives = {\n  null: null,\n  true: true,\n  false: false\n}; // Attributes that are booleans\n\nvar rboolean = /^(?:autofocus|autoplay|async|checked|controls|defer|disabled|hidden|loop|multiple|open|readonly|required|scoped|selected)$/i; // Matches strings that look like JSON objects or arrays\n\nvar rbrace = /^{[^]*}$|^\\[[^]*]$/;\n\nfunction getAttr(elem, name, xmlMode) {\n  var _a;\n\n  if (!elem || !utils_1.isTag(elem)) return undefined;\n  (_a = elem.attribs) !== null && _a !== void 0 ? _a : elem.attribs = {}; // Return the entire attribs object if no attribute specified\n\n  if (!name) {\n    return elem.attribs;\n  }\n\n  if (hasOwn.call(elem.attribs, name)) {\n    // Get the (decoded) attribute\n    return !xmlMode && rboolean.test(name) ? name : elem.attribs[name];\n  } // Mimic the DOM and return text content as value for `option's`\n\n\n  if (elem.name === 'option' && name === 'value') {\n    return static_1.text(elem.children);\n  } // Mimic DOM with default value for radios/checkboxes\n\n\n  if (elem.name === 'input' && (elem.attribs.type === 'radio' || elem.attribs.type === 'checkbox') && name === 'value') {\n    return 'on';\n  }\n\n  return undefined;\n}\n/**\n * Sets the value of an attribute. The attribute will be deleted if the value is `null`.\n *\n * @private\n * @param el - The element to set the attribute on.\n * @param name - The attribute's name.\n * @param value - The attribute's value.\n */\n\n\nfunction setAttr(el, name, value) {\n  if (value === null) {\n    removeAttribute(el, name);\n  } else {\n    el.attribs[name] = \"\" + value;\n  }\n}\n\nfunction attr(name, value) {\n  // Set the value (with attr map support)\n  if (typeof name === 'object' || value !== undefined) {\n    if (typeof value === 'function') {\n      if (typeof name !== 'string') {\n        {\n          throw new Error('Bad combination of arguments.');\n        }\n      }\n\n      return utils_1.domEach(this, function (el, i) {\n        if (utils_1.isTag(el)) setAttr(el, name, value.call(el, i, el.attribs[name]));\n      });\n    }\n\n    return utils_1.domEach(this, function (el) {\n      if (!utils_1.isTag(el)) return;\n\n      if (typeof name === 'object') {\n        Object.keys(name).forEach(function (objName) {\n          var objValue = name[objName];\n          setAttr(el, objName, objValue);\n        });\n      } else {\n        setAttr(el, name, value);\n      }\n    });\n  }\n\n  return arguments.length > 1 ? this : getAttr(this[0], name, this.options.xmlMode);\n}\n\nexports.attr = attr;\n/**\n * Gets a node's prop.\n *\n * @private\n * @category Attributes\n * @param el - Elenent to get the prop of.\n * @param name - Name of the prop.\n * @returns The prop's value.\n */\n\nfunction getProp(el, name, xmlMode) {\n  if (!el || !utils_1.isTag(el)) return;\n  return name in el ? // @ts-expect-error TS doesn't like us accessing the value directly here.\n  el[name] : !xmlMode && rboolean.test(name) ? getAttr(el, name, false) !== undefined : getAttr(el, name, xmlMode);\n}\n/**\n * Sets the value of a prop.\n *\n * @private\n * @param el - The element to set the prop on.\n * @param name - The prop's name.\n * @param value - The prop's value.\n */\n\n\nfunction setProp(el, name, value, xmlMode) {\n  if (name in el) {\n    // @ts-expect-error Overriding value\n    el[name] = value;\n  } else {\n    setAttr(el, name, !xmlMode && rboolean.test(name) ? value ? '' : null : \"\" + value);\n  }\n}\n\nfunction prop(name, value) {\n  var _this = this;\n\n  if (typeof name === 'string' && value === undefined) {\n    switch (name) {\n      case 'style':\n        {\n          var property_1 = this.css();\n          var keys = Object.keys(property_1);\n          keys.forEach(function (p, i) {\n            property_1[i] = p;\n          });\n          property_1.length = keys.length;\n          return property_1;\n        }\n\n      case 'tagName':\n      case 'nodeName':\n        {\n          var el = this[0];\n          return utils_1.isTag(el) ? el.name.toUpperCase() : undefined;\n        }\n\n      case 'outerHTML':\n        return this.clone().wrap('<container />').parent().html();\n\n      case 'innerHTML':\n        return this.html();\n\n      default:\n        return getProp(this[0], name, this.options.xmlMode);\n    }\n  }\n\n  if (typeof name === 'object' || value !== undefined) {\n    if (typeof value === 'function') {\n      if (typeof name === 'object') {\n        throw new Error('Bad combination of arguments.');\n      }\n\n      return utils_1.domEach(this, function (el, i) {\n        if (utils_1.isTag(el)) setProp(el, name, value.call(el, i, getProp(el, name, _this.options.xmlMode)), _this.options.xmlMode);\n      });\n    }\n\n    return utils_1.domEach(this, function (el) {\n      if (!utils_1.isTag(el)) return;\n\n      if (typeof name === 'object') {\n        Object.keys(name).forEach(function (key) {\n          var val = name[key];\n          setProp(el, key, val, _this.options.xmlMode);\n        });\n      } else {\n        setProp(el, name, value, _this.options.xmlMode);\n      }\n    });\n  }\n\n  return undefined;\n}\n\nexports.prop = prop;\n/**\n * Sets the value of a data attribute.\n *\n * @private\n * @param el - The element to set the data attribute on.\n * @param name - The data attribute's name.\n * @param value - The data attribute's value.\n */\n\nfunction setData(el, name, value) {\n  var _a;\n\n  var elem = el;\n  (_a = elem.data) !== null && _a !== void 0 ? _a : elem.data = {};\n  if (typeof name === 'object') Object.assign(elem.data, name);else if (typeof name === 'string' && value !== undefined) {\n    elem.data[name] = value;\n  }\n}\n/**\n * Read the specified attribute from the equivalent HTML5 `data-*` attribute,\n * and (if present) cache the value in the node's internal data store. If no\n * attribute name is specified, read *all* HTML5 `data-*` attributes in this manner.\n *\n * @private\n * @category Attributes\n * @param el - Elenent to get the data attribute of.\n * @param name - Name of the data attribute.\n * @returns The data attribute's value, or a map with all of the data attribute.\n */\n\n\nfunction readData(el, name) {\n  var domNames;\n  var jsNames;\n  var value;\n\n  if (name == null) {\n    domNames = Object.keys(el.attribs).filter(function (attrName) {\n      return attrName.startsWith(dataAttrPrefix);\n    });\n    jsNames = domNames.map(function (domName) {\n      return utils_1.camelCase(domName.slice(dataAttrPrefix.length));\n    });\n  } else {\n    domNames = [dataAttrPrefix + utils_1.cssCase(name)];\n    jsNames = [name];\n  }\n\n  for (var idx = 0; idx < domNames.length; ++idx) {\n    var domName = domNames[idx];\n    var jsName = jsNames[idx];\n\n    if (hasOwn.call(el.attribs, domName) && !hasOwn.call(el.data, jsName)) {\n      value = el.attribs[domName];\n\n      if (hasOwn.call(primitives, value)) {\n        value = primitives[value];\n      } else if (value === String(Number(value))) {\n        value = Number(value);\n      } else if (rbrace.test(value)) {\n        try {\n          value = JSON.parse(value);\n        } catch (e) {\n          /* Ignore */\n        }\n      }\n\n      el.data[jsName] = value;\n    }\n  }\n\n  return name == null ? el.data : value;\n}\n\nfunction data(name, value) {\n  var _a;\n\n  var elem = this[0];\n  if (!elem || !utils_1.isTag(elem)) return;\n  var dataEl = elem;\n  (_a = dataEl.data) !== null && _a !== void 0 ? _a : dataEl.data = {}; // Return the entire data object if no data specified\n\n  if (!name) {\n    return readData(dataEl);\n  } // Set the value (with attr map support)\n\n\n  if (typeof name === 'object' || value !== undefined) {\n    utils_1.domEach(this, function (el) {\n      if (utils_1.isTag(el)) if (typeof name === 'object') setData(el, name);else setData(el, name, value);\n    });\n    return this;\n  }\n\n  if (hasOwn.call(dataEl.data, name)) {\n    return dataEl.data[name];\n  }\n\n  return readData(dataEl, name);\n}\n\nexports.data = data;\n\nfunction val(value) {\n  var querying = arguments.length === 0;\n  var element = this[0];\n  if (!element || !utils_1.isTag(element)) return querying ? undefined : this;\n\n  switch (element.name) {\n    case 'textarea':\n      return this.text(value);\n\n    case 'select':\n      {\n        var option = this.find('option:selected');\n\n        if (!querying) {\n          if (this.attr('multiple') == null && typeof value === 'object') {\n            return this;\n          }\n\n          this.find('option').removeAttr('selected');\n          var values = typeof value !== 'object' ? [value] : value;\n\n          for (var i = 0; i < values.length; i++) {\n            this.find(\"option[value=\\\"\" + values[i] + \"\\\"]\").attr('selected', '');\n          }\n\n          return this;\n        }\n\n        return this.attr('multiple') ? option.toArray().map(function (el) {\n          return static_1.text(el.children);\n        }) : option.attr('value');\n      }\n\n    case 'input':\n    case 'option':\n      return querying ? this.attr('value') : this.attr('value', value);\n  }\n\n  return undefined;\n}\n\nexports.val = val;\n/**\n * Remove an attribute.\n *\n * @private\n * @param elem - Node to remove attribute from.\n * @param name - Name of the attribute to remove.\n */\n\nfunction removeAttribute(elem, name) {\n  if (!elem.attribs || !hasOwn.call(elem.attribs, name)) return;\n  delete elem.attribs[name];\n}\n/**\n * Splits a space-separated list of names to individual names.\n *\n * @category Attributes\n * @param names - Names to split.\n * @returns - Split names.\n */\n\n\nfunction splitNames(names) {\n  return names ? names.trim().split(rspace) : [];\n}\n/**\n * Method for removing attributes by `name`.\n *\n * @category Attributes\n * @example\n *\n * ```js\n * $('.pear').removeAttr('class').html();\n * //=> <li>Pear</li>\n *\n * $('.apple').attr('id', 'favorite');\n * $('.apple').removeAttr('id class').html();\n * //=> <li>Apple</li>\n * ```\n *\n * @param name - Name of the attribute.\n * @returns The instance itself.\n * @see {@link https://api.jquery.com/removeAttr/}\n */\n\n\nfunction removeAttr(name) {\n  var attrNames = splitNames(name);\n\n  var _loop_1 = function (i) {\n    utils_1.domEach(this_1, function (elem) {\n      if (utils_1.isTag(elem)) removeAttribute(elem, attrNames[i]);\n    });\n  };\n\n  var this_1 = this;\n\n  for (var i = 0; i < attrNames.length; i++) {\n    _loop_1(i);\n  }\n\n  return this;\n}\n\nexports.removeAttr = removeAttr;\n/**\n * Check to see if *any* of the matched elements have the given `className`.\n *\n * @category Attributes\n * @example\n *\n * ```js\n * $('.pear').hasClass('pear');\n * //=> true\n *\n * $('apple').hasClass('fruit');\n * //=> false\n *\n * $('li').hasClass('pear');\n * //=> true\n * ```\n *\n * @param className - Name of the class.\n * @returns Indicates if an element has the given `className`.\n * @see {@link https://api.jquery.com/hasClass/}\n */\n\nfunction hasClass(className) {\n  return this.toArray().some(function (elem) {\n    var clazz = utils_1.isTag(elem) && elem.attribs.class;\n    var idx = -1;\n\n    if (clazz && className.length) {\n      while ((idx = clazz.indexOf(className, idx + 1)) > -1) {\n        var end = idx + className.length;\n\n        if ((idx === 0 || rspace.test(clazz[idx - 1])) && (end === clazz.length || rspace.test(clazz[end]))) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  });\n}\n\nexports.hasClass = hasClass;\n/**\n * Adds class(es) to all of the matched elements. Also accepts a `function`.\n *\n * @category Attributes\n * @example\n *\n * ```js\n * $('.pear').addClass('fruit').html();\n * //=> <li class=\"pear fruit\">Pear</li>\n *\n * $('.apple').addClass('fruit red').html();\n * //=> <li class=\"apple fruit red\">Apple</li>\n * ```\n *\n * @param value - Name of new class.\n * @returns The instance itself.\n * @see {@link https://api.jquery.com/addClass/}\n */\n\nfunction addClass(value) {\n  // Support functions\n  if (typeof value === 'function') {\n    return utils_1.domEach(this, function (el, i) {\n      if (utils_1.isTag(el)) {\n        var className = el.attribs.class || '';\n        addClass.call([el], value.call(el, i, className));\n      }\n    });\n  } // Return if no value or not a string or function\n\n\n  if (!value || typeof value !== 'string') return this;\n  var classNames = value.split(rspace);\n  var numElements = this.length;\n\n  for (var i = 0; i < numElements; i++) {\n    var el = this[i]; // If selected element isn't a tag, move on\n\n    if (!utils_1.isTag(el)) continue; // If we don't already have classes — always set xmlMode to false here, as it doesn't matter for classes\n\n    var className = getAttr(el, 'class', false);\n\n    if (!className) {\n      setAttr(el, 'class', classNames.join(' ').trim());\n    } else {\n      var setClass = \" \" + className + \" \"; // Check if class already exists\n\n      for (var j = 0; j < classNames.length; j++) {\n        var appendClass = classNames[j] + \" \";\n        if (!setClass.includes(\" \" + appendClass)) setClass += appendClass;\n      }\n\n      setAttr(el, 'class', setClass.trim());\n    }\n  }\n\n  return this;\n}\n\nexports.addClass = addClass;\n/**\n * Removes one or more space-separated classes from the selected elements. If no\n * `className` is defined, all classes will be removed. Also accepts a `function`.\n *\n * @category Attributes\n * @example\n *\n * ```js\n * $('.pear').removeClass('pear').html();\n * //=> <li class=\"\">Pear</li>\n *\n * $('.apple').addClass('red').removeClass().html();\n * //=> <li class=\"\">Apple</li>\n * ```\n *\n * @param name - Name of the class. If not specified, removes all elements.\n * @returns The instance itself.\n * @see {@link https://api.jquery.com/removeClass/}\n */\n\nfunction removeClass(name) {\n  // Handle if value is a function\n  if (typeof name === 'function') {\n    return utils_1.domEach(this, function (el, i) {\n      if (utils_1.isTag(el)) removeClass.call([el], name.call(el, i, el.attribs.class || ''));\n    });\n  }\n\n  var classes = splitNames(name);\n  var numClasses = classes.length;\n  var removeAll = arguments.length === 0;\n  return utils_1.domEach(this, function (el) {\n    if (!utils_1.isTag(el)) return;\n\n    if (removeAll) {\n      // Short circuit the remove all case as this is the nice one\n      el.attribs.class = '';\n    } else {\n      var elClasses = splitNames(el.attribs.class);\n      var changed = false;\n\n      for (var j = 0; j < numClasses; j++) {\n        var index = elClasses.indexOf(classes[j]);\n\n        if (index >= 0) {\n          elClasses.splice(index, 1);\n          changed = true;\n          /*\n           * We have to do another pass to ensure that there are not duplicate\n           * classes listed\n           */\n\n          j--;\n        }\n      }\n\n      if (changed) {\n        el.attribs.class = elClasses.join(' ');\n      }\n    }\n  });\n}\n\nexports.removeClass = removeClass;\n/**\n * Add or remove class(es) from the matched elements, depending on either the\n * class's presence or the value of the switch argument. Also accepts a `function`.\n *\n * @category Attributes\n * @example\n *\n * ```js\n * $('.apple.green').toggleClass('fruit green red').html();\n * //=> <li class=\"apple fruit red\">Apple</li>\n *\n * $('.apple.green').toggleClass('fruit green red', true).html();\n * //=> <li class=\"apple green fruit red\">Apple</li>\n * ```\n *\n * @param value - Name of the class. Can also be a function.\n * @param stateVal - If specified the state of the class.\n * @returns The instance itself.\n * @see {@link https://api.jquery.com/toggleClass/}\n */\n\nfunction toggleClass(value, stateVal) {\n  // Support functions\n  if (typeof value === 'function') {\n    return utils_1.domEach(this, function (el, i) {\n      if (utils_1.isTag(el)) {\n        toggleClass.call([el], value.call(el, i, el.attribs.class || '', stateVal), stateVal);\n      }\n    });\n  } // Return if no value or not a string or function\n\n\n  if (!value || typeof value !== 'string') return this;\n  var classNames = value.split(rspace);\n  var numClasses = classNames.length;\n  var state = typeof stateVal === 'boolean' ? stateVal ? 1 : -1 : 0;\n  var numElements = this.length;\n\n  for (var i = 0; i < numElements; i++) {\n    var el = this[i]; // If selected element isn't a tag, move on\n\n    if (!utils_1.isTag(el)) continue;\n    var elementClasses = splitNames(el.attribs.class); // Check if class already exists\n\n    for (var j = 0; j < numClasses; j++) {\n      // Check if the class name is currently defined\n      var index = elementClasses.indexOf(classNames[j]); // Add if stateValue === true or we are toggling and there is no value\n\n      if (state >= 0 && index < 0) {\n        elementClasses.push(classNames[j]);\n      } else if (state <= 0 && index >= 0) {\n        // Otherwise remove but only if the item exists\n        elementClasses.splice(index, 1);\n      }\n    }\n\n    el.attribs.class = elementClasses.join(' ');\n  }\n\n  return this;\n}\n\nexports.toggleClass = toggleClass;","map":null,"metadata":{},"sourceType":"script"}