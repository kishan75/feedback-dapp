{"ast":null,"code":"\"use strict\";\n\nvar _slicedToArray = require(\"F:\\\\BlockChain\\\\Projects\\\\feedback-dapp\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/slicedToArray\");\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  Object.defineProperty(o, k2, {\n    enumerable: true,\n    get: function () {\n      return m[k];\n    }\n  });\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n\n  __setModuleDefault(result, mod);\n\n  return result;\n};\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.makeContext = exports.normalizeContexts = exports.matchContext = exports.findContext = void 0;\n\nconst debug_1 = __importDefault(require(\"debug\"));\n\nconst debug = debug_1.default(\"codec:contexts:utils\");\n\nconst Evm = __importStar(require(\"../evm\"));\n\nconst Conversion = __importStar(require(\"../conversion\"));\n\nconst escapeRegExp_1 = __importDefault(require(\"lodash/escapeRegExp\"));\n\nconst cbor = __importStar(require(\"cbor\"));\n\nconst compile_common_1 = require(\"@truffle/compile-common\");\n\nconst Abi = __importStar(require(\"@truffle/abi-utils\"));\n\nconst AbiDataUtils = __importStar(require(\"../abi-data/utils\"));\n\nfunction findContext(contexts, binary) {\n  const matchingContexts = Object.values(contexts).filter(context => matchContext(context, binary)); //rather than just pick an arbitrary matching context, we're going\n  //to pick one that isn't a descendant of any of the others.\n  //(if there are multiple of *those*, then yeah it's arbitrary.)\n\n  const context = matchingContexts.find(descendant => !matchingContexts.some(ancestor => descendant.compilationId === ancestor.compilationId && descendant.linearizedBaseContracts && ancestor.contractId !== undefined && descendant.linearizedBaseContracts.slice(1).includes(ancestor.contractId) //we do slice one because everything is an an ancestor of itself; we only\n  //care about *proper* ancestors\n  ));\n  return context || null;\n}\n\nexports.findContext = findContext;\n\nfunction matchContext(context, givenBinary) {\n  const binary = context.binary,\n        compiler = context.compiler,\n        isConstructor = context.isConstructor;\n  const lengthDifference = givenBinary.length - binary.length; //first: if it's not a constructor, and it's not Vyper,\n  //they'd better be equal in length.\n  //if it is a constructor, or is Vyper,\n  //the given binary must be at least as long,\n  //and the difference must be a multiple of 32 bytes (64 hex digits)\n\n  const additionalAllowed = isConstructor || compiler != undefined && compiler.name === \"vyper\";\n\n  if (!additionalAllowed && lengthDifference !== 0 || lengthDifference < 0 || lengthDifference % (2 * Evm.Utils.WORD_SIZE) !== 0) {\n    return false;\n  }\n\n  for (let i = 0; i < binary.length; i++) {\n    //note: using strings like arrays is kind of dangerous in general in JS,\n    //but everything here is ASCII so it's fine\n    //note that we need to compare case-insensitive, since Solidity will\n    //put addresses in checksum case in the compiled source\n    //(we don't actually need that second toLowerCase(), but whatever)\n    if (binary[i] !== \".\" && binary[i].toLowerCase() !== givenBinary[i].toLowerCase()) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nexports.matchContext = matchContext;\n\nfunction normalizeContexts(contexts) {\n  //unfortunately, due to our current link references format, we can't\n  //really use the binary from the artifact directly -- neither for purposes\n  //of matching, nor for purposes of decoding internal functions.  So, we\n  //need to perform this normalization step on our contexts before using\n  //them.  Once we have truffle-db, this step should largely go away.\n  debug(\"normalizing contexts\"); //first, let's clone the input\n  //(let's do a 2-deep clone because we'll be altering binary & compiler)\n\n  let newContexts = Object.assign({}, ...Object.entries(contexts).map(([contextHash, context]) => ({\n    [contextHash]: Object.assign({}, context)\n  })));\n  debug(\"contexts cloned\"); //next, we get all the library names and sort them descending by length.\n  //We're going to want to go in descending order of length so that we\n  //don't run into problems when one name is a substring of another.\n  //For simplicity, we'll exclude names of length <38, because we can\n  //handle these with our more general check for link references at the end\n\n  const fillerLength = 2 * Evm.Utils.ADDRESS_SIZE;\n  let names = Object.values(newContexts).filter(context => context.contractKind === \"library\").map(context => context.contractName).filter(name => name.length >= fillerLength - 3) //the -3 is for 2 leading underscores and 1 trailing\n  .sort((name1, name2) => name2.length - name1.length);\n  debug(\"names sorted\"); //now, we need to turn all these names into regular expressions, because,\n  //unfortunately, str.replace() will only replace all if you use a /g regexp;\n  //note that because names may contain '$', we need to escape them\n  //(also we prepend \"__\" because that's the placeholder format)\n\n  let regexps = names.map(name => new RegExp(escapeRegExp_1.default(\"__\" + name), \"g\"));\n  debug(\"regexps prepared\"); //having done so, we can do the replace for these names!\n\n  const replacement = \".\".repeat(fillerLength);\n\n  for (let regexp of regexps) {\n    for (let context of Object.values(newContexts)) {\n      context.binary = context.binary.replace(regexp, replacement);\n    }\n  }\n\n  debug(\"long replacements complete\"); //now we can do a generic replace that will catch all names of length\n  //<40, while also catching the Solidity compiler's link reference format\n  //as well as Truffle's.  Hooray!\n\n  const genericRegexp = new RegExp(\"_.{\" + (fillerLength - 2) + \"}_\", \"g\"); //we're constructing the regexp /_.{38}_/g, but I didn't want to use a\n  //literal 38 :P\n\n  for (let context of Object.values(newContexts)) {\n    context.binary = context.binary.replace(genericRegexp, replacement);\n  }\n\n  debug(\"short replacements complete\"); //now we must handle the delegatecall guard -- libraries' deployedBytecode will include\n  //0s in place of their own address instead of a link reference at the\n  //beginning, so we need to account for that too\n\n  const pushAddressInstruction = (0x60 + Evm.Utils.ADDRESS_SIZE - 1).toString(16); //\"73\"\n\n  for (let context of Object.values(newContexts)) {\n    if (context.contractKind === \"library\" && !context.isConstructor) {\n      context.binary = context.binary.replace(\"0x\" + pushAddressInstruction + \"00\".repeat(Evm.Utils.ADDRESS_SIZE), \"0x\" + pushAddressInstruction + replacement);\n    }\n  }\n\n  debug(\"extra library replacements complete\"); //now let's handle immutable references\n  //(these are much nicer than link references due to not having to deal with the old format)\n\n  for (let context of Object.values(newContexts)) {\n    if (context.immutableReferences) {\n      for (let variable of Object.values(context.immutableReferences)) {\n        for (let _ref of variable) {\n          let start = _ref.start;\n          let length = _ref.length;\n          //Goddammit TS\n          let lowerStringIndex = 2 + 2 * start;\n          let upperStringIndex = 2 + 2 * (start + length);\n          context.binary = context.binary.slice(0, lowerStringIndex) + \"..\".repeat(length) + context.binary.slice(upperStringIndex);\n        }\n      }\n    }\n  }\n\n  debug(\"immutables complete\"); //now: extract & decode all the cbor's.  we're going to use these for\n  //two different purposes, so let's just get them all upfront.\n\n  let cborInfos = {};\n  let decodedCbors = {}; //note: invalid cbor will be indicated in decodedCbors by the lack of an entry,\n  //*not* by undefined or null, since there exists cbor for those :P\n\n  for (const _ref2 of Object.entries(newContexts)) {\n    var _ref3 = _slicedToArray(_ref2, 2);\n\n    const contextHash = _ref3[0];\n    const context = _ref3[1];\n    const cborInfo = extractCborInfo(context.binary);\n    cborInfos[contextHash] = cborInfo;\n\n    if (cborInfo) {\n      try {\n        //note this *will* throw if there's data left over,\n        //which is what we want it to do\n        const decoded = cbor.decodeFirstSync(cborInfo.cbor);\n        decodedCbors[contextHash] = decoded;\n      } catch (_a) {//just don't add it\n      }\n    }\n  }\n\n  debug(\"intial cbor processing complete\"); //now: if a context lacks a compiler, but a version can be found in the\n  //cbor, add it.\n\n  for (let _ref4 of Object.entries(newContexts)) {\n    var _ref5 = _slicedToArray(_ref4, 2);\n\n    let contextHash = _ref5[0];\n    let context = _ref5[1];\n\n    if (!context.compiler && contextHash in decodedCbors) {\n      context.compiler = detectCompilerInfo(decodedCbors[contextHash]);\n    }\n  }\n\n  debug(\"versions complete\"); //one last step: where there's CBOR with a metadata hash, we'll allow the\n  //CBOR to vary, aside from the length (note: ideally here we would *only*\n  //dot-out the metadata hash part of the CBOR, but, well, it's not worth the\n  //trouble to detect that; doing that could potentially get pretty involved)\n  //note that if the code isn't Solidity, that's fine -- we just won't get\n  //valid CBOR and will not end up adding to our list of regular expressions\n\n  const externalCborInfos = Object.entries(cborInfos).filter(([contextHash, _cborInfo]) => contextHash in decodedCbors && isObjectWithHash(decodedCbors[contextHash])).map(([_contextHash, cborInfo]) => cborInfo);\n  const cborRegexps = externalCborInfos.map(cborInfo => ({\n    input: new RegExp(cborInfo.cborSegment, \"g\"),\n    output: \"..\".repeat(cborInfo.cborLength) + cborInfo.cborLengthHex\n  })); //HACK: we will replace *every* occurrence of *every* external CBOR occurring\n  //in *every* context, in order to cover created contracts (including if there\n  //are multiple or recursive ones)\n\n  for (let context of Object.values(newContexts)) {\n    for (let _ref6 of cborRegexps) {\n      let input = _ref6.input;\n      let output = _ref6.output;\n      context.binary = context.binary.replace(input, output);\n    }\n  }\n\n  debug(\"external wildcards complete\"); //finally, return this mess!\n\n  return newContexts;\n}\n\nexports.normalizeContexts = normalizeContexts;\n\nfunction extractCborInfo(binary) {\n  debug(\"extracting cbor segement of %s\", binary);\n  const lastTwoBytes = binary.slice(2).slice(-2 * 2); //2 bytes * 2 for hex\n  //the slice(2) there may seem unnecessary; it's to handle the possibility that the contract\n  //has less than two bytes in its bytecode (that won't happen with Solidity, but let's be\n  //certain)\n\n  if (lastTwoBytes.length < 2 * 2) {\n    return null; //don't try to handle this case!\n  }\n\n  const cborLength = parseInt(lastTwoBytes, 16);\n  const cborEnd = binary.length - 2 * 2;\n  const cborStart = cborEnd - cborLength * 2; //sanity check\n\n  if (cborStart < 2) {\n    //\"0x\"\n    return null; //don't try to handle this case!\n  }\n\n  const cbor = binary.slice(cborStart, cborEnd);\n  return {\n    cborStart,\n    cborLength,\n    cborEnd,\n    cborLengthHex: lastTwoBytes,\n    cbor,\n    cborSegment: cbor + lastTwoBytes\n  };\n}\n\nfunction isObjectWithHash(decoded) {\n  if (typeof decoded !== \"object\" || decoded === null) {\n    return false;\n  } //cbor sometimes returns maps and sometimes objects,\n  //so let's make things consistent by converting to a map\n  //(actually, is this true? borc did this, I think cbor\n  //does too, but I haven't checked recently)\n\n\n  if (!(decoded instanceof Map)) {\n    decoded = new Map(Object.entries(decoded));\n  }\n\n  const hashKeys = [\"bzzr0\", \"bzzr1\", \"ipfs\"];\n  return hashKeys.some(key => decoded.has(key));\n} //returns undefined if no valid compiler info detected\n//(if it detects solc but no version, it will not return\n//a partial result, just undefined)\n\n\nfunction detectCompilerInfo(decoded) {\n  if (typeof decoded !== \"object\" || decoded === null) {\n    return undefined;\n  } //cbor sometimes returns maps and sometimes objects,\n  //so let's make things consistent by converting to a map\n  //(although see note above?)\n\n\n  if (!(decoded instanceof Map)) {\n    decoded = new Map(Object.entries(decoded));\n  }\n\n  if (!decoded.has(\"solc\")) {\n    //return undefined if the solc version field is not present\n    //(this occurs if version <0.5.9)\n    //currently no other language attaches cbor info, so, yeah\n    return undefined;\n  }\n\n  const rawVersion = decoded.get(\"solc\");\n\n  if (typeof rawVersion === \"string\") {\n    //for prerelease versions, the version is stored as a string.\n    return {\n      name: \"solc\",\n      version: rawVersion\n    };\n  } else if (rawVersion instanceof Uint8Array && rawVersion.length === 3) {\n    //for release versions, it's stored as a bytestring of length 3, with the\n    //bytes being major, minor, patch. so we just join them with \".\" to form\n    //a version string (although it's missing precise commit & etc).\n    return {\n      name: \"solc\",\n      version: rawVersion.join(\".\")\n    };\n  } else {\n    //return undefined on anything else\n    return undefined;\n  }\n}\n\nfunction makeContext(contract, node, compilation, isConstructor = false) {\n  const abi = Abi.normalize(contract.abi);\n  const bytecode = isConstructor ? contract.bytecode : contract.deployedBytecode;\n  const binary = compile_common_1.Shims.NewToLegacy.forBytecode(bytecode);\n  const hash = Conversion.toHexString(Evm.Utils.keccak256({\n    type: \"string\",\n    value: binary\n  }));\n  debug(\"hash: %s\", hash);\n  const fallback = abi.find(abiEntry => abiEntry.type === \"fallback\") || null; //TS is failing at inference here\n\n  const receive = abi.find(abiEntry => abiEntry.type === \"receive\") || null; //and here\n\n  return {\n    context: hash,\n    contractName: contract.contractName,\n    binary,\n    contractId: node ? node.id : undefined,\n    linearizedBaseContracts: node ? node.linearizedBaseContracts : undefined,\n    contractKind: contractKind(contract, node),\n    immutableReferences: isConstructor ? undefined : contract.immutableReferences,\n    isConstructor,\n    abi: AbiDataUtils.computeSelectors(abi),\n    payable: AbiDataUtils.abiHasPayableFallback(abi),\n    fallbackAbi: {\n      fallback,\n      receive\n    },\n    compiler: compilation.compiler || contract.compiler,\n    compilationId: compilation.id\n  };\n}\n\nexports.makeContext = makeContext; //attempts to determine if the given contract is a library or not\n\nfunction contractKind(contract, node) {\n  //first: if we have a node, use its listed contract kind\n  if (node) {\n    return node.contractKind;\n  } //next: check the contract kind field on the contract object itself, if it exists.\n  //however this isn't implemented yet so we'll skip it.\n  //next: if we have no direct info on the contract kind, but we do\n  //have the deployed bytecode, we'll use a HACK:\n  //we'll assume it's an ordinary contract, UNLESS its deployed bytecode begins with\n  //PUSH20 followed by 20 0s, in which case we'll assume it's a library\n  //(note: this will fail to detect libraries from before Solidity 0.4.20)\n\n\n  if (contract.deployedBytecode) {\n    const deployedBytecode = compile_common_1.Shims.NewToLegacy.forBytecode(contract.deployedBytecode);\n    const pushAddressInstruction = (0x60 + Evm.Utils.ADDRESS_SIZE - 1).toString(16); //\"73\"\n\n    const libraryString = \"0x\" + pushAddressInstruction + \"00\".repeat(Evm.Utils.ADDRESS_SIZE);\n    return deployedBytecode.startsWith(libraryString) ? \"library\" : \"contract\";\n  } //finally, in the absence of anything to go on, we'll assume it's an ordinary contract\n\n\n  return \"contract\";\n}","map":null,"metadata":{},"sourceType":"script"}