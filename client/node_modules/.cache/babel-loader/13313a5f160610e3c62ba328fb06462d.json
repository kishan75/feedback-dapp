{"ast":null,"code":"import { unsafeUniformIntDistributionInternal } from './internals/UnsafeUniformIntDistributionInternal.js';\nimport { fromNumberToArrayInt64, substractArrayInt64 } from './internals/ArrayInt.js';\nimport { unsafeUniformArrayIntDistributionInternal } from './internals/UnsafeUniformArrayIntDistributionInternal.js';\nvar sharedA = {\n  sign: 1,\n  data: [0, 0]\n};\nvar sharedB = {\n  sign: 1,\n  data: [0, 0]\n};\nvar sharedC = {\n  sign: 1,\n  data: [0, 0]\n};\nvar sharedData = [0, 0];\n\nfunction uniformLargeIntInternal(from, to, rangeSize, rng) {\n  var rangeSizeArrayIntValue = rangeSize <= Number.MAX_SAFE_INTEGER ? fromNumberToArrayInt64(sharedC, rangeSize) : substractArrayInt64(sharedC, fromNumberToArrayInt64(sharedA, to), fromNumberToArrayInt64(sharedB, from));\n\n  if (rangeSizeArrayIntValue.data[1] === 0xffffffff) {\n    rangeSizeArrayIntValue.data[0] += 1;\n    rangeSizeArrayIntValue.data[1] = 0;\n  } else {\n    rangeSizeArrayIntValue.data[1] += 1;\n  }\n\n  unsafeUniformArrayIntDistributionInternal(sharedData, rangeSizeArrayIntValue.data, rng);\n  return sharedData[0] * 0x100000000 + sharedData[1] + from;\n}\n\nexport function unsafeUniformIntDistribution(from, to, rng) {\n  var rangeSize = to - from;\n\n  if (rangeSize <= 0xffffffff) {\n    var g = unsafeUniformIntDistributionInternal(rangeSize + 1, rng);\n    return g + from;\n  }\n\n  return uniformLargeIntInternal(from, to, rangeSize, rng);\n}","map":null,"metadata":{},"sourceType":"module"}