{"ast":null,"code":"import { NextArbitrary } from '../../check/arbitrary/definition/NextArbitrary.js';\nimport { Stream } from '../../stream/Stream.js';\nimport { noUndefinedAsContext, UndefinedContextPlaceholder } from './helpers/NoUndefinedAsContext.js';\nexport class AlwaysShrinkableArbitrary extends NextArbitrary {\n  constructor(arb) {\n    super();\n    this.arb = arb;\n  }\n\n  generate(mrng, biasFactor) {\n    const value = this.arb.generate(mrng, biasFactor);\n    return noUndefinedAsContext(value);\n  }\n\n  canShrinkWithoutContext(value) {\n    return true;\n  }\n\n  shrink(value, context) {\n    if (context === undefined && !this.arb.canShrinkWithoutContext(value)) {\n      return Stream.nil();\n    }\n\n    const safeContext = context !== UndefinedContextPlaceholder ? context : undefined;\n    return this.arb.shrink(value, safeContext).map(noUndefinedAsContext);\n  }\n\n}","map":null,"metadata":{},"sourceType":"module"}