{"ast":null,"code":"const _require = require(\"@ensdomains/ensjs\"),\n      ENSJS = _require.default,\n      getEnsAddress = _require.getEnsAddress;\n\nconst _require2 = require(\"web3-utils\"),\n      isAddress = _require2.isAddress;\n\nmodule.exports = {\n  convertENSNames: async function ({\n    ens,\n    inputArgs,\n    methodABI,\n    inputParams,\n    web3,\n    networkId\n  }) {\n    const registryAddress = ens.registryAddress;\n    let args;\n\n    if (inputArgs.length && methodABI) {\n      args = await this.convertENSArgsNames({\n        inputArgs,\n        methodABI,\n        web3,\n        registryAddress,\n        networkId\n      });\n    } else {\n      args = inputArgs;\n    }\n\n    let params;\n\n    if (inputParams) {\n      params = await this.convertENSParamsNames({\n        inputParams,\n        web3,\n        registryAddress,\n        networkId\n      });\n    }\n\n    return {\n      args,\n      params\n    };\n  },\n  getNewENSJS: function ({\n    provider,\n    registryAddress,\n    networkId\n  }) {\n    return new ENSJS({\n      provider,\n      ensAddress: registryAddress || getEnsAddress(networkId)\n    });\n  },\n  resolveNameToAddress: async function ({\n    name,\n    provider,\n    registryAddress,\n    networkId\n  }) {\n    let ensjs;\n\n    try {\n      ensjs = this.getNewENSJS({\n        provider,\n        registryAddress,\n        networkId\n      });\n    } catch (error) {\n      const message = \"There was a problem initializing the ENS library.\" + \"Please ensure you have the address of the registry set correctly.\" + \" Truffle is currently using \".concat(registryAddress, \".\");\n      throw new Error(\"\".concat(message, \" - \").concat(error.message));\n    }\n\n    return await ensjs.name(name).getAddress(\"ETH\");\n  },\n  convertENSArgsNames: function ({\n    inputArgs,\n    methodABI,\n    web3,\n    registryAddress,\n    networkId\n  }) {\n    if (methodABI.inputs.length === 0) return inputArgs;\n    const convertedNames = inputArgs.map((argument, index) => {\n      if (index + 1 > methodABI.inputs.length) {\n        return argument;\n      } else if (methodABI.inputs[index].type === \"address\") {\n        // Check all address arguments for ENS names\n        const argIsAddress = isAddress(argument);\n        if (argIsAddress) return argument;\n        return this.resolveNameToAddress({\n          name: argument,\n          provider: web3.currentProvider,\n          registryAddress,\n          networkId\n        });\n      } else {\n        return argument;\n      }\n    });\n    return Promise.all(convertedNames);\n  },\n  convertENSParamsNames: async function ({\n    inputParams,\n    web3,\n    registryAddress,\n    networkId\n  }) {\n    let outputParams = inputParams;\n\n    if (inputParams.from && !isAddress(inputParams.from)) {\n      const newFrom = await this.resolveNameToAddress({\n        name: inputParams.from,\n        provider: web3.currentProvider,\n        networkId,\n        registryAddress\n      });\n      outputParams = { ...outputParams,\n        from: newFrom\n      };\n    }\n\n    if (inputParams.accessList && Array.isArray(inputParams.accessList)) {\n      const newAccessList = await Promise.all(inputParams.accessList.map(async entry => {\n        if (entry && entry.address && !isAddress(entry.address)) {\n          const newAddress = await this.resolveNameToAddress({\n            name: entry.address,\n            provider: web3.currentProvider,\n            networkId,\n            registryAddress\n          });\n          return { ...entry,\n            address: newAddress\n          };\n        } else {\n          return entry;\n        }\n      }));\n      outputParams = { ...outputParams,\n        accessList: newAccessList\n      };\n    }\n\n    return outputParams;\n  }\n};","map":null,"metadata":{},"sourceType":"script"}