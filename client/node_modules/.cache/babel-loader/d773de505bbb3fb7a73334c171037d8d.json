{"ast":null,"code":"import { escapeForMultilineComments } from '../helpers/TextEscaper.js';\nimport { cloneMethod } from '../../../check/symbols.js';\nimport { hash } from '../../../utils/hash.js';\nimport { stringify } from '../../../utils/stringify.js';\nimport { integer } from '../../integer.js';\nimport { tuple } from '../../tuple.js';\nexport function buildCompareFunctionArbitrary(cmp) {\n  return tuple(integer().noShrink(), integer(1, 0xffffffff).noShrink()).map(([seed, hashEnvSize]) => {\n    const producer = () => {\n      const recorded = {};\n\n      const f = (a, b) => {\n        const reprA = stringify(a);\n        const reprB = stringify(b);\n        const hA = hash(\"\".concat(seed).concat(reprA)) % hashEnvSize;\n        const hB = hash(\"\".concat(seed).concat(reprB)) % hashEnvSize;\n        const val = cmp(hA, hB);\n        recorded[\"[\".concat(reprA, \",\").concat(reprB, \"]\")] = val;\n        return val;\n      };\n\n      return Object.assign(f, {\n        toString: () => {\n          const seenValues = Object.keys(recorded).sort().map(k => \"\".concat(k, \" => \").concat(stringify(recorded[k]))).map(line => \"/* \".concat(escapeForMultilineComments(line), \" */\"));\n          return \"function(a, b) {\\n  // With hash and stringify coming from fast-check\".concat(seenValues.length !== 0 ? \"\\n  \".concat(seenValues.join('\\n  ')) : '', \"\\n  const cmp = \").concat(cmp, \";\\n  const hA = hash('\").concat(seed, \"' + stringify(a)) % \").concat(hashEnvSize, \";\\n  const hB = hash('\").concat(seed, \"' + stringify(b)) % \").concat(hashEnvSize, \";\\n  return cmp(hA, hB);\\n}\");\n        },\n        [cloneMethod]: producer\n      });\n    };\n\n    return producer();\n  });\n}","map":null,"metadata":{},"sourceType":"module"}