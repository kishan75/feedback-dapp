{"ast":null,"code":"'use strict'; //Const\n\nconst NOAH_ARK_CAPACITY = 3; //List of formatting elements\n\nclass FormattingElementList {\n  constructor(treeAdapter) {\n    this.length = 0;\n    this.entries = [];\n    this.treeAdapter = treeAdapter;\n    this.bookmark = null;\n  } //Noah Ark's condition\n  //OPTIMIZATION: at first we try to find possible candidates for exclusion using\n  //lightweight heuristics without thorough attributes check.\n\n\n  _getNoahArkConditionCandidates(newElement) {\n    const candidates = [];\n\n    if (this.length >= NOAH_ARK_CAPACITY) {\n      const neAttrsLength = this.treeAdapter.getAttrList(newElement).length;\n      const neTagName = this.treeAdapter.getTagName(newElement);\n      const neNamespaceURI = this.treeAdapter.getNamespaceURI(newElement);\n\n      for (let i = this.length - 1; i >= 0; i--) {\n        const entry = this.entries[i];\n\n        if (entry.type === FormattingElementList.MARKER_ENTRY) {\n          break;\n        }\n\n        const element = entry.element;\n        const elementAttrs = this.treeAdapter.getAttrList(element);\n        const isCandidate = this.treeAdapter.getTagName(element) === neTagName && this.treeAdapter.getNamespaceURI(element) === neNamespaceURI && elementAttrs.length === neAttrsLength;\n\n        if (isCandidate) {\n          candidates.push({\n            idx: i,\n            attrs: elementAttrs\n          });\n        }\n      }\n    }\n\n    return candidates.length < NOAH_ARK_CAPACITY ? [] : candidates;\n  }\n\n  _ensureNoahArkCondition(newElement) {\n    const candidates = this._getNoahArkConditionCandidates(newElement);\n\n    let cLength = candidates.length;\n\n    if (cLength) {\n      const neAttrs = this.treeAdapter.getAttrList(newElement);\n      const neAttrsLength = neAttrs.length;\n      const neAttrsMap = Object.create(null); //NOTE: build attrs map for the new element so we can perform fast lookups\n\n      for (let i = 0; i < neAttrsLength; i++) {\n        const neAttr = neAttrs[i];\n        neAttrsMap[neAttr.name] = neAttr.value;\n      }\n\n      for (let i = 0; i < neAttrsLength; i++) {\n        for (let j = 0; j < cLength; j++) {\n          const cAttr = candidates[j].attrs[i];\n\n          if (neAttrsMap[cAttr.name] !== cAttr.value) {\n            candidates.splice(j, 1);\n            cLength--;\n          }\n\n          if (candidates.length < NOAH_ARK_CAPACITY) {\n            return;\n          }\n        }\n      } //NOTE: remove bottommost candidates until Noah's Ark condition will not be met\n\n\n      for (let i = cLength - 1; i >= NOAH_ARK_CAPACITY - 1; i--) {\n        this.entries.splice(candidates[i].idx, 1);\n        this.length--;\n      }\n    }\n  } //Mutations\n\n\n  insertMarker() {\n    this.entries.push({\n      type: FormattingElementList.MARKER_ENTRY\n    });\n    this.length++;\n  }\n\n  pushElement(element, token) {\n    this._ensureNoahArkCondition(element);\n\n    this.entries.push({\n      type: FormattingElementList.ELEMENT_ENTRY,\n      element: element,\n      token: token\n    });\n    this.length++;\n  }\n\n  insertElementAfterBookmark(element, token) {\n    let bookmarkIdx = this.length - 1;\n\n    for (; bookmarkIdx >= 0; bookmarkIdx--) {\n      if (this.entries[bookmarkIdx] === this.bookmark) {\n        break;\n      }\n    }\n\n    this.entries.splice(bookmarkIdx + 1, 0, {\n      type: FormattingElementList.ELEMENT_ENTRY,\n      element: element,\n      token: token\n    });\n    this.length++;\n  }\n\n  removeEntry(entry) {\n    for (let i = this.length - 1; i >= 0; i--) {\n      if (this.entries[i] === entry) {\n        this.entries.splice(i, 1);\n        this.length--;\n        break;\n      }\n    }\n  }\n\n  clearToLastMarker() {\n    while (this.length) {\n      const entry = this.entries.pop();\n      this.length--;\n\n      if (entry.type === FormattingElementList.MARKER_ENTRY) {\n        break;\n      }\n    }\n  } //Search\n\n\n  getElementEntryInScopeWithTagName(tagName) {\n    for (let i = this.length - 1; i >= 0; i--) {\n      const entry = this.entries[i];\n\n      if (entry.type === FormattingElementList.MARKER_ENTRY) {\n        return null;\n      }\n\n      if (this.treeAdapter.getTagName(entry.element) === tagName) {\n        return entry;\n      }\n    }\n\n    return null;\n  }\n\n  getElementEntry(element) {\n    for (let i = this.length - 1; i >= 0; i--) {\n      const entry = this.entries[i];\n\n      if (entry.type === FormattingElementList.ELEMENT_ENTRY && entry.element === element) {\n        return entry;\n      }\n    }\n\n    return null;\n  }\n\n} //Entry types\n\n\nFormattingElementList.MARKER_ENTRY = 'MARKER_ENTRY';\nFormattingElementList.ELEMENT_ENTRY = 'ELEMENT_ENTRY';\nmodule.exports = FormattingElementList;","map":null,"metadata":{},"sourceType":"script"}