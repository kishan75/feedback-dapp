{"ast":null,"code":"\"use strict\";\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  Object.defineProperty(o, k2, {\n    enumerable: true,\n    get: function () {\n      return m[k];\n    }\n  });\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n\n  __setModuleDefault(result, mod);\n\n  return result;\n};\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.mappingKeyAsHex = exports.encodeMappingKey = void 0;\n\nconst debug_1 = __importDefault(require(\"debug\"));\n\nconst debug = debug_1.default(\"codec:mapping-key:encode\");\n\nconst Conversion = __importStar(require(\"../../conversion\"));\n\nconst BasicEncode = __importStar(require(\"../../basic/encode\"));\n\nconst BytesEncode = __importStar(require(\"../../bytes/encode\")); //UGH -- it turns out TypeScript can't handle nested tagged unions\n//see: https://github.com/microsoft/TypeScript/issues/18758\n//so, I'm just going to have to throw in a bunch of type coercions >_>\n\n/**\n * @Category Encoding (low-level)\n */\n\n\nfunction encodeMappingKey(input) {\n  if (input.type.typeClass === \"string\" || input.type.typeClass === \"bytes\" && input.type.kind === \"dynamic\") {\n    return BytesEncode.encodeBytes(input);\n  } else {\n    return BasicEncode.encodeBasic(input);\n  }\n}\n\nexports.encodeMappingKey = encodeMappingKey;\n/**\n * @Category Encoding (low-level)\n */\n\nfunction mappingKeyAsHex(input) {\n  return Conversion.toHexString(encodeMappingKey(input));\n}\n\nexports.mappingKeyAsHex = mappingKeyAsHex;","map":null,"metadata":{},"sourceType":"script"}