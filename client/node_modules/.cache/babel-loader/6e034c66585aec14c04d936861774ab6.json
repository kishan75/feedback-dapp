{"ast":null,"code":"\"use strict\";\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  Object.defineProperty(o, k2, {\n    enumerable: true,\n    get: function () {\n      return m[k];\n    }\n  });\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n\n  __setModuleDefault(result, mod);\n\n  return result;\n};\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.byteLength = void 0;\n\nconst debug_1 = __importDefault(require(\"debug\"));\n\nconst debug = debug_1.default(\"codec:basic:allocate\");\n\nconst Common = __importStar(require(\"../../common\"));\n\nconst Evm = __importStar(require(\"../../evm\"));\n\nconst Format = __importStar(require(\"../../format\")); //only for direct types!\n\n\nfunction byteLength(dataType, userDefinedTypes) {\n  switch (dataType.typeClass) {\n    case \"bool\":\n      return 1;\n\n    case \"address\":\n    case \"contract\":\n      return Evm.Utils.ADDRESS_SIZE;\n\n    case \"int\":\n    case \"uint\":\n    case \"fixed\":\n    case \"ufixed\":\n      return dataType.bits / 8;\n\n    case \"function\":\n      switch (dataType.visibility) {\n        case \"internal\":\n          return Evm.Utils.PC_SIZE * 2;\n\n        case \"external\":\n          return Evm.Utils.ADDRESS_SIZE + Evm.Utils.SELECTOR_SIZE;\n      }\n\n    case \"bytes\":\n      //we assume we're in the static case\n      return dataType.length;\n\n    case \"enum\":\n      {\n        const storedType = userDefinedTypes[dataType.id];\n\n        if (!storedType || !storedType.options) {\n          throw new Common.UnknownUserDefinedTypeError(dataType.id, Format.Types.typeString(dataType));\n        }\n\n        const numValues = storedType.options.length;\n        return Math.ceil(Math.log2(numValues) / 8);\n      }\n\n    case \"userDefinedValueType\":\n      {\n        const storedType = userDefinedTypes[dataType.id];\n\n        if (!storedType || !storedType.underlyingType) {\n          throw new Common.UnknownUserDefinedTypeError(dataType.id, Format.Types.typeString(dataType));\n        }\n\n        const underlyingType = storedType.underlyingType;\n        return byteLength(underlyingType, userDefinedTypes);\n      }\n  }\n}\n\nexports.byteLength = byteLength;","map":null,"metadata":{},"sourceType":"script"}