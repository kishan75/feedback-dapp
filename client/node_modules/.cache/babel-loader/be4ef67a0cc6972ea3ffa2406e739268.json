{"ast":null,"code":"\"use strict\";\n/**\n * @protected\n *\n * @packageDocumentation\n */\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  Object.defineProperty(o, k2, {\n    enumerable: true,\n    get: function () {\n      return m[k];\n    }\n  });\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n\n  __setModuleDefault(result, mod);\n\n  return result;\n};\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.decodeMemoryReferenceByAddress = exports.decodeMemory = void 0;\n\nconst debug_1 = __importDefault(require(\"debug\"));\n\nconst debug = debug_1.default(\"codec:memory:decode\");\n\nconst read_1 = __importDefault(require(\"../../read\"));\n\nconst Conversion = __importStar(require(\"../../conversion\"));\n\nconst Format = __importStar(require(\"../../format\"));\n\nconst Basic = __importStar(require(\"../../basic\"));\n\nconst Bytes = __importStar(require(\"../../bytes\"));\n\nconst Evm = __importStar(require(\"../../evm\"));\n\nconst allocate_1 = require(\"../allocate\");\n\nconst errors_1 = require(\"../../errors\");\n\nfunction* decodeMemory(dataType, pointer, info, options = {}) {\n  if (Format.Types.isReferenceType(dataType)) {\n    if (allocate_1.isSkippedInMemoryStructs(dataType)) {\n      //special case; these types are always empty in memory\n      return decodeMemorySkippedType(dataType);\n    } else {\n      return yield* decodeMemoryReferenceByAddress(dataType, pointer, info, options);\n    }\n  } else {\n    return yield* Basic.Decode.decodeBasic(dataType, pointer, info, options);\n  }\n}\n\nexports.decodeMemory = decodeMemory;\n\nfunction decodeMemorySkippedType(dataType) {\n  switch (dataType.typeClass) {\n    case \"mapping\":\n      return {\n        type: dataType,\n        kind: \"value\",\n        value: []\n      };\n\n    case \"array\":\n      return {\n        type: dataType,\n        kind: \"value\",\n        value: []\n      };\n    //other cases should not arise!\n  }\n}\n\nfunction* decodeMemoryReferenceByAddress(dataType, pointer, info, options = {}) {\n  const state = info.state;\n  const memoryVisited = options.memoryVisited || [];\n  debug(\"pointer %o\", pointer);\n  let rawValue;\n\n  try {\n    rawValue = yield* read_1.default(pointer, state);\n  } catch (error) {\n    return errors_1.handleDecodingError(dataType, error);\n  }\n\n  let startPositionAsBN = Conversion.toBN(rawValue);\n  let startPosition;\n\n  try {\n    startPosition = startPositionAsBN.toNumber();\n  } catch (_a) {\n    return {\n      //again with the TS failures...\n      type: dataType,\n      kind: \"error\",\n      error: {\n        kind: \"OverlargePointersNotImplementedError\",\n        pointerAsBN: startPositionAsBN\n      }\n    };\n  } //startPosition may get modified later, so let's save the current\n  //value for circularity detection purposes\n\n\n  const objectPosition = startPosition;\n  let rawLength;\n  let lengthAsBN;\n  let length;\n  let seenPreviously;\n\n  switch (dataType.typeClass) {\n    case \"bytes\":\n    case \"string\":\n      //initial word contains length\n      try {\n        rawLength = yield* read_1.default({\n          location: \"memory\",\n          start: startPosition,\n          length: Evm.Utils.WORD_SIZE\n        }, state);\n      } catch (error) {\n        return errors_1.handleDecodingError(dataType, error);\n      }\n\n      lengthAsBN = Conversion.toBN(rawLength);\n\n      try {\n        length = lengthAsBN.toNumber();\n      } catch (_b) {\n        return {\n          //again with the TS failures...\n          type: dataType,\n          kind: \"error\",\n          error: {\n            kind: \"OverlongArraysAndStringsNotImplementedError\",\n            lengthAsBN\n          }\n        };\n      }\n\n      let childPointer = {\n        location: \"memory\",\n        start: startPosition + Evm.Utils.WORD_SIZE,\n        length\n      };\n      return yield* Bytes.Decode.decodeBytes(dataType, childPointer, info);\n\n    case \"array\":\n      {\n        //first: circularity check!\n        seenPreviously = memoryVisited.indexOf(objectPosition);\n\n        if (seenPreviously !== -1) {\n          return {\n            type: dataType,\n            kind: \"value\",\n            reference: seenPreviously + 1,\n            value: [] //will be fixed later by the tie function\n\n          };\n        } //otherwise, decode as normal\n\n\n        if (dataType.kind === \"dynamic\") {\n          //initial word contains array length\n          try {\n            rawLength = yield* read_1.default({\n              location: \"memory\",\n              start: startPosition,\n              length: Evm.Utils.WORD_SIZE\n            }, state);\n          } catch (error) {\n            return errors_1.handleDecodingError(dataType, error);\n          }\n\n          lengthAsBN = Conversion.toBN(rawLength);\n          startPosition += Evm.Utils.WORD_SIZE; //increment startPosition\n          //to next word, as first word was used for length\n        } else {\n          lengthAsBN = dataType.length;\n        }\n\n        try {\n          length = lengthAsBN.toNumber();\n        } catch (_c) {\n          return {\n            type: dataType,\n            kind: \"error\",\n            error: {\n              kind: \"OverlongArraysAndStringsNotImplementedError\",\n              lengthAsBN\n            }\n          };\n        }\n\n        let memoryNowVisited = [objectPosition, ...memoryVisited];\n        let baseType = dataType.baseType;\n        let decodedChildren = [];\n\n        for (let index = 0; index < length; index++) {\n          decodedChildren.push((yield* decodeMemory(baseType, {\n            location: \"memory\",\n            start: startPosition + index * Evm.Utils.WORD_SIZE,\n            length: Evm.Utils.WORD_SIZE\n          }, info, {\n            memoryVisited: memoryNowVisited\n          })));\n        }\n\n        return {\n          type: dataType,\n          kind: \"value\",\n          value: decodedChildren\n        };\n      }\n\n    case \"struct\":\n      {\n        //first: circularity check!\n        seenPreviously = memoryVisited.indexOf(objectPosition);\n\n        if (seenPreviously !== -1) {\n          return {\n            type: dataType,\n            kind: \"value\",\n            reference: seenPreviously + 1,\n            value: [] //will be fixed later by the tie function\n\n          };\n        } //otherwise, decode as normal\n\n\n        const allocations = info.allocations.memory;\n        const typeId = dataType.id;\n        const structAllocation = allocations[typeId];\n\n        if (!structAllocation) {\n          return {\n            type: dataType,\n            kind: \"error\",\n            error: {\n              kind: \"UserDefinedTypeNotFoundError\",\n              type: dataType\n            }\n          };\n        }\n\n        debug(\"structAllocation %O\", structAllocation);\n        let memoryNowVisited = [objectPosition, ...memoryVisited];\n        let decodedMembers = [];\n\n        for (let index = 0; index < structAllocation.members.length; index++) {\n          const memberAllocation = structAllocation.members[index];\n          const memberPointer = memberAllocation.pointer;\n          const childPointer = {\n            location: \"memory\",\n            start: startPosition + memberPointer.start,\n            length: memberPointer.length //always equals WORD_SIZE or 0\n\n          };\n          let memberName = memberAllocation.name;\n          let memberType = Format.Types.specifyLocation(memberAllocation.type, \"memory\");\n          decodedMembers.push({\n            name: memberName,\n            value: yield* decodeMemory(memberType, childPointer, info, {\n              memoryVisited: memoryNowVisited\n            })\n          });\n        }\n\n        return {\n          type: dataType,\n          kind: \"value\",\n          value: decodedMembers\n        };\n      }\n  }\n}\n\nexports.decodeMemoryReferenceByAddress = decodeMemoryReferenceByAddress;","map":null,"metadata":{},"sourceType":"script"}