{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.compile = exports.parse = void 0;\n\nvar parse_1 = require(\"./parse\");\n\nObject.defineProperty(exports, \"parse\", {\n  enumerable: true,\n  get: function () {\n    return parse_1.parse;\n  }\n});\n\nvar compile_1 = require(\"./compile\");\n\nObject.defineProperty(exports, \"compile\", {\n  enumerable: true,\n  get: function () {\n    return compile_1.compile;\n  }\n});\n/**\n * Parses and compiles a formula to a highly optimized function.\n * Combination of `parse` and `compile`.\n *\n * If the formula doesn't match any elements,\n * it returns [`boolbase`](https://github.com/fb55/boolbase)'s `falseFunc`.\n * Otherwise, a function accepting an _index_ is returned, which returns\n * whether or not the passed _index_ matches the formula.\n *\n * Note: The nth-rule starts counting at `1`, the returned function at `0`.\n *\n * @param formula The formula to compile.\n * @example\n * const check = nthCheck(\"2n+3\");\n *\n * check(0); // `false`\n * check(1); // `false`\n * check(2); // `true`\n * check(3); // `false`\n * check(4); // `true`\n * check(5); // `false`\n * check(6); // `true`\n */\n\nfunction nthCheck(formula) {\n  return (0, compile_1.compile)((0, parse_1.parse)(formula));\n}\n\nexports.default = nthCheck;","map":null,"metadata":{},"sourceType":"script"}