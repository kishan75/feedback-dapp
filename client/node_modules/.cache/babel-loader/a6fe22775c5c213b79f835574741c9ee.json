{"ast":null,"code":"const DebugUtils = require(\"@truffle/debug-utils\");\n/**\n * Methods to fetch and decode reason string from ganache when a tx errors.\n */\n\n\nconst reason = {\n  /**\n   * Extracts a reason string from `eth_call` response\n   * @param  {Object}           res  response from `eth_call` to extract reason\n   * @param  {Web3}             web3 a helpful friend\n   * @param  {InterfaceAdapter}      interfaceAdapter a new helpful friend\n   * @return {String|Undefined}      decoded reason string\n   */\n  _extract: function (res, web3, _interfaceAdapter) {\n    //I'm not sure why interfaceAdapter is here if it's not used,\n    //so I just put an underscore in front of its name for now...\n    if (!res || !res.error && !res.result) return;\n    const isObject = res && typeof res === \"object\" && res.error && res.error.data;\n    const isString = res && typeof res === \"object\" && typeof res.result === \"string\";\n\n    if (isObject) {\n      // NOTE that Ganache >=2 returns the reason string when\n      // vmErrorsOnRPCResponse === true, which this code could\n      // be updated to respect (instead of computing here)\n      const data = res.error.data;\n      let resData;\n\n      if (typeof data === \"string\") {\n        resData = data; // geth, Ganache >7.0.0\n      } else if (\"result\" in data) {\n        // there is a single result (Ganache 7.0.0)\n        resData = data.result;\n      } else {\n        // handle `evm_mine`, `miner_start`, batch payloads, and ganache 2.0\n        // NOTE this only works for a single failed transaction at a time.\n        const hash = Object.keys(data)[0];\n        const errorDetails = data[hash];\n        resData = errorDetails.return\n        /* ganache 2.0 */\n        ;\n      }\n\n      return reason._decode(resData, web3);\n    } else if (isString) {\n      return reason._decode(res.result, web3);\n    } else {\n      return undefined;\n    }\n  },\n  _decode: function (rawData, web3) {\n    const errorStringHash = \"0x08c379a0\";\n    const panicCodeHash = \"0x4e487b71\";\n    const selectorLength = 2 + 2 * 4; //0x then 4 bytes (0x then 8 hex digits)\n\n    const wordLength = 2 * 32; //32 bytes (64 hex digits)\n\n    if (!rawData) {\n      return undefined;\n    } else if (rawData === \"0x\") {\n      //no revert message\n      return undefined;\n    } else if (rawData.startsWith(errorStringHash)) {\n      try {\n        return web3.eth.abi.decodeParameter(\"string\", rawData.slice(selectorLength));\n      } catch (_) {\n        //no reasonable way to handle this case at present\n        return undefined;\n      }\n    } else if (rawData.startsWith(panicCodeHash)) {\n      if (rawData.length === selectorLength + wordLength) {\n        const panicCode = web3.eth.abi.decodeParameter(\"uint256\", rawData.slice(selectorLength)); //this returns a decimal string\n\n        return \"Panic: \".concat(DebugUtils.panicString(panicCode));\n      } else {\n        //incorrectly encoded panic...?\n        return undefined;\n      }\n    } else {\n      //we can't reasonably handle custom errors here\n      //(but we can probably assume it is one?)\n      return \"Custom error (could not decode)\";\n    }\n  },\n\n  /**\n   * Runs tx via `eth_call` and resolves a reason string if it exists on the response.\n   * @param  {Object} web3\n   * @param  {Object} interfaceAdapter\n   * @return {String|Undefined}\n   */\n  get: function (params, web3, interfaceAdapter) {\n    const packet = {\n      jsonrpc: \"2.0\",\n      method: \"eth_call\",\n      params: [params, \"latest\"],\n      id: new Date().getTime()\n    };\n    return new Promise(resolve => {\n      web3.currentProvider.send(packet, (err, response) => {\n        const reasonString = reason._extract(response, web3, interfaceAdapter);\n\n        resolve(reasonString);\n      });\n    });\n  }\n};\nmodule.exports = reason;","map":null,"metadata":{},"sourceType":"script"}