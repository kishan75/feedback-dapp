{"ast":null,"code":"import _slicedToArray from \"F:\\\\BlockChain\\\\Projects\\\\feedback-dapp\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nconst _excluded = [\"getTrigger\", \"target\"];\nimport * as React from 'react';\n\nfunction defaultTrigger(store, options) {\n  const _options$disableHyste = options.disableHysteresis,\n        disableHysteresis = _options$disableHyste === void 0 ? false : _options$disableHyste,\n        _options$threshold = options.threshold,\n        threshold = _options$threshold === void 0 ? 100 : _options$threshold,\n        target = options.target;\n  const previous = store.current;\n\n  if (target) {\n    // Get vertical scroll\n    store.current = target.pageYOffset !== undefined ? target.pageYOffset : target.scrollTop;\n  }\n\n  if (!disableHysteresis && previous !== undefined) {\n    if (store.current < previous) {\n      return false;\n    }\n  }\n\n  return store.current > threshold;\n}\n\nconst defaultTarget = typeof window !== 'undefined' ? window : null;\nexport default function useScrollTrigger(options = {}) {\n  const _options$getTrigger = options.getTrigger,\n        getTrigger = _options$getTrigger === void 0 ? defaultTrigger : _options$getTrigger,\n        _options$target = options.target,\n        target = _options$target === void 0 ? defaultTarget : _options$target,\n        other = _objectWithoutPropertiesLoose(options, _excluded);\n\n  const store = React.useRef();\n\n  const _React$useState = React.useState(() => getTrigger(store, other)),\n        _React$useState2 = _slicedToArray(_React$useState, 2),\n        trigger = _React$useState2[0],\n        setTrigger = _React$useState2[1];\n\n  React.useEffect(() => {\n    const handleScroll = () => {\n      setTrigger(getTrigger(store, _extends({\n        target\n      }, other)));\n    };\n\n    handleScroll(); // Re-evaluate trigger when dependencies change\n\n    target.addEventListener('scroll', handleScroll);\n    return () => {\n      target.removeEventListener('scroll', handleScroll);\n    }; // See Option 3. https://github.com/facebook/react/issues/14476#issuecomment-471199055\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [target, getTrigger, JSON.stringify(other)]);\n  return trigger;\n}","map":null,"metadata":{},"sourceType":"module"}