{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar decode_codepoint_1 = __importDefault(require(\"entities/lib/decode_codepoint\"));\n\nvar entities_json_1 = __importDefault(require(\"entities/lib/maps/entities.json\"));\n\nvar legacy_json_1 = __importDefault(require(\"entities/lib/maps/legacy.json\"));\n\nvar xml_json_1 = __importDefault(require(\"entities/lib/maps/xml.json\"));\n\nfunction whitespace(c) {\n  return c === \" \" || c === \"\\n\" || c === \"\\t\" || c === \"\\f\" || c === \"\\r\";\n}\n\nfunction isASCIIAlpha(c) {\n  return c >= \"a\" && c <= \"z\" || c >= \"A\" && c <= \"Z\";\n}\n\nfunction ifElseState(upper, SUCCESS, FAILURE) {\n  var lower = upper.toLowerCase();\n\n  if (upper === lower) {\n    return function (t, c) {\n      if (c === lower) {\n        t._state = SUCCESS;\n      } else {\n        t._state = FAILURE;\n        t._index--;\n      }\n    };\n  }\n\n  return function (t, c) {\n    if (c === lower || c === upper) {\n      t._state = SUCCESS;\n    } else {\n      t._state = FAILURE;\n      t._index--;\n    }\n  };\n}\n\nfunction consumeSpecialNameChar(upper, NEXT_STATE) {\n  var lower = upper.toLowerCase();\n  return function (t, c) {\n    if (c === lower || c === upper) {\n      t._state = NEXT_STATE;\n    } else {\n      t._state = 3\n      /* InTagName */\n      ;\n      t._index--; // Consume the token again\n    }\n  };\n}\n\nvar stateBeforeCdata1 = ifElseState(\"C\", 24\n/* BeforeCdata2 */\n, 16\n/* InDeclaration */\n);\nvar stateBeforeCdata2 = ifElseState(\"D\", 25\n/* BeforeCdata3 */\n, 16\n/* InDeclaration */\n);\nvar stateBeforeCdata3 = ifElseState(\"A\", 26\n/* BeforeCdata4 */\n, 16\n/* InDeclaration */\n);\nvar stateBeforeCdata4 = ifElseState(\"T\", 27\n/* BeforeCdata5 */\n, 16\n/* InDeclaration */\n);\nvar stateBeforeCdata5 = ifElseState(\"A\", 28\n/* BeforeCdata6 */\n, 16\n/* InDeclaration */\n);\nvar stateBeforeScript1 = consumeSpecialNameChar(\"R\", 35\n/* BeforeScript2 */\n);\nvar stateBeforeScript2 = consumeSpecialNameChar(\"I\", 36\n/* BeforeScript3 */\n);\nvar stateBeforeScript3 = consumeSpecialNameChar(\"P\", 37\n/* BeforeScript4 */\n);\nvar stateBeforeScript4 = consumeSpecialNameChar(\"T\", 38\n/* BeforeScript5 */\n);\nvar stateAfterScript1 = ifElseState(\"R\", 40\n/* AfterScript2 */\n, 1\n/* Text */\n);\nvar stateAfterScript2 = ifElseState(\"I\", 41\n/* AfterScript3 */\n, 1\n/* Text */\n);\nvar stateAfterScript3 = ifElseState(\"P\", 42\n/* AfterScript4 */\n, 1\n/* Text */\n);\nvar stateAfterScript4 = ifElseState(\"T\", 43\n/* AfterScript5 */\n, 1\n/* Text */\n);\nvar stateBeforeStyle1 = consumeSpecialNameChar(\"Y\", 45\n/* BeforeStyle2 */\n);\nvar stateBeforeStyle2 = consumeSpecialNameChar(\"L\", 46\n/* BeforeStyle3 */\n);\nvar stateBeforeStyle3 = consumeSpecialNameChar(\"E\", 47\n/* BeforeStyle4 */\n);\nvar stateAfterStyle1 = ifElseState(\"Y\", 49\n/* AfterStyle2 */\n, 1\n/* Text */\n);\nvar stateAfterStyle2 = ifElseState(\"L\", 50\n/* AfterStyle3 */\n, 1\n/* Text */\n);\nvar stateAfterStyle3 = ifElseState(\"E\", 51\n/* AfterStyle4 */\n, 1\n/* Text */\n);\nvar stateBeforeSpecialT = consumeSpecialNameChar(\"I\", 54\n/* BeforeTitle1 */\n);\nvar stateBeforeTitle1 = consumeSpecialNameChar(\"T\", 55\n/* BeforeTitle2 */\n);\nvar stateBeforeTitle2 = consumeSpecialNameChar(\"L\", 56\n/* BeforeTitle3 */\n);\nvar stateBeforeTitle3 = consumeSpecialNameChar(\"E\", 57\n/* BeforeTitle4 */\n);\nvar stateAfterSpecialTEnd = ifElseState(\"I\", 58\n/* AfterTitle1 */\n, 1\n/* Text */\n);\nvar stateAfterTitle1 = ifElseState(\"T\", 59\n/* AfterTitle2 */\n, 1\n/* Text */\n);\nvar stateAfterTitle2 = ifElseState(\"L\", 60\n/* AfterTitle3 */\n, 1\n/* Text */\n);\nvar stateAfterTitle3 = ifElseState(\"E\", 61\n/* AfterTitle4 */\n, 1\n/* Text */\n);\nvar stateBeforeEntity = ifElseState(\"#\", 63\n/* BeforeNumericEntity */\n, 64\n/* InNamedEntity */\n);\nvar stateBeforeNumericEntity = ifElseState(\"X\", 66\n/* InHexEntity */\n, 65\n/* InNumericEntity */\n);\n\nvar Tokenizer =\n/** @class */\nfunction () {\n  function Tokenizer(options, cbs) {\n    var _a;\n    /** The current state the tokenizer is in. */\n\n\n    this._state = 1\n    /* Text */\n    ;\n    /** The read buffer. */\n\n    this.buffer = \"\";\n    /** The beginning of the section that is currently being read. */\n\n    this.sectionStart = 0;\n    /** The index within the buffer that we are currently looking at. */\n\n    this._index = 0;\n    /**\n     * Data that has already been processed will be removed from the buffer occasionally.\n     * `_bufferOffset` keeps track of how many characters have been removed, to make sure position information is accurate.\n     */\n\n    this.bufferOffset = 0;\n    /** Some behavior, eg. when decoding entities, is done while we are in another state. This keeps track of the other state type. */\n\n    this.baseState = 1\n    /* Text */\n    ;\n    /** For special parsing behavior inside of script and style tags. */\n\n    this.special = 1\n    /* None */\n    ;\n    /** Indicates whether the tokenizer has been paused. */\n\n    this.running = true;\n    /** Indicates whether the tokenizer has finished running / `.end` has been called. */\n\n    this.ended = false;\n    this.cbs = cbs;\n    this.xmlMode = !!(options === null || options === void 0 ? void 0 : options.xmlMode);\n    this.decodeEntities = (_a = options === null || options === void 0 ? void 0 : options.decodeEntities) !== null && _a !== void 0 ? _a : true;\n  }\n\n  Tokenizer.prototype.reset = function () {\n    this._state = 1\n    /* Text */\n    ;\n    this.buffer = \"\";\n    this.sectionStart = 0;\n    this._index = 0;\n    this.bufferOffset = 0;\n    this.baseState = 1\n    /* Text */\n    ;\n    this.special = 1\n    /* None */\n    ;\n    this.running = true;\n    this.ended = false;\n  };\n\n  Tokenizer.prototype.write = function (chunk) {\n    if (this.ended) this.cbs.onerror(Error(\".write() after done!\"));\n    this.buffer += chunk;\n    this.parse();\n  };\n\n  Tokenizer.prototype.end = function (chunk) {\n    if (this.ended) this.cbs.onerror(Error(\".end() after done!\"));\n    if (chunk) this.write(chunk);\n    this.ended = true;\n    if (this.running) this.finish();\n  };\n\n  Tokenizer.prototype.pause = function () {\n    this.running = false;\n  };\n\n  Tokenizer.prototype.resume = function () {\n    this.running = true;\n\n    if (this._index < this.buffer.length) {\n      this.parse();\n    }\n\n    if (this.ended) {\n      this.finish();\n    }\n  };\n  /**\n   * The current index within all of the written data.\n   */\n\n\n  Tokenizer.prototype.getAbsoluteIndex = function () {\n    return this.bufferOffset + this._index;\n  };\n\n  Tokenizer.prototype.stateText = function (c) {\n    if (c === \"<\") {\n      if (this._index > this.sectionStart) {\n        this.cbs.ontext(this.getSection());\n      }\n\n      this._state = 2\n      /* BeforeTagName */\n      ;\n      this.sectionStart = this._index;\n    } else if (this.decodeEntities && c === \"&\" && (this.special === 1\n    /* None */\n    || this.special === 4\n    /* Title */\n    )) {\n      if (this._index > this.sectionStart) {\n        this.cbs.ontext(this.getSection());\n      }\n\n      this.baseState = 1\n      /* Text */\n      ;\n      this._state = 62\n      /* BeforeEntity */\n      ;\n      this.sectionStart = this._index;\n    }\n  };\n  /**\n   * HTML only allows ASCII alpha characters (a-z and A-Z) at the beginning of a tag name.\n   *\n   * XML allows a lot more characters here (@see https://www.w3.org/TR/REC-xml/#NT-NameStartChar).\n   * We allow anything that wouldn't end the tag.\n   */\n\n\n  Tokenizer.prototype.isTagStartChar = function (c) {\n    return isASCIIAlpha(c) || this.xmlMode && !whitespace(c) && c !== \"/\" && c !== \">\";\n  };\n\n  Tokenizer.prototype.stateBeforeTagName = function (c) {\n    if (c === \"/\") {\n      this._state = 5\n      /* BeforeClosingTagName */\n      ;\n    } else if (c === \"<\") {\n      this.cbs.ontext(this.getSection());\n      this.sectionStart = this._index;\n    } else if (c === \">\" || this.special !== 1\n    /* None */\n    || whitespace(c)) {\n      this._state = 1\n      /* Text */\n      ;\n    } else if (c === \"!\") {\n      this._state = 15\n      /* BeforeDeclaration */\n      ;\n      this.sectionStart = this._index + 1;\n    } else if (c === \"?\") {\n      this._state = 17\n      /* InProcessingInstruction */\n      ;\n      this.sectionStart = this._index + 1;\n    } else if (!this.isTagStartChar(c)) {\n      this._state = 1\n      /* Text */\n      ;\n    } else {\n      this._state = !this.xmlMode && (c === \"s\" || c === \"S\") ? 32\n      /* BeforeSpecialS */\n      : !this.xmlMode && (c === \"t\" || c === \"T\") ? 52\n      /* BeforeSpecialT */\n      : 3\n      /* InTagName */\n      ;\n      this.sectionStart = this._index;\n    }\n  };\n\n  Tokenizer.prototype.stateInTagName = function (c) {\n    if (c === \"/\" || c === \">\" || whitespace(c)) {\n      this.emitToken(\"onopentagname\");\n      this._state = 8\n      /* BeforeAttributeName */\n      ;\n      this._index--;\n    }\n  };\n\n  Tokenizer.prototype.stateBeforeClosingTagName = function (c) {\n    if (whitespace(c)) {// Ignore\n    } else if (c === \">\") {\n      this._state = 1\n      /* Text */\n      ;\n    } else if (this.special !== 1\n    /* None */\n    ) {\n        if (this.special !== 4\n        /* Title */\n        && (c === \"s\" || c === \"S\")) {\n          this._state = 33\n          /* BeforeSpecialSEnd */\n          ;\n        } else if (this.special === 4\n        /* Title */\n        && (c === \"t\" || c === \"T\")) {\n          this._state = 53\n          /* BeforeSpecialTEnd */\n          ;\n        } else {\n          this._state = 1\n          /* Text */\n          ;\n          this._index--;\n        }\n      } else if (!this.isTagStartChar(c)) {\n      this._state = 20\n      /* InSpecialComment */\n      ;\n      this.sectionStart = this._index;\n    } else {\n      this._state = 6\n      /* InClosingTagName */\n      ;\n      this.sectionStart = this._index;\n    }\n  };\n\n  Tokenizer.prototype.stateInClosingTagName = function (c) {\n    if (c === \">\" || whitespace(c)) {\n      this.emitToken(\"onclosetag\");\n      this._state = 7\n      /* AfterClosingTagName */\n      ;\n      this._index--;\n    }\n  };\n\n  Tokenizer.prototype.stateAfterClosingTagName = function (c) {\n    // Skip everything until \">\"\n    if (c === \">\") {\n      this._state = 1\n      /* Text */\n      ;\n      this.sectionStart = this._index + 1;\n    }\n  };\n\n  Tokenizer.prototype.stateBeforeAttributeName = function (c) {\n    if (c === \">\") {\n      this.cbs.onopentagend();\n      this._state = 1\n      /* Text */\n      ;\n      this.sectionStart = this._index + 1;\n    } else if (c === \"/\") {\n      this._state = 4\n      /* InSelfClosingTag */\n      ;\n    } else if (!whitespace(c)) {\n      this._state = 9\n      /* InAttributeName */\n      ;\n      this.sectionStart = this._index;\n    }\n  };\n\n  Tokenizer.prototype.stateInSelfClosingTag = function (c) {\n    if (c === \">\") {\n      this.cbs.onselfclosingtag();\n      this._state = 1\n      /* Text */\n      ;\n      this.sectionStart = this._index + 1;\n      this.special = 1\n      /* None */\n      ; // Reset special state, in case of self-closing special tags\n    } else if (!whitespace(c)) {\n      this._state = 8\n      /* BeforeAttributeName */\n      ;\n      this._index--;\n    }\n  };\n\n  Tokenizer.prototype.stateInAttributeName = function (c) {\n    if (c === \"=\" || c === \"/\" || c === \">\" || whitespace(c)) {\n      this.cbs.onattribname(this.getSection());\n      this.sectionStart = -1;\n      this._state = 10\n      /* AfterAttributeName */\n      ;\n      this._index--;\n    }\n  };\n\n  Tokenizer.prototype.stateAfterAttributeName = function (c) {\n    if (c === \"=\") {\n      this._state = 11\n      /* BeforeAttributeValue */\n      ;\n    } else if (c === \"/\" || c === \">\") {\n      this.cbs.onattribend(undefined);\n      this._state = 8\n      /* BeforeAttributeName */\n      ;\n      this._index--;\n    } else if (!whitespace(c)) {\n      this.cbs.onattribend(undefined);\n      this._state = 9\n      /* InAttributeName */\n      ;\n      this.sectionStart = this._index;\n    }\n  };\n\n  Tokenizer.prototype.stateBeforeAttributeValue = function (c) {\n    if (c === '\"') {\n      this._state = 12\n      /* InAttributeValueDq */\n      ;\n      this.sectionStart = this._index + 1;\n    } else if (c === \"'\") {\n      this._state = 13\n      /* InAttributeValueSq */\n      ;\n      this.sectionStart = this._index + 1;\n    } else if (!whitespace(c)) {\n      this._state = 14\n      /* InAttributeValueNq */\n      ;\n      this.sectionStart = this._index;\n      this._index--; // Reconsume token\n    }\n  };\n\n  Tokenizer.prototype.handleInAttributeValue = function (c, quote) {\n    if (c === quote) {\n      this.emitToken(\"onattribdata\");\n      this.cbs.onattribend(quote);\n      this._state = 8\n      /* BeforeAttributeName */\n      ;\n    } else if (this.decodeEntities && c === \"&\") {\n      this.emitToken(\"onattribdata\");\n      this.baseState = this._state;\n      this._state = 62\n      /* BeforeEntity */\n      ;\n      this.sectionStart = this._index;\n    }\n  };\n\n  Tokenizer.prototype.stateInAttributeValueDoubleQuotes = function (c) {\n    this.handleInAttributeValue(c, '\"');\n  };\n\n  Tokenizer.prototype.stateInAttributeValueSingleQuotes = function (c) {\n    this.handleInAttributeValue(c, \"'\");\n  };\n\n  Tokenizer.prototype.stateInAttributeValueNoQuotes = function (c) {\n    if (whitespace(c) || c === \">\") {\n      this.emitToken(\"onattribdata\");\n      this.cbs.onattribend(null);\n      this._state = 8\n      /* BeforeAttributeName */\n      ;\n      this._index--;\n    } else if (this.decodeEntities && c === \"&\") {\n      this.emitToken(\"onattribdata\");\n      this.baseState = this._state;\n      this._state = 62\n      /* BeforeEntity */\n      ;\n      this.sectionStart = this._index;\n    }\n  };\n\n  Tokenizer.prototype.stateBeforeDeclaration = function (c) {\n    this._state = c === \"[\" ? 23\n    /* BeforeCdata1 */\n    : c === \"-\" ? 18\n    /* BeforeComment */\n    : 16\n    /* InDeclaration */\n    ;\n  };\n\n  Tokenizer.prototype.stateInDeclaration = function (c) {\n    if (c === \">\") {\n      this.cbs.ondeclaration(this.getSection());\n      this._state = 1\n      /* Text */\n      ;\n      this.sectionStart = this._index + 1;\n    }\n  };\n\n  Tokenizer.prototype.stateInProcessingInstruction = function (c) {\n    if (c === \">\") {\n      this.cbs.onprocessinginstruction(this.getSection());\n      this._state = 1\n      /* Text */\n      ;\n      this.sectionStart = this._index + 1;\n    }\n  };\n\n  Tokenizer.prototype.stateBeforeComment = function (c) {\n    if (c === \"-\") {\n      this._state = 19\n      /* InComment */\n      ;\n      this.sectionStart = this._index + 1;\n    } else {\n      this._state = 16\n      /* InDeclaration */\n      ;\n    }\n  };\n\n  Tokenizer.prototype.stateInComment = function (c) {\n    if (c === \"-\") this._state = 21\n    /* AfterComment1 */\n    ;\n  };\n\n  Tokenizer.prototype.stateInSpecialComment = function (c) {\n    if (c === \">\") {\n      this.cbs.oncomment(this.buffer.substring(this.sectionStart, this._index));\n      this._state = 1\n      /* Text */\n      ;\n      this.sectionStart = this._index + 1;\n    }\n  };\n\n  Tokenizer.prototype.stateAfterComment1 = function (c) {\n    if (c === \"-\") {\n      this._state = 22\n      /* AfterComment2 */\n      ;\n    } else {\n      this._state = 19\n      /* InComment */\n      ;\n    }\n  };\n\n  Tokenizer.prototype.stateAfterComment2 = function (c) {\n    if (c === \">\") {\n      // Remove 2 trailing chars\n      this.cbs.oncomment(this.buffer.substring(this.sectionStart, this._index - 2));\n      this._state = 1\n      /* Text */\n      ;\n      this.sectionStart = this._index + 1;\n    } else if (c !== \"-\") {\n      this._state = 19\n      /* InComment */\n      ;\n    } // Else: stay in AFTER_COMMENT_2 (`--->`)\n\n  };\n\n  Tokenizer.prototype.stateBeforeCdata6 = function (c) {\n    if (c === \"[\") {\n      this._state = 29\n      /* InCdata */\n      ;\n      this.sectionStart = this._index + 1;\n    } else {\n      this._state = 16\n      /* InDeclaration */\n      ;\n      this._index--;\n    }\n  };\n\n  Tokenizer.prototype.stateInCdata = function (c) {\n    if (c === \"]\") this._state = 30\n    /* AfterCdata1 */\n    ;\n  };\n\n  Tokenizer.prototype.stateAfterCdata1 = function (c) {\n    if (c === \"]\") this._state = 31\n    /* AfterCdata2 */\n    ;else this._state = 29\n    /* InCdata */\n    ;\n  };\n\n  Tokenizer.prototype.stateAfterCdata2 = function (c) {\n    if (c === \">\") {\n      // Remove 2 trailing chars\n      this.cbs.oncdata(this.buffer.substring(this.sectionStart, this._index - 2));\n      this._state = 1\n      /* Text */\n      ;\n      this.sectionStart = this._index + 1;\n    } else if (c !== \"]\") {\n      this._state = 29\n      /* InCdata */\n      ;\n    } // Else: stay in AFTER_CDATA_2 (`]]]>`)\n\n  };\n\n  Tokenizer.prototype.stateBeforeSpecialS = function (c) {\n    if (c === \"c\" || c === \"C\") {\n      this._state = 34\n      /* BeforeScript1 */\n      ;\n    } else if (c === \"t\" || c === \"T\") {\n      this._state = 44\n      /* BeforeStyle1 */\n      ;\n    } else {\n      this._state = 3\n      /* InTagName */\n      ;\n      this._index--; // Consume the token again\n    }\n  };\n\n  Tokenizer.prototype.stateBeforeSpecialSEnd = function (c) {\n    if (this.special === 2\n    /* Script */\n    && (c === \"c\" || c === \"C\")) {\n      this._state = 39\n      /* AfterScript1 */\n      ;\n    } else if (this.special === 3\n    /* Style */\n    && (c === \"t\" || c === \"T\")) {\n      this._state = 48\n      /* AfterStyle1 */\n      ;\n    } else this._state = 1\n    /* Text */\n    ;\n  };\n\n  Tokenizer.prototype.stateBeforeSpecialLast = function (c, special) {\n    if (c === \"/\" || c === \">\" || whitespace(c)) {\n      this.special = special;\n    }\n\n    this._state = 3\n    /* InTagName */\n    ;\n    this._index--; // Consume the token again\n  };\n\n  Tokenizer.prototype.stateAfterSpecialLast = function (c, sectionStartOffset) {\n    if (c === \">\" || whitespace(c)) {\n      this.special = 1\n      /* None */\n      ;\n      this._state = 6\n      /* InClosingTagName */\n      ;\n      this.sectionStart = this._index - sectionStartOffset;\n      this._index--; // Reconsume the token\n    } else this._state = 1\n    /* Text */\n    ;\n  }; // For entities terminated with a semicolon\n\n\n  Tokenizer.prototype.parseFixedEntity = function (map) {\n    if (map === void 0) {\n      map = this.xmlMode ? xml_json_1.default : entities_json_1.default;\n    } // Offset = 1\n\n\n    if (this.sectionStart + 1 < this._index) {\n      var entity = this.buffer.substring(this.sectionStart + 1, this._index);\n\n      if (Object.prototype.hasOwnProperty.call(map, entity)) {\n        this.emitPartial(map[entity]);\n        this.sectionStart = this._index + 1;\n      }\n    }\n  }; // Parses legacy entities (without trailing semicolon)\n\n\n  Tokenizer.prototype.parseLegacyEntity = function () {\n    var start = this.sectionStart + 1; // The max length of legacy entities is 6\n\n    var limit = Math.min(this._index - start, 6);\n\n    while (limit >= 2) {\n      // The min length of legacy entities is 2\n      var entity = this.buffer.substr(start, limit);\n\n      if (Object.prototype.hasOwnProperty.call(legacy_json_1.default, entity)) {\n        this.emitPartial(legacy_json_1.default[entity]);\n        this.sectionStart += limit + 1;\n        return;\n      }\n\n      limit--;\n    }\n  };\n\n  Tokenizer.prototype.stateInNamedEntity = function (c) {\n    if (c === \";\") {\n      this.parseFixedEntity(); // Retry as legacy entity if entity wasn't parsed\n\n      if (this.baseState === 1\n      /* Text */\n      && this.sectionStart + 1 < this._index && !this.xmlMode) {\n        this.parseLegacyEntity();\n      }\n\n      this._state = this.baseState;\n    } else if ((c < \"0\" || c > \"9\") && !isASCIIAlpha(c)) {\n      if (this.xmlMode || this.sectionStart + 1 === this._index) {// Ignore\n      } else if (this.baseState !== 1\n      /* Text */\n      ) {\n          if (c !== \"=\") {\n            // Parse as legacy entity, without allowing additional characters.\n            this.parseFixedEntity(legacy_json_1.default);\n          }\n        } else {\n        this.parseLegacyEntity();\n      }\n\n      this._state = this.baseState;\n      this._index--;\n    }\n  };\n\n  Tokenizer.prototype.decodeNumericEntity = function (offset, base, strict) {\n    var sectionStart = this.sectionStart + offset;\n\n    if (sectionStart !== this._index) {\n      // Parse entity\n      var entity = this.buffer.substring(sectionStart, this._index);\n      var parsed = parseInt(entity, base);\n      this.emitPartial(decode_codepoint_1.default(parsed));\n      this.sectionStart = strict ? this._index + 1 : this._index;\n    }\n\n    this._state = this.baseState;\n  };\n\n  Tokenizer.prototype.stateInNumericEntity = function (c) {\n    if (c === \";\") {\n      this.decodeNumericEntity(2, 10, true);\n    } else if (c < \"0\" || c > \"9\") {\n      if (!this.xmlMode) {\n        this.decodeNumericEntity(2, 10, false);\n      } else {\n        this._state = this.baseState;\n      }\n\n      this._index--;\n    }\n  };\n\n  Tokenizer.prototype.stateInHexEntity = function (c) {\n    if (c === \";\") {\n      this.decodeNumericEntity(3, 16, true);\n    } else if ((c < \"a\" || c > \"f\") && (c < \"A\" || c > \"F\") && (c < \"0\" || c > \"9\")) {\n      if (!this.xmlMode) {\n        this.decodeNumericEntity(3, 16, false);\n      } else {\n        this._state = this.baseState;\n      }\n\n      this._index--;\n    }\n  };\n\n  Tokenizer.prototype.cleanup = function () {\n    if (this.sectionStart < 0) {\n      this.buffer = \"\";\n      this.bufferOffset += this._index;\n      this._index = 0;\n    } else if (this.running) {\n      if (this._state === 1\n      /* Text */\n      ) {\n          if (this.sectionStart !== this._index) {\n            this.cbs.ontext(this.buffer.substr(this.sectionStart));\n          }\n\n          this.buffer = \"\";\n          this.bufferOffset += this._index;\n          this._index = 0;\n        } else if (this.sectionStart === this._index) {\n        // The section just started\n        this.buffer = \"\";\n        this.bufferOffset += this._index;\n        this._index = 0;\n      } else {\n        // Remove everything unnecessary\n        this.buffer = this.buffer.substr(this.sectionStart);\n        this._index -= this.sectionStart;\n        this.bufferOffset += this.sectionStart;\n      }\n\n      this.sectionStart = 0;\n    }\n  };\n  /**\n   * Iterates through the buffer, calling the function corresponding to the current state.\n   *\n   * States that are more likely to be hit are higher up, as a performance improvement.\n   */\n\n\n  Tokenizer.prototype.parse = function () {\n    while (this._index < this.buffer.length && this.running) {\n      var c = this.buffer.charAt(this._index);\n\n      if (this._state === 1\n      /* Text */\n      ) {\n          this.stateText(c);\n        } else if (this._state === 12\n      /* InAttributeValueDq */\n      ) {\n          this.stateInAttributeValueDoubleQuotes(c);\n        } else if (this._state === 9\n      /* InAttributeName */\n      ) {\n          this.stateInAttributeName(c);\n        } else if (this._state === 19\n      /* InComment */\n      ) {\n          this.stateInComment(c);\n        } else if (this._state === 20\n      /* InSpecialComment */\n      ) {\n          this.stateInSpecialComment(c);\n        } else if (this._state === 8\n      /* BeforeAttributeName */\n      ) {\n          this.stateBeforeAttributeName(c);\n        } else if (this._state === 3\n      /* InTagName */\n      ) {\n          this.stateInTagName(c);\n        } else if (this._state === 6\n      /* InClosingTagName */\n      ) {\n          this.stateInClosingTagName(c);\n        } else if (this._state === 2\n      /* BeforeTagName */\n      ) {\n          this.stateBeforeTagName(c);\n        } else if (this._state === 10\n      /* AfterAttributeName */\n      ) {\n          this.stateAfterAttributeName(c);\n        } else if (this._state === 13\n      /* InAttributeValueSq */\n      ) {\n          this.stateInAttributeValueSingleQuotes(c);\n        } else if (this._state === 11\n      /* BeforeAttributeValue */\n      ) {\n          this.stateBeforeAttributeValue(c);\n        } else if (this._state === 5\n      /* BeforeClosingTagName */\n      ) {\n          this.stateBeforeClosingTagName(c);\n        } else if (this._state === 7\n      /* AfterClosingTagName */\n      ) {\n          this.stateAfterClosingTagName(c);\n        } else if (this._state === 32\n      /* BeforeSpecialS */\n      ) {\n          this.stateBeforeSpecialS(c);\n        } else if (this._state === 21\n      /* AfterComment1 */\n      ) {\n          this.stateAfterComment1(c);\n        } else if (this._state === 14\n      /* InAttributeValueNq */\n      ) {\n          this.stateInAttributeValueNoQuotes(c);\n        } else if (this._state === 4\n      /* InSelfClosingTag */\n      ) {\n          this.stateInSelfClosingTag(c);\n        } else if (this._state === 16\n      /* InDeclaration */\n      ) {\n          this.stateInDeclaration(c);\n        } else if (this._state === 15\n      /* BeforeDeclaration */\n      ) {\n          this.stateBeforeDeclaration(c);\n        } else if (this._state === 22\n      /* AfterComment2 */\n      ) {\n          this.stateAfterComment2(c);\n        } else if (this._state === 18\n      /* BeforeComment */\n      ) {\n          this.stateBeforeComment(c);\n        } else if (this._state === 33\n      /* BeforeSpecialSEnd */\n      ) {\n          this.stateBeforeSpecialSEnd(c);\n        } else if (this._state === 53\n      /* BeforeSpecialTEnd */\n      ) {\n          stateAfterSpecialTEnd(this, c);\n        } else if (this._state === 39\n      /* AfterScript1 */\n      ) {\n          stateAfterScript1(this, c);\n        } else if (this._state === 40\n      /* AfterScript2 */\n      ) {\n          stateAfterScript2(this, c);\n        } else if (this._state === 41\n      /* AfterScript3 */\n      ) {\n          stateAfterScript3(this, c);\n        } else if (this._state === 34\n      /* BeforeScript1 */\n      ) {\n          stateBeforeScript1(this, c);\n        } else if (this._state === 35\n      /* BeforeScript2 */\n      ) {\n          stateBeforeScript2(this, c);\n        } else if (this._state === 36\n      /* BeforeScript3 */\n      ) {\n          stateBeforeScript3(this, c);\n        } else if (this._state === 37\n      /* BeforeScript4 */\n      ) {\n          stateBeforeScript4(this, c);\n        } else if (this._state === 38\n      /* BeforeScript5 */\n      ) {\n          this.stateBeforeSpecialLast(c, 2\n          /* Script */\n          );\n        } else if (this._state === 42\n      /* AfterScript4 */\n      ) {\n          stateAfterScript4(this, c);\n        } else if (this._state === 43\n      /* AfterScript5 */\n      ) {\n          this.stateAfterSpecialLast(c, 6);\n        } else if (this._state === 44\n      /* BeforeStyle1 */\n      ) {\n          stateBeforeStyle1(this, c);\n        } else if (this._state === 29\n      /* InCdata */\n      ) {\n          this.stateInCdata(c);\n        } else if (this._state === 45\n      /* BeforeStyle2 */\n      ) {\n          stateBeforeStyle2(this, c);\n        } else if (this._state === 46\n      /* BeforeStyle3 */\n      ) {\n          stateBeforeStyle3(this, c);\n        } else if (this._state === 47\n      /* BeforeStyle4 */\n      ) {\n          this.stateBeforeSpecialLast(c, 3\n          /* Style */\n          );\n        } else if (this._state === 48\n      /* AfterStyle1 */\n      ) {\n          stateAfterStyle1(this, c);\n        } else if (this._state === 49\n      /* AfterStyle2 */\n      ) {\n          stateAfterStyle2(this, c);\n        } else if (this._state === 50\n      /* AfterStyle3 */\n      ) {\n          stateAfterStyle3(this, c);\n        } else if (this._state === 51\n      /* AfterStyle4 */\n      ) {\n          this.stateAfterSpecialLast(c, 5);\n        } else if (this._state === 52\n      /* BeforeSpecialT */\n      ) {\n          stateBeforeSpecialT(this, c);\n        } else if (this._state === 54\n      /* BeforeTitle1 */\n      ) {\n          stateBeforeTitle1(this, c);\n        } else if (this._state === 55\n      /* BeforeTitle2 */\n      ) {\n          stateBeforeTitle2(this, c);\n        } else if (this._state === 56\n      /* BeforeTitle3 */\n      ) {\n          stateBeforeTitle3(this, c);\n        } else if (this._state === 57\n      /* BeforeTitle4 */\n      ) {\n          this.stateBeforeSpecialLast(c, 4\n          /* Title */\n          );\n        } else if (this._state === 58\n      /* AfterTitle1 */\n      ) {\n          stateAfterTitle1(this, c);\n        } else if (this._state === 59\n      /* AfterTitle2 */\n      ) {\n          stateAfterTitle2(this, c);\n        } else if (this._state === 60\n      /* AfterTitle3 */\n      ) {\n          stateAfterTitle3(this, c);\n        } else if (this._state === 61\n      /* AfterTitle4 */\n      ) {\n          this.stateAfterSpecialLast(c, 5);\n        } else if (this._state === 17\n      /* InProcessingInstruction */\n      ) {\n          this.stateInProcessingInstruction(c);\n        } else if (this._state === 64\n      /* InNamedEntity */\n      ) {\n          this.stateInNamedEntity(c);\n        } else if (this._state === 23\n      /* BeforeCdata1 */\n      ) {\n          stateBeforeCdata1(this, c);\n        } else if (this._state === 62\n      /* BeforeEntity */\n      ) {\n          stateBeforeEntity(this, c);\n        } else if (this._state === 24\n      /* BeforeCdata2 */\n      ) {\n          stateBeforeCdata2(this, c);\n        } else if (this._state === 25\n      /* BeforeCdata3 */\n      ) {\n          stateBeforeCdata3(this, c);\n        } else if (this._state === 30\n      /* AfterCdata1 */\n      ) {\n          this.stateAfterCdata1(c);\n        } else if (this._state === 31\n      /* AfterCdata2 */\n      ) {\n          this.stateAfterCdata2(c);\n        } else if (this._state === 26\n      /* BeforeCdata4 */\n      ) {\n          stateBeforeCdata4(this, c);\n        } else if (this._state === 27\n      /* BeforeCdata5 */\n      ) {\n          stateBeforeCdata5(this, c);\n        } else if (this._state === 28\n      /* BeforeCdata6 */\n      ) {\n          this.stateBeforeCdata6(c);\n        } else if (this._state === 66\n      /* InHexEntity */\n      ) {\n          this.stateInHexEntity(c);\n        } else if (this._state === 65\n      /* InNumericEntity */\n      ) {\n          this.stateInNumericEntity(c); // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n        } else if (this._state === 63\n      /* BeforeNumericEntity */\n      ) {\n          stateBeforeNumericEntity(this, c);\n        } else {\n        this.cbs.onerror(Error(\"unknown _state\"), this._state);\n      }\n\n      this._index++;\n    }\n\n    this.cleanup();\n  };\n\n  Tokenizer.prototype.finish = function () {\n    // If there is remaining data, emit it in a reasonable way\n    if (this.sectionStart < this._index) {\n      this.handleTrailingData();\n    }\n\n    this.cbs.onend();\n  };\n\n  Tokenizer.prototype.handleTrailingData = function () {\n    var data = this.buffer.substr(this.sectionStart);\n\n    if (this._state === 29\n    /* InCdata */\n    || this._state === 30\n    /* AfterCdata1 */\n    || this._state === 31\n    /* AfterCdata2 */\n    ) {\n        this.cbs.oncdata(data);\n      } else if (this._state === 19\n    /* InComment */\n    || this._state === 21\n    /* AfterComment1 */\n    || this._state === 22\n    /* AfterComment2 */\n    ) {\n        this.cbs.oncomment(data);\n      } else if (this._state === 64\n    /* InNamedEntity */\n    && !this.xmlMode) {\n      this.parseLegacyEntity();\n\n      if (this.sectionStart < this._index) {\n        this._state = this.baseState;\n        this.handleTrailingData();\n      }\n    } else if (this._state === 65\n    /* InNumericEntity */\n    && !this.xmlMode) {\n      this.decodeNumericEntity(2, 10, false);\n\n      if (this.sectionStart < this._index) {\n        this._state = this.baseState;\n        this.handleTrailingData();\n      }\n    } else if (this._state === 66\n    /* InHexEntity */\n    && !this.xmlMode) {\n      this.decodeNumericEntity(3, 16, false);\n\n      if (this.sectionStart < this._index) {\n        this._state = this.baseState;\n        this.handleTrailingData();\n      }\n    } else if (this._state !== 3\n    /* InTagName */\n    && this._state !== 8\n    /* BeforeAttributeName */\n    && this._state !== 11\n    /* BeforeAttributeValue */\n    && this._state !== 10\n    /* AfterAttributeName */\n    && this._state !== 9\n    /* InAttributeName */\n    && this._state !== 13\n    /* InAttributeValueSq */\n    && this._state !== 12\n    /* InAttributeValueDq */\n    && this._state !== 14\n    /* InAttributeValueNq */\n    && this._state !== 6\n    /* InClosingTagName */\n    ) {\n        this.cbs.ontext(data);\n      }\n    /*\n     * Else, ignore remaining data\n     * TODO add a way to remove current tag\n     */\n\n  };\n\n  Tokenizer.prototype.getSection = function () {\n    return this.buffer.substring(this.sectionStart, this._index);\n  };\n\n  Tokenizer.prototype.emitToken = function (name) {\n    this.cbs[name](this.getSection());\n    this.sectionStart = -1;\n  };\n\n  Tokenizer.prototype.emitPartial = function (value) {\n    if (this.baseState !== 1\n    /* Text */\n    ) {\n        this.cbs.onattribdata(value); // TODO implement the new event\n      } else {\n      this.cbs.ontext(value);\n    }\n  };\n\n  return Tokenizer;\n}();\n\nexports.default = Tokenizer;","map":null,"metadata":{},"sourceType":"script"}