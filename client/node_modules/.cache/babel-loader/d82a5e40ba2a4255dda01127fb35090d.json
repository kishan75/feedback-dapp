{"ast":null,"code":"import _slicedToArray from \"F:\\\\BlockChain\\\\Projects\\\\feedback-dapp\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport IconButton from '@mui/material/IconButton';\nimport MenuList from '@mui/material/MenuList';\nimport { unstable_useId as useId } from '@mui/material/utils';\nimport { gridClasses } from '../../constants/gridClasses';\nimport { GridMenu } from '../menu/GridMenu';\nimport { useGridRootProps } from '../../hooks/utils/useGridRootProps';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nconst hasActions = colDef => typeof colDef.getActions === 'function';\n\nconst GridActionsCell = props => {\n  const _React$useState = React.useState(false),\n        _React$useState2 = _slicedToArray(_React$useState, 2),\n        open = _React$useState2[0],\n        setOpen = _React$useState2[1];\n\n  const buttonRef = React.useRef(null);\n  const touchRippleRefs = React.useRef({});\n  const menuId = useId();\n  const buttonId = useId();\n  const rootProps = useGridRootProps();\n  const colDef = props.colDef,\n        id = props.id,\n        api = props.api,\n        hasFocus = props.hasFocus,\n        _props$position = props.position,\n        position = _props$position === void 0 ? 'bottom-end' : _props$position; // TODO apply the rest to the root element\n\n  React.useLayoutEffect(() => {\n    if (!hasFocus) {\n      Object.entries(touchRippleRefs.current).forEach(([index, ref]) => {\n        ref == null ? void 0 : ref.stop({}, () => {\n          delete touchRippleRefs.current[index];\n        });\n      });\n    }\n  }, [hasFocus]);\n\n  if (!hasActions(colDef)) {\n    throw new Error('MUI: Missing the `getActions` property in the `GridColDef`.');\n  }\n\n  const showMenu = () => setOpen(true);\n\n  const hideMenu = () => setOpen(false);\n\n  const options = colDef.getActions(api.getRowParams(id));\n  const iconButtons = options.filter(option => !option.props.showInMenu);\n  const menuButtons = options.filter(option => option.props.showInMenu);\n\n  const handleTouchRippleRef = index => instance => {\n    touchRippleRefs.current[index] = instance;\n  };\n\n  return (\n    /*#__PURE__*/\n    _jsxs(\"div\", {\n      className: gridClasses.actionsCell,\n      children: [iconButtons.map((button, index) =>\n      /*#__PURE__*/\n      React.cloneElement(button, {\n        key: index,\n        touchRippleRef: handleTouchRippleRef(index)\n      })), menuButtons.length > 0 &&\n      /*#__PURE__*/\n      _jsx(IconButton, {\n        ref: buttonRef,\n        id: buttonId,\n        \"aria-label\": api.getLocaleText('actionsCellMore'),\n        \"aria-controls\": menuId,\n        \"aria-expanded\": open ? 'true' : undefined,\n        \"aria-haspopup\": \"true\",\n        size: \"small\",\n        onClick: showMenu,\n        children:\n        /*#__PURE__*/\n        _jsx(rootProps.components.MoreActionsIcon, {\n          fontSize: \"small\"\n        })\n      }), menuButtons.length > 0 &&\n      /*#__PURE__*/\n      _jsx(GridMenu, {\n        id: menuId,\n        onClickAway: hideMenu,\n        onClick: hideMenu,\n        open: open,\n        target: buttonRef.current,\n        position: position,\n        \"aria-labelledby\": buttonId,\n        children:\n        /*#__PURE__*/\n        _jsx(MenuList, {\n          className: gridClasses.menuList,\n          children: menuButtons.map((button, index) =>\n          /*#__PURE__*/\n          React.cloneElement(button, {\n            key: index\n          }))\n        })\n      })]\n    })\n  );\n};\n\nprocess.env.NODE_ENV !== \"production\" ? GridActionsCell.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // | To update them edit the TypeScript types and run \"yarn proptypes\"  |\n  // ----------------------------------------------------------------------\n\n  /**\n   * GridApi that let you manipulate the grid.\n   * @deprecated Use the `apiRef` returned by `useGridApiContext` or `useGridApiRef` (only available in `@mui/x-data-grid-pro`)\n   */\n  api: PropTypes.any.isRequired,\n\n  /**\n   * The column of the row that the current cell belongs to.\n   */\n  colDef: PropTypes.object.isRequired,\n\n  /**\n   * If true, the cell is the active element.\n   */\n  hasFocus: PropTypes.bool.isRequired,\n\n  /**\n   * The grid row id.\n   */\n  id: PropTypes.oneOfType([PropTypes.number, PropTypes.string]).isRequired,\n  position: PropTypes.oneOf(['bottom-end', 'bottom-start', 'bottom', 'left-end', 'left-start', 'left', 'right-end', 'right-start', 'right', 'top-end', 'top-start', 'top'])\n} : void 0;\nexport { GridActionsCell };\nexport const renderActionsCell = params =>\n/*#__PURE__*/\n_jsx(GridActionsCell, _extends({}, params));","map":null,"metadata":{},"sourceType":"module"}