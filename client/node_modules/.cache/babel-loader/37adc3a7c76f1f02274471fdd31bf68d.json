{"ast":null,"code":"import { Stream } from '../../stream/Stream.js';\nimport { NextArbitrary } from '../../check/arbitrary/definition/NextArbitrary.js';\nimport { NextValue } from '../../check/arbitrary/definition/NextValue.js';\nimport { cloneMethod, hasCloneMethod } from '../../check/symbols.js';\nexport class ConstantArbitrary extends NextArbitrary {\n  constructor(values) {\n    super();\n    this.values = values;\n  }\n\n  generate(mrng, _biasFactor) {\n    const idx = this.values.length === 1 ? 0 : mrng.nextInt(0, this.values.length - 1);\n    const value = this.values[idx];\n\n    if (!hasCloneMethod(value)) {\n      return new NextValue(value, idx);\n    }\n\n    return new NextValue(value, idx, () => value[cloneMethod]());\n  }\n\n  canShrinkWithoutContext(value) {\n    for (let idx = 0; idx !== this.values.length; ++idx) {\n      if (Object.is(this.values[idx], value)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  shrink(value, context) {\n    if (context === 0 || Object.is(value, this.values[0])) {\n      return Stream.nil();\n    }\n\n    return Stream.of(new NextValue(this.values[0], 0));\n  }\n\n}","map":null,"metadata":{},"sourceType":"module"}