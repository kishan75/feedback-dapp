{"ast":null,"code":"import { buildAlphaNumericPercentArbitrary } from './_internals/builders/CharacterRangeArbitraryBuilder.js';\nimport { constant } from './constant.js';\nimport { domain } from './domain.js';\nimport { ipV4 } from './ipV4.js';\nimport { ipV4Extended } from './ipV4Extended.js';\nimport { ipV6 } from './ipV6.js';\nimport { nat } from './nat.js';\nimport { oneof } from './oneof.js';\nimport { option } from './option.js';\nimport { stringOf } from './stringOf.js';\nimport { tuple } from './tuple.js';\nimport { convertFromNext, convertToNext } from '../check/arbitrary/definition/Converters.js';\n\nfunction hostUserInfo(size) {\n  const others = ['-', '.', '_', '~', '!', '$', '&', \"'\", '(', ')', '*', '+', ',', ';', '=', ':'];\n  return stringOf(buildAlphaNumericPercentArbitrary(others), {\n    size\n  });\n}\n\nfunction userHostPortMapper([u, h, p]) {\n  return (u === null ? '' : \"\".concat(u, \"@\")) + h + (p === null ? '' : \":\".concat(p));\n}\n\nfunction userHostPortUnmapper(value) {\n  if (typeof value !== 'string') {\n    throw new Error('Unsupported');\n  }\n\n  const atPosition = value.indexOf('@');\n  const user = atPosition !== -1 ? value.substring(0, atPosition) : null;\n  const portRegex = /:(\\d+)$/;\n  const m = portRegex.exec(value);\n  const port = m !== null ? Number(m[1]) : null;\n  const host = m !== null ? value.substring(atPosition + 1, value.length - m[1].length - 1) : value.substring(atPosition + 1);\n  return [user, host, port];\n}\n\nfunction bracketedMapper(s) {\n  return \"[\".concat(s, \"]\");\n}\n\nfunction bracketedUnmapper(value) {\n  if (typeof value !== 'string' || value[0] !== '[' || value[value.length - 1] !== ']') {\n    throw new Error('Unsupported');\n  }\n\n  return value.substring(1, value.length - 1);\n}\n\nexport function webAuthority(constraints) {\n  const c = constraints || {};\n  const size = c.size;\n  const hostnameArbs = [domain({\n    size\n  })].concat(c.withIPv4 === true ? [ipV4()] : []).concat(c.withIPv6 === true ? [convertFromNext(convertToNext(ipV6()).map(bracketedMapper, bracketedUnmapper))] : []).concat(c.withIPv4Extended === true ? [ipV4Extended()] : []);\n  return convertFromNext(convertToNext(tuple(c.withUserInfo === true ? option(hostUserInfo(size)) : constant(null), oneof(...hostnameArbs), c.withPort === true ? option(nat(65535)) : constant(null))).map(userHostPortMapper, userHostPortUnmapper));\n}","map":null,"metadata":{},"sourceType":"module"}