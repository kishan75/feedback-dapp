{"ast":null,"code":"import { NextArbitrary } from '../../check/arbitrary/definition/NextArbitrary.js';\nimport { NextValue } from '../../check/arbitrary/definition/NextValue.js';\n\nfunction isSafeContext(context) {\n  return context !== undefined;\n}\n\nfunction toGeneratorNextValue(value) {\n  if (value.hasToBeCloned) {\n    return new NextValue(value.value_, {\n      generatorContext: value.context\n    }, () => value.value);\n  }\n\n  return new NextValue(value.value_, {\n    generatorContext: value.context\n  });\n}\n\nfunction toShrinkerNextValue(value) {\n  if (value.hasToBeCloned) {\n    return new NextValue(value.value_, {\n      shrinkerContext: value.context\n    }, () => value.value);\n  }\n\n  return new NextValue(value.value_, {\n    shrinkerContext: value.context\n  });\n}\n\nexport class WithShrinkFromOtherArbitrary extends NextArbitrary {\n  constructor(generatorArbitrary, shrinkerArbitrary) {\n    super();\n    this.generatorArbitrary = generatorArbitrary;\n    this.shrinkerArbitrary = shrinkerArbitrary;\n  }\n\n  generate(mrng, biasFactor) {\n    return toGeneratorNextValue(this.generatorArbitrary.generate(mrng, biasFactor));\n  }\n\n  canShrinkWithoutContext(value) {\n    return this.shrinkerArbitrary.canShrinkWithoutContext(value);\n  }\n\n  shrink(value, context) {\n    if (!isSafeContext(context)) {\n      return this.shrinkerArbitrary.shrink(value, undefined).map(toShrinkerNextValue);\n    }\n\n    if ('generatorContext' in context) {\n      return this.generatorArbitrary.shrink(value, context.generatorContext).map(toGeneratorNextValue);\n    }\n\n    return this.shrinkerArbitrary.shrink(value, context.shrinkerContext).map(toShrinkerNextValue);\n  }\n\n}","map":null,"metadata":{},"sourceType":"module"}