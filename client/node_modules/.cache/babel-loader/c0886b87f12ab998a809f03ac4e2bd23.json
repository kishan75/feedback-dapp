{"ast":null,"code":"import * as React from 'react';\nimport { gridClasses } from '../../../constants/gridClasses';\nimport { GridEvents } from '../../../models/events';\nimport { findParentElementFromClassName } from '../../../utils/domUtils';\nimport { isNavigationKey } from '../../../utils/keyboardUtils';\nimport { useGridApiEventHandler } from '../../utils/useGridApiEventHandler';\nimport { GridCellModes } from '../../../models/gridEditRowModel';\nimport { gridVisibleSortedRowIdsSelector } from '../filter/gridFilterSelector';\nimport { gridFocusCellSelector } from '../focus/gridFocusStateSelector';\n/**\n * @requires useGridSelection (method)\n * @requires useGridRows (method)\n * @requires useGridFocus (state)\n * @requires useGridParamsApi (method)\n * @requires useGridColumnMenu (method)\n */\n\nexport const useGridKeyboard = apiRef => {\n  const expandSelection = React.useCallback((params, event) => {\n    apiRef.current.publishEvent(GridEvents.cellNavigationKeyDown, params, event);\n    const focusCell = gridFocusCellSelector(apiRef);\n\n    if (!focusCell) {\n      return;\n    }\n\n    const rowEl = findParentElementFromClassName(event.target, gridClasses.row);\n    const startRowIndex = Number(rowEl.getAttribute('data-rowindex'));\n    const startId = gridVisibleSortedRowIdsSelector(apiRef)[startRowIndex];\n\n    if (startId === focusCell.id) {\n      return;\n    }\n\n    apiRef.current.selectRowRange({\n      startId,\n      endId: focusCell.id\n    }, !apiRef.current.isRowSelected(focusCell.id));\n  }, [apiRef]);\n  const handleCellKeyDown = React.useCallback((params, event) => {\n    // Ignore portal\n    if (!event.currentTarget.contains(event.target)) {\n      return;\n    } // Get the most recent params because the cell mode may have changed by another listener\n\n\n    const cellParams = apiRef.current.getCellParams(params.id, params.field);\n    const isEditMode = cellParams.cellMode === GridCellModes.Edit;\n\n    if (isEditMode) {\n      return;\n    }\n\n    if (event.key === ' ' && event.shiftKey) {\n      // This is a select event, so it's handled by the selection hook\n      return;\n    }\n\n    if (isNavigationKey(event.key) && !event.shiftKey) {\n      apiRef.current.publishEvent(GridEvents.cellNavigationKeyDown, cellParams, event);\n      return;\n    }\n\n    if (isNavigationKey(event.key) && event.shiftKey) {\n      event.preventDefault();\n      expandSelection(cellParams, event);\n    }\n  }, [apiRef, expandSelection]);\n  useGridApiEventHandler(apiRef, GridEvents.cellKeyDown, handleCellKeyDown);\n};","map":null,"metadata":{},"sourceType":"module"}