{"ast":null,"code":"import _slicedToArray from \"F:\\\\BlockChain\\\\Projects\\\\feedback-dapp\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nconst _excluded = [\"children\", \"onClick\"];\nimport * as React from 'react';\nimport { unstable_useId as useId, useForkRef } from '@mui/material/utils';\nimport MenuList from '@mui/material/MenuList';\nimport { isHideMenuKey, isTabKey } from '../../utils/keyboardUtils';\nimport { useGridApiContext } from '../../hooks/utils/useGridApiContext';\nimport { GridMenu } from '../menu/GridMenu';\nimport { useGridRootProps } from '../../hooks/utils/useGridRootProps';\nimport { gridClasses } from '../../constants/gridClasses';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport const GridToolbarExportContainer =\n/*#__PURE__*/\nReact.forwardRef(function GridToolbarExportContainer(props, ref) {\n  var _rootProps$components;\n\n  const children = props.children,\n        onClick = props.onClick,\n        other = _objectWithoutPropertiesLoose(props, _excluded);\n\n  const apiRef = useGridApiContext();\n  const rootProps = useGridRootProps();\n  const buttonId = useId();\n  const menuId = useId();\n\n  const _React$useState = React.useState(false),\n        _React$useState2 = _slicedToArray(_React$useState, 2),\n        open = _React$useState2[0],\n        setOpen = _React$useState2[1];\n\n  const buttonRef = React.useRef(null);\n  const handleRef = useForkRef(ref, buttonRef);\n\n  const handleMenuOpen = event => {\n    setOpen(true);\n    onClick == null ? void 0 : onClick(event);\n  };\n\n  const handleMenuClose = () => setOpen(false);\n\n  const handleListKeyDown = event => {\n    if (isTabKey(event.key)) {\n      event.preventDefault();\n    }\n\n    if (isHideMenuKey(event.key)) {\n      handleMenuClose();\n    }\n  };\n\n  if (children == null) {\n    return null;\n  }\n\n  return (\n    /*#__PURE__*/\n    _jsxs(React.Fragment, {\n      children: [\n      /*#__PURE__*/\n      _jsx(rootProps.components.BaseButton, _extends({\n        ref: handleRef,\n        color: \"primary\",\n        size: \"small\",\n        startIcon:\n        /*#__PURE__*/\n        _jsx(rootProps.components.ExportIcon, {}),\n        \"aria-expanded\": open ? 'true' : undefined,\n        \"aria-label\": apiRef.current.getLocaleText('toolbarExportLabel'),\n        \"aria-haspopup\": \"menu\",\n        \"aria-labelledby\": menuId,\n        id: buttonId\n      }, other, {\n        onClick: handleMenuOpen\n      }, (_rootProps$components = rootProps.componentsProps) == null ? void 0 : _rootProps$components.baseButton, {\n        children: apiRef.current.getLocaleText('toolbarExport')\n      })),\n      /*#__PURE__*/\n      _jsx(GridMenu, {\n        open: open,\n        target: buttonRef.current,\n        onClickAway: handleMenuClose,\n        position: \"bottom-start\",\n        children:\n        /*#__PURE__*/\n        _jsx(MenuList, {\n          id: menuId,\n          className: gridClasses.menuList,\n          \"aria-labelledby\": buttonId,\n          onKeyDown: handleListKeyDown,\n          autoFocusItem: open,\n          children: React.Children.map(children, child => {\n            if (!\n            /*#__PURE__*/\n            React.isValidElement(child)) {\n              return child;\n            }\n\n            return (\n              /*#__PURE__*/\n              React.cloneElement(child, {\n                hideMenu: handleMenuClose\n              })\n            );\n          })\n        })\n      })]\n    })\n  );\n});","map":null,"metadata":{},"sourceType":"module"}