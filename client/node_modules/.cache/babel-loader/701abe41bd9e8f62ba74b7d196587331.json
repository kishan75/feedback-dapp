{"ast":null,"code":"\"use strict\";\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  Object.defineProperty(o, k2, {\n    enumerable: true,\n    get: function () {\n      return m[k];\n    }\n  });\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n\n  __setModuleDefault(result, mod);\n\n  return result;\n};\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.encodeTopic = void 0;\n\nconst debug_1 = __importDefault(require(\"debug\"));\n\nconst debug = debug_1.default(\"codec:topic:encode\");\n\nconst Conversion = __importStar(require(\"../../conversion\"));\n\nconst Evm = __importStar(require(\"../../evm\"));\n\nconst BasicEncode = __importStar(require(\"../../basic/encode\"));\n/**\n * Encodes for event topics (indexed parameters).\n * Warning: This function is not fully implemented yet!\n * @Category Encoding (low-level)\n */\n\n\nfunction encodeTopic(input) {\n  //errors can't be encoded\n  if (input.kind === \"error\") {\n    debug(\"input: %O\", input); //...unless it's an IndexedReferenceTypeError, in which\n    //case, let's read otu that raw data!\n\n    if (input.error.kind === \"IndexedReferenceTypeError\") {\n      return Conversion.toBytes(input.error.raw, Evm.Utils.WORD_SIZE);\n    } else {\n      return undefined;\n    }\n  } //otherwise, just dispath to encodeBasic\n\n\n  return BasicEncode.encodeBasic(input); //...of course, really here we should be checking\n  //whether the input *is* a basic type, and if not, handling\n  //that appropriately!  But so far we don't need this, so this\n  //part of the function isn't implemented yet\n}\n\nexports.encodeTopic = encodeTopic;","map":null,"metadata":{},"sourceType":"script"}