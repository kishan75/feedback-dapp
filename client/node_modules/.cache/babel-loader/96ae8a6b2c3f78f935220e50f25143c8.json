{"ast":null,"code":"\"use strict\";\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  Object.defineProperty(o, k2, {\n    enumerable: true,\n    get: function () {\n      return m[k];\n    }\n  });\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n\n  __setModuleDefault(result, mod);\n\n  return result;\n};\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.isSkippedInMemoryStructs = exports.getMemoryAllocations = void 0;\n\nconst debug_1 = __importDefault(require(\"debug\"));\n\nconst debug = debug_1.default(\"codec:memory:allocate\");\n\nconst Evm = __importStar(require(\"../../evm\"));\n\nfunction getMemoryAllocations(userDefinedTypes) {\n  let allocations = {};\n\n  for (const dataType of Object.values(userDefinedTypes)) {\n    if (dataType.typeClass === \"struct\") {\n      allocations[dataType.id] = allocateStruct(dataType);\n    }\n  }\n\n  return allocations;\n}\n\nexports.getMemoryAllocations = getMemoryAllocations;\n\nfunction isSkippedInMemoryStructs(dataType) {\n  if (dataType.typeClass === \"mapping\") {\n    return true;\n  } else if (dataType.typeClass === \"array\") {\n    return isSkippedInMemoryStructs(dataType.baseType);\n  } else {\n    return false;\n  }\n}\n\nexports.isSkippedInMemoryStructs = isSkippedInMemoryStructs; //unlike in storage and calldata, we'll just return the one allocation, nothing fancy\n//that's because allocating one struct can never necessitate allocating another\n\nfunction allocateStruct(dataType) {\n  let memberAllocations = [];\n  let position = 0;\n\n  for (const _ref of dataType.memberTypes) {\n    const name = _ref.name;\n    const memberType = _ref.type;\n    const length = isSkippedInMemoryStructs(memberType) ? 0 : Evm.Utils.WORD_SIZE;\n    memberAllocations.push({\n      name,\n      type: memberType,\n      pointer: {\n        location: \"memory\",\n        start: position,\n        length\n      }\n    });\n    position += length;\n  }\n\n  return {\n    members: memberAllocations\n  };\n}","map":null,"metadata":{},"sourceType":"script"}