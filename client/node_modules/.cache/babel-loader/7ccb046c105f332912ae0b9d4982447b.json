{"ast":null,"code":"/**\n * highlight.js Solidity syntax highlighting definition\n *\n * @see https://github.com/isagalaev/highlight.js\n *\n * @package: highlightjs-solidity\n * @author:  Sam Pospischil <sam@changegiving.com>\n * @since:   2016-07-01\n */\nfunction isNegativeLookbehindAvailable() {\n  try {\n    new RegExp('(?<!.)');\n    return true;\n  } catch (_) {\n    return false;\n  }\n} //like a C number, except:\n//1. no octal literals (leading zeroes disallowed)\n//2. underscores (1 apiece) are allowed between consecutive digits\n//(including hex digits)\n//also, all instances of \\b (word boundary) have been replaced with (?<!\\$)\\b\n//NOTE: we use string rather than regexp in the case where negative lookbehind\n//is allowed to avoid Firefox parse errors; sorry about the resulting double backslashes!\n\n\nvar SOL_NUMBER_RE = /-?(\\b0[xX]([a-fA-F0-9]_?)*[a-fA-F0-9]|(\\b[1-9](_?\\d)*(\\.((\\d_?)*\\d)?)?|\\.\\d(_?\\d)*)([eE][-+]?\\d(_?\\d)*)?|\\b0)(?!\\w|\\$)/;\n\nif (isNegativeLookbehindAvailable()) {\n  SOL_NUMBER_RE = SOL_NUMBER_RE.source.replace(/\\\\b/g, '(?<!\\\\$)\\\\b');\n}\n\nvar SOL_NUMBER = {\n  className: 'number',\n  begin: SOL_NUMBER_RE,\n  relevance: 0\n};\nvar SOL_ASSEMBLY_KEYWORDS = {\n  keyword: 'assembly ' + 'let function ' + 'if switch case default for leave ' + 'break continue ' + 'u256 ' + //not in old-style assembly, but in Yul\n  //NOTE: We're counting most opcodes as builtins, but the following ones we're\n  //treating as keywords because they alter control flow or halt execution\n  'jump jumpi ' + 'stop return revert selfdestruct invalid',\n  built_in: //NOTE that push1 through push32, as well as jumpdest, are not included\n  'add sub mul div sdiv mod smod exp not lt gt slt sgt eq iszero ' + 'and or xor byte shl shr sar ' + 'addmod mulmod signextend keccak256 ' + 'pc pop ' + 'dup1 dup2 dup3 dup4 dup5 dup6 dup7 dup8 dup9 dup10 dup11 dup12 dup13 dup14 dup15 dup16 ' + 'swap1 swap2 swap3 swap4 swap5 swap6 swap7 swap8 swap9 swap10 swap11 swap12 swap13 swap14 swap15 swap16 ' + 'mload mstore mstore8 sload sstore msize ' + 'gas address balance selfbalance caller callvalue ' + 'calldataload calldatasize calldatacopy codesize codecopy extcodesize extcodecopy returndatasize returndatacopy extcodehash ' + 'create create2 call callcode delegatecall staticcall ' + 'log0 log1 log2 log3 log4 ' + 'chainid origin gasprice basefee blockhash coinbase timestamp number difficulty gaslimit',\n  literal: 'true false'\n};\nvar HEX_APOS_STRING_MODE = {\n  className: 'string',\n  begin: /\\bhex'(([0-9a-fA-F]{2}_?)*[0-9a-fA-F]{2})?'/ //please also update HEX_QUOTE_STRING_MODE\n\n};\nvar HEX_QUOTE_STRING_MODE = {\n  className: 'string',\n  begin: /\\bhex\"(([0-9a-fA-F]{2}_?)*[0-9a-fA-F]{2})?\"/ //please also update HEX_APOS_STRING_MODE\n\n}; //I've set these up exactly like hljs's builtin STRING_MODEs,\n//except with the optional initial \"unicode\" text\n\nfunction solAposStringMode(hljs) {\n  return hljs.inherit(hljs.APOS_STRING_MODE, //please also update solQuoteStringMode\n  {\n    begin: /(\\bunicode)?'/\n  });\n}\n\nfunction solQuoteStringMode(hljs) {\n  return hljs.inherit(hljs.QUOTE_STRING_MODE, //please also update solAposStringMode\n  {\n    begin: /(\\bunicode)?\"/\n  });\n}\n\nfunction baseAssembly(hljs) {\n  //this function defines a \"basic\" assembly environment;\n  //we use it several times below with hljs.inherit to provide\n  //elaborations upon this basic assembly environment\n  var SOL_APOS_STRING_MODE = solAposStringMode(hljs);\n  var SOL_QUOTE_STRING_MODE = solQuoteStringMode(hljs); //in assembly, identifiers can contain periods (but may not start with them)\n\n  var SOL_ASSEMBLY_LEXEMES_RE = /[A-Za-z_$][A-Za-z_$0-9.]*/;\n  var SOL_ASSEMBLY_TITLE_MODE = hljs.inherit(hljs.TITLE_MODE, {\n    begin: /[A-Za-z$_][0-9A-Za-z$_]*/,\n    lexemes: SOL_ASSEMBLY_LEXEMES_RE,\n    keywords: SOL_ASSEMBLY_KEYWORDS\n  });\n  var SOL_ASSEMBLY_FUNC_PARAMS = {\n    className: 'params',\n    begin: /\\(/,\n    end: /\\)/,\n    excludeBegin: true,\n    excludeEnd: true,\n    lexemes: SOL_ASSEMBLY_LEXEMES_RE,\n    keywords: SOL_ASSEMBLY_KEYWORDS,\n    contains: [hljs.C_LINE_COMMENT_MODE, hljs.C_BLOCK_COMMENT_MODE, SOL_APOS_STRING_MODE, SOL_QUOTE_STRING_MODE, SOL_NUMBER]\n  }; //note: we always put operators below comments so\n  //it won't interfere with comments\n\n  var SOL_ASSEMBLY_OPERATORS = {\n    className: 'operator',\n    begin: /:=|->/\n  };\n  return {\n    keywords: SOL_ASSEMBLY_KEYWORDS,\n    lexemes: SOL_ASSEMBLY_LEXEMES_RE,\n    contains: [SOL_APOS_STRING_MODE, SOL_QUOTE_STRING_MODE, HEX_APOS_STRING_MODE, HEX_QUOTE_STRING_MODE, hljs.C_LINE_COMMENT_MODE, hljs.C_BLOCK_COMMENT_MODE, SOL_NUMBER, SOL_ASSEMBLY_OPERATORS, {\n      // functions\n      className: 'function',\n      lexemes: SOL_ASSEMBLY_LEXEMES_RE,\n      beginKeywords: 'function',\n      end: '{',\n      excludeEnd: true,\n      contains: [SOL_ASSEMBLY_TITLE_MODE, SOL_ASSEMBLY_FUNC_PARAMS, hljs.C_LINE_COMMENT_MODE, hljs.C_BLOCK_COMMENT_MODE, SOL_ASSEMBLY_OPERATORS]\n    }]\n  };\n}\n\nmodule.exports = {\n  SOL_ASSEMBLY_KEYWORDS,\n  baseAssembly,\n  solAposStringMode,\n  solQuoteStringMode,\n  HEX_APOS_STRING_MODE,\n  HEX_QUOTE_STRING_MODE,\n  SOL_NUMBER,\n  isNegativeLookbehindAvailable\n};","map":null,"metadata":{},"sourceType":"script"}