{"ast":null,"code":"import { Stream } from '../../../stream/Stream.js';\nimport { cloneMethod, hasCloneMethod } from '../../symbols.js';\nexport class Shrinkable {\n  constructor(value_, shrink = () => Stream.nil(), customGetValue = undefined) {\n    this.value_ = value_;\n    this.shrink = shrink;\n    this.hasToBeCloned = customGetValue !== undefined || hasCloneMethod(value_);\n    this.readOnce = false;\n\n    if (this.hasToBeCloned) {\n      Object.defineProperty(this, 'value', {\n        get: customGetValue !== undefined ? customGetValue : this.getValue\n      });\n    } else {\n      this.value = value_;\n    }\n  }\n\n  getValue() {\n    if (!this.readOnce) {\n      this.readOnce = true;\n      return this.value_;\n    }\n\n    return this.value_[cloneMethod]();\n  }\n\n  applyMapper(mapper) {\n    if (this.hasToBeCloned) {\n      const out = mapper(this.value);\n\n      if (out instanceof Object) {\n        out[cloneMethod] = () => this.applyMapper(mapper);\n      }\n\n      return out;\n    }\n\n    return mapper(this.value);\n  }\n\n  map(mapper) {\n    return new Shrinkable(this.applyMapper(mapper), () => this.shrink().map(v => v.map(mapper)));\n  }\n\n  filter(refinement) {\n    const refinementOnShrinkable = s => {\n      return refinement(s.value_);\n    };\n\n    return new Shrinkable(this.value, () => this.shrink().filter(refinementOnShrinkable).map(v => v.filter(refinement)));\n  }\n\n}","map":null,"metadata":{},"sourceType":"module"}