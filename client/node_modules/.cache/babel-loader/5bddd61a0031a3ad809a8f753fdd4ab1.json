{"ast":null,"code":"\"use strict\";\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  Object.defineProperty(o, k2, {\n    enumerable: true,\n    get: function () {\n      return m[k];\n    }\n  });\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n\n  __setModuleDefault(result, mod);\n\n  return result;\n};\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.decodeTopic = void 0;\n\nconst debug_1 = __importDefault(require(\"debug\"));\n\nconst debug = debug_1.default(\"codec:topic:decode\");\n\nconst read_1 = __importDefault(require(\"../../read\"));\n\nconst Basic = __importStar(require(\"../../basic\"));\n\nconst Format = __importStar(require(\"../../format\"));\n\nconst Conversion = __importStar(require(\"../../conversion\"));\n\nfunction* decodeTopic(dataType, pointer, info, options = {}) {\n  if (Format.Types.isReferenceType(dataType) || dataType.typeClass === \"tuple\") {\n    //we cannot decode reference types \"stored\" in topics; we have to just return an error\n    let bytes = yield* read_1.default(pointer, info.state);\n    let raw = Conversion.toHexString(bytes); //NOTE: even in strict mode we want to just return this, not throw an error here\n\n    return {\n      //dunno why TS is failing here\n      type: dataType,\n      kind: \"error\",\n      error: {\n        kind: \"IndexedReferenceTypeError\",\n        type: dataType,\n        raw\n      }\n    };\n  } //otherwise, dispatch to decodeBasic\n\n\n  return yield* Basic.Decode.decodeBasic(dataType, pointer, info, options);\n}\n\nexports.decodeTopic = decodeTopic;","map":null,"metadata":{},"sourceType":"script"}