{"ast":null,"code":"import _slicedToArray from \"F:\\\\BlockChain\\\\Projects\\\\feedback-dapp\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nconst _excluded = [\"item\", \"applyValue\", \"type\", \"apiRef\", \"focusElementRef\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { unstable_useId as useId } from '@mui/material/utils';\nimport { useGridRootProps } from '../../../hooks/utils/useGridRootProps';\nimport { getValueFromValueOptions } from './filterPanelUtils';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nconst renderSingleSelectOptions = ({\n  valueOptions,\n  valueFormatter,\n  field\n}, api) => {\n  const iterableColumnValues = typeof valueOptions === 'function' ? ['', ...valueOptions({\n    field\n  })] : ['', ...(valueOptions || [])];\n  return iterableColumnValues.map(option => typeof option === 'object' ?\n  /*#__PURE__*/\n  _jsx(\"option\", {\n    value: option.value,\n    children: option.label\n  }, option.value) :\n  /*#__PURE__*/\n  _jsx(\"option\", {\n    value: option,\n    children: valueFormatter && option !== '' ? valueFormatter({\n      value: option,\n      field,\n      api\n    }) : option\n  }, option));\n};\n\nfunction GridFilterInputSingleSelect(props) {\n  var _item$value, _rootProps$components;\n\n  const item = props.item,\n        applyValue = props.applyValue,\n        type = props.type,\n        apiRef = props.apiRef,\n        focusElementRef = props.focusElementRef,\n        others = _objectWithoutPropertiesLoose(props, _excluded);\n\n  const _React$useState = React.useState((_item$value = item.value) != null ? _item$value : ''),\n        _React$useState2 = _slicedToArray(_React$useState, 2),\n        filterValueState = _React$useState2[0],\n        setFilterValueState = _React$useState2[1];\n\n  const id = useId();\n  const rootProps = useGridRootProps();\n  const currentColumn = item.columnField ? apiRef.current.getColumn(item.columnField) : null;\n  const currentValueOptions = React.useMemo(() => {\n    return typeof currentColumn.valueOptions === 'function' ? currentColumn.valueOptions({\n      field: currentColumn.field\n    }) : currentColumn.valueOptions;\n  }, [currentColumn]);\n  const onFilterChange = React.useCallback(event => {\n    let value = event.target.value; // NativeSelect casts the value to a string.\n\n    value = getValueFromValueOptions(value, currentValueOptions);\n    setFilterValueState(String(value));\n    applyValue(_extends({}, item, {\n      value\n    }));\n  }, [applyValue, item, currentValueOptions]);\n  React.useEffect(() => {\n    var _itemValue;\n\n    let itemValue;\n\n    if (currentValueOptions !== undefined) {\n      // sanitize if valueOptions are provided\n      itemValue = getValueFromValueOptions(item.value, currentValueOptions);\n\n      if (itemValue !== item.value) {\n        applyValue(_extends({}, item, {\n          value: itemValue\n        }));\n        return;\n      }\n    } else {\n      itemValue = item.value;\n    }\n\n    itemValue = (_itemValue = itemValue) != null ? _itemValue : '';\n    setFilterValueState(String(itemValue));\n  }, [item, currentValueOptions, applyValue]);\n  return (\n    /*#__PURE__*/\n    _jsx(rootProps.components.BaseTextField, _extends({\n      id: id,\n      label: apiRef.current.getLocaleText('filterPanelInputLabel'),\n      placeholder: apiRef.current.getLocaleText('filterPanelInputPlaceholder'),\n      value: filterValueState,\n      onChange: onFilterChange,\n      type: type || 'text',\n      variant: \"standard\",\n      InputLabelProps: {\n        shrink: true\n      },\n      inputRef: focusElementRef,\n      select: true,\n      SelectProps: {\n        native: true\n      }\n    }, others, (_rootProps$components = rootProps.componentsProps) == null ? void 0 : _rootProps$components.baseTextField, {\n      children: renderSingleSelectOptions(apiRef.current.getColumn(item.columnField), apiRef.current)\n    }))\n  );\n}\n\nprocess.env.NODE_ENV !== \"production\" ? GridFilterInputSingleSelect.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // | To update them edit the TypeScript types and run \"yarn proptypes\"  |\n  // ----------------------------------------------------------------------\n  apiRef: PropTypes.any.isRequired,\n  applyValue: PropTypes.func.isRequired,\n  focusElementRef: PropTypes\n  /* @typescript-to-proptypes-ignore */\n  .oneOfType([PropTypes.func, PropTypes.object]),\n  item: PropTypes.shape({\n    columnField: PropTypes.string.isRequired,\n    id: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n    operatorValue: PropTypes.string,\n    value: PropTypes.any\n  }).isRequired\n} : void 0;\nexport { GridFilterInputSingleSelect };","map":null,"metadata":{},"sourceType":"module"}