{"ast":null,"code":"\"use strict\";\n/**\n * Methods for traversing the DOM structure.\n *\n * @module cheerio/traversing\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.addBack = exports.add = exports.end = exports.slice = exports.index = exports.toArray = exports.get = exports.eq = exports.last = exports.first = exports.has = exports.not = exports.is = exports.filterArray = exports.filter = exports.map = exports.each = exports.contents = exports.children = exports.siblings = exports.prevUntil = exports.prevAll = exports.prev = exports.nextUntil = exports.nextAll = exports.next = exports.closest = exports.parentsUntil = exports.parents = exports.parent = exports.find = void 0;\n\nvar tslib_1 = require(\"tslib\");\n\nvar domhandler_1 = require(\"domhandler\");\n\nvar select = tslib_1.__importStar(require(\"cheerio-select\"));\n\nvar utils_1 = require(\"../utils\");\n\nvar static_1 = require(\"../static\");\n\nvar htmlparser2_1 = require(\"htmlparser2\");\n\nvar uniqueSort = htmlparser2_1.DomUtils.uniqueSort;\nvar reSiblingSelector = /^\\s*[~+]/;\n/**\n * Get the descendants of each element in the current set of matched elements,\n * filtered by a selector, jQuery object, or element.\n *\n * @category Traversing\n * @example\n *\n * ```js\n * $('#fruits').find('li').length;\n * //=> 3\n * $('#fruits').find($('.apple')).length;\n * //=> 1\n * ```\n *\n * @param selectorOrHaystack - Element to look for.\n * @returns The found elements.\n * @see {@link https://api.jquery.com/find/}\n */\n\nfunction find(selectorOrHaystack) {\n  var _a;\n\n  if (!selectorOrHaystack) {\n    return this._make([]);\n  }\n\n  var context = this.toArray();\n\n  if (typeof selectorOrHaystack !== 'string') {\n    var haystack = utils_1.isCheerio(selectorOrHaystack) ? selectorOrHaystack.toArray() : [selectorOrHaystack];\n    return this._make(haystack.filter(function (elem) {\n      return context.some(function (node) {\n        return static_1.contains(node, elem);\n      });\n    }));\n  }\n\n  var elems = reSiblingSelector.test(selectorOrHaystack) ? context : this.children().toArray();\n  var options = {\n    context: context,\n    root: (_a = this._root) === null || _a === void 0 ? void 0 : _a[0],\n    xmlMode: this.options.xmlMode\n  };\n  return this._make(select.select(selectorOrHaystack, elems, options));\n}\n\nexports.find = find;\n/**\n * Creates a matcher, using a particular mapping function. Matchers provide a\n * function that finds elements using a generating function, supporting filtering.\n *\n * @private\n * @param matchMap - Mapping function.\n * @returns - Function for wrapping generating functions.\n */\n\nfunction _getMatcher(matchMap) {\n  return function (fn) {\n    var postFns = [];\n\n    for (var _i = 1; _i < arguments.length; _i++) {\n      postFns[_i - 1] = arguments[_i];\n    }\n\n    return function (selector) {\n      var _a;\n\n      var matched = matchMap(fn, this);\n\n      if (selector) {\n        matched = filterArray(matched, selector, this.options.xmlMode, (_a = this._root) === null || _a === void 0 ? void 0 : _a[0]);\n      }\n\n      return this._make( // Post processing is only necessary if there is more than one element.\n      this.length > 1 && matched.length > 1 ? postFns.reduce(function (elems, fn) {\n        return fn(elems);\n      }, matched) : matched);\n    };\n  };\n}\n/** Matcher that adds multiple elements for each entry in the input. */\n\n\nvar _matcher = _getMatcher(function (fn, elems) {\n  var _a;\n\n  var ret = [];\n\n  for (var i = 0; i < elems.length; i++) {\n    var value = fn(elems[i]);\n    ret.push(value);\n  }\n\n  return (_a = new Array()).concat.apply(_a, ret);\n});\n/** Matcher that adds at most one element for each entry in the input. */\n\n\nvar _singleMatcher = _getMatcher(function (fn, elems) {\n  var ret = [];\n\n  for (var i = 0; i < elems.length; i++) {\n    var value = fn(elems[i]);\n\n    if (value !== null) {\n      ret.push(value);\n    }\n  }\n\n  return ret;\n});\n/**\n * Matcher that supports traversing until a condition is met.\n *\n * @returns A function usable for `*Until` methods.\n */\n\n\nfunction _matchUntil(nextElem) {\n  var postFns = [];\n\n  for (var _i = 1; _i < arguments.length; _i++) {\n    postFns[_i - 1] = arguments[_i];\n  } // We use a variable here that is used from within the matcher.\n\n\n  var matches = null;\n\n  var innerMatcher = _getMatcher(function (nextElem, elems) {\n    var matched = [];\n    utils_1.domEach(elems, function (elem) {\n      for (var next_1; next_1 = nextElem(elem); elem = next_1) {\n        // FIXME: `matched` might contain duplicates here and the index is too large.\n        if (matches === null || matches === void 0 ? void 0 : matches(next_1, matched.length)) break;\n        matched.push(next_1);\n      }\n    });\n    return matched;\n  }).apply(void 0, tslib_1.__spreadArray([nextElem], postFns));\n\n  return function (selector, filterSelector) {\n    var _this = this; // Override `matches` variable with the new target.\n\n\n    matches = typeof selector === 'string' ? function (elem) {\n      return select.is(elem, selector, _this.options);\n    } : selector ? getFilterFn(selector) : null;\n    var ret = innerMatcher.call(this, filterSelector); // Set `matches` to `null`, so we don't waste memory.\n\n    matches = null;\n    return ret;\n  };\n}\n\nfunction _removeDuplicates(elems) {\n  return Array.from(new Set(elems));\n}\n/**\n * Get the parent of each element in the current set of matched elements,\n * optionally filtered by a selector.\n *\n * @category Traversing\n * @example\n *\n * ```js\n * $('.pear').parent().attr('id');\n * //=> fruits\n * ```\n *\n * @param selector - If specified filter for parent.\n * @returns The parents.\n * @see {@link https://api.jquery.com/parent/}\n */\n\n\nexports.parent = _singleMatcher(function (_a) {\n  var parent = _a.parent;\n  return parent && !domhandler_1.isDocument(parent) ? parent : null;\n}, _removeDuplicates);\n/**\n * Get a set of parents filtered by `selector` of each element in the current\n * set of match elements.\n *\n * @category Traversing\n * @example\n *\n * ```js\n * $('.orange').parents().length;\n * //=> 2\n * $('.orange').parents('#fruits').length;\n * //=> 1\n * ```\n *\n * @param selector - If specified filter for parents.\n * @returns The parents.\n * @see {@link https://api.jquery.com/parents/}\n */\n\nexports.parents = _matcher(function (elem) {\n  var matched = [];\n\n  while (elem.parent && !domhandler_1.isDocument(elem.parent)) {\n    matched.push(elem.parent);\n    elem = elem.parent;\n  }\n\n  return matched;\n}, uniqueSort, function (elems) {\n  return elems.reverse();\n});\n/**\n * Get the ancestors of each element in the current set of matched elements, up\n * to but not including the element matched by the selector, DOM node, or cheerio object.\n *\n * @category Traversing\n * @example\n *\n * ```js\n * $('.orange').parentsUntil('#food').length;\n * //=> 1\n * ```\n *\n * @param selector - Selector for element to stop at.\n * @param filterSelector - Optional filter for parents.\n * @returns The parents.\n * @see {@link https://api.jquery.com/parentsUntil/}\n */\n\nexports.parentsUntil = _matchUntil(function (_a) {\n  var parent = _a.parent;\n  return parent && !domhandler_1.isDocument(parent) ? parent : null;\n}, uniqueSort, function (elems) {\n  return elems.reverse();\n});\n/**\n * For each element in the set, get the first element that matches the selector\n * by testing the element itself and traversing up through its ancestors in the DOM tree.\n *\n * @category Traversing\n * @example\n *\n * ```js\n * $('.orange').closest();\n * //=> []\n *\n * $('.orange').closest('.apple');\n * // => []\n *\n * $('.orange').closest('li');\n * //=> [<li class=\"orange\">Orange</li>]\n *\n * $('.orange').closest('#fruits');\n * //=> [<ul id=\"fruits\"> ... </ul>]\n * ```\n *\n * @param selector - Selector for the element to find.\n * @returns The closest nodes.\n * @see {@link https://api.jquery.com/closest/}\n */\n\nfunction closest(selector) {\n  var _this = this;\n\n  var set = [];\n\n  if (!selector) {\n    return this._make(set);\n  }\n\n  utils_1.domEach(this, function (elem) {\n    var _a;\n\n    while (elem && elem.type !== 'root') {\n      if (!selector || filterArray([elem], selector, _this.options.xmlMode, (_a = _this._root) === null || _a === void 0 ? void 0 : _a[0]).length) {\n        // Do not add duplicate elements to the set\n        if (elem && !set.includes(elem)) {\n          set.push(elem);\n        }\n\n        break;\n      }\n\n      elem = elem.parent;\n    }\n  });\n  return this._make(set);\n}\n\nexports.closest = closest;\n/**\n * Gets the next sibling of the first selected element, optionally filtered by a selector.\n *\n * @category Traversing\n * @example\n *\n * ```js\n * $('.apple').next().hasClass('orange');\n * //=> true\n * ```\n *\n * @param selector - If specified filter for sibling.\n * @returns The next nodes.\n * @see {@link https://api.jquery.com/next/}\n */\n\nexports.next = _singleMatcher(function (elem) {\n  return htmlparser2_1.DomUtils.nextElementSibling(elem);\n});\n/**\n * Gets all the following siblings of the first selected element, optionally\n * filtered by a selector.\n *\n * @category Traversing\n * @example\n *\n * ```js\n * $('.apple').nextAll();\n * //=> [<li class=\"orange\">Orange</li>, <li class=\"pear\">Pear</li>]\n * $('.apple').nextAll('.orange');\n * //=> [<li class=\"orange\">Orange</li>]\n * ```\n *\n * @param selector - If specified filter for siblings.\n * @returns The next nodes.\n * @see {@link https://api.jquery.com/nextAll/}\n */\n\nexports.nextAll = _matcher(function (elem) {\n  var matched = [];\n\n  while (elem.next) {\n    elem = elem.next;\n    if (utils_1.isTag(elem)) matched.push(elem);\n  }\n\n  return matched;\n}, _removeDuplicates);\n/**\n * Gets all the following siblings up to but not including the element matched\n * by the selector, optionally filtered by another selector.\n *\n * @category Traversing\n * @example\n *\n * ```js\n * $('.apple').nextUntil('.pear');\n * //=> [<li class=\"orange\">Orange</li>]\n * ```\n *\n * @param selector - Selector for element to stop at.\n * @param filterSelector - If specified filter for siblings.\n * @returns The next nodes.\n * @see {@link https://api.jquery.com/nextUntil/}\n */\n\nexports.nextUntil = _matchUntil(function (el) {\n  return htmlparser2_1.DomUtils.nextElementSibling(el);\n}, _removeDuplicates);\n/**\n * Gets the previous sibling of the first selected element optionally filtered\n * by a selector.\n *\n * @category Traversing\n * @example\n *\n * ```js\n * $('.orange').prev().hasClass('apple');\n * //=> true\n * ```\n *\n * @param selector - If specified filter for siblings.\n * @returns The previous nodes.\n * @see {@link https://api.jquery.com/prev/}\n */\n\nexports.prev = _singleMatcher(function (elem) {\n  return htmlparser2_1.DomUtils.prevElementSibling(elem);\n});\n/**\n * Gets all the preceding siblings of the first selected element, optionally\n * filtered by a selector.\n *\n * @category Traversing\n * @example\n *\n * ```js\n * $('.pear').prevAll();\n * //=> [<li class=\"orange\">Orange</li>, <li class=\"apple\">Apple</li>]\n *\n * $('.pear').prevAll('.orange');\n * //=> [<li class=\"orange\">Orange</li>]\n * ```\n *\n * @param selector - If specified filter for siblings.\n * @returns The previous nodes.\n * @see {@link https://api.jquery.com/prevAll/}\n */\n\nexports.prevAll = _matcher(function (elem) {\n  var matched = [];\n\n  while (elem.prev) {\n    elem = elem.prev;\n    if (utils_1.isTag(elem)) matched.push(elem);\n  }\n\n  return matched;\n}, _removeDuplicates);\n/**\n * Gets all the preceding siblings up to but not including the element matched\n * by the selector, optionally filtered by another selector.\n *\n * @category Traversing\n * @example\n *\n * ```js\n * $('.pear').prevUntil('.apple');\n * //=> [<li class=\"orange\">Orange</li>]\n * ```\n *\n * @param selector - Selector for element to stop at.\n * @param filterSelector - If specified filter for siblings.\n * @returns The previous nodes.\n * @see {@link https://api.jquery.com/prevUntil/}\n */\n\nexports.prevUntil = _matchUntil(function (el) {\n  return htmlparser2_1.DomUtils.prevElementSibling(el);\n}, _removeDuplicates);\n/**\n * Get the siblings of each element (excluding the element) in the set of\n * matched elements, optionally filtered by a selector.\n *\n * @category Traversing\n * @example\n *\n * ```js\n * $('.pear').siblings().length;\n * //=> 2\n *\n * $('.pear').siblings('.orange').length;\n * //=> 1\n * ```\n *\n * @param selector - If specified filter for siblings.\n * @returns The siblings.\n * @see {@link https://api.jquery.com/siblings/}\n */\n\nexports.siblings = _matcher(function (elem) {\n  return htmlparser2_1.DomUtils.getSiblings(elem).filter(function (el) {\n    return utils_1.isTag(el) && el !== elem;\n  });\n}, uniqueSort);\n/**\n * Gets the children of the first selected element.\n *\n * @category Traversing\n * @example\n *\n * ```js\n * $('#fruits').children().length;\n * //=> 3\n *\n * $('#fruits').children('.pear').text();\n * //=> Pear\n * ```\n *\n * @param selector - If specified filter for children.\n * @returns The children.\n * @see {@link https://api.jquery.com/children/}\n */\n\nexports.children = _matcher(function (elem) {\n  return htmlparser2_1.DomUtils.getChildren(elem).filter(utils_1.isTag);\n}, _removeDuplicates);\n/**\n * Gets the children of each element in the set of matched elements, including\n * text and comment nodes.\n *\n * @category Traversing\n * @example\n *\n * ```js\n * $('#fruits').contents().length;\n * //=> 3\n * ```\n *\n * @returns The children.\n * @see {@link https://api.jquery.com/contents/}\n */\n\nfunction contents() {\n  var elems = this.toArray().reduce(function (newElems, elem) {\n    return domhandler_1.hasChildren(elem) ? newElems.concat(elem.children) : newElems;\n  }, []);\n  return this._make(elems);\n}\n\nexports.contents = contents;\n/**\n * Iterates over a cheerio object, executing a function for each matched\n * element. When the callback is fired, the function is fired in the context of\n * the DOM element, so `this` refers to the current element, which is equivalent\n * to the function parameter `element`. To break out of the `each` loop early,\n * return with `false`.\n *\n * @category Traversing\n * @example\n *\n * ```js\n * const fruits = [];\n *\n * $('li').each(function (i, elem) {\n *   fruits[i] = $(this).text();\n * });\n *\n * fruits.join(', ');\n * //=> Apple, Orange, Pear\n * ```\n *\n * @param fn - Function to execute.\n * @returns The instance itself, useful for chaining.\n * @see {@link https://api.jquery.com/each/}\n */\n\nfunction each(fn) {\n  var i = 0;\n  var len = this.length;\n\n  while (i < len && fn.call(this[i], i, this[i]) !== false) ++i;\n\n  return this;\n}\n\nexports.each = each;\n/**\n * Pass each element in the current matched set through a function, producing a\n * new Cheerio object containing the return values. The function can return an\n * individual data item or an array of data items to be inserted into the\n * resulting set. If an array is returned, the elements inside the array are\n * inserted into the set. If the function returns null or undefined, no element\n * will be inserted.\n *\n * @category Traversing\n * @example\n *\n * ```js\n * $('li')\n *   .map(function (i, el) {\n *     // this === el\n *     return $(this).text();\n *   })\n *   .toArray()\n *   .join(' ');\n * //=> \"apple orange pear\"\n * ```\n *\n * @param fn - Function to execute.\n * @returns The mapped elements, wrapped in a Cheerio collection.\n * @see {@link https://api.jquery.com/map/}\n */\n\nfunction map(fn) {\n  var elems = [];\n\n  for (var i = 0; i < this.length; i++) {\n    var el = this[i];\n    var val = fn.call(el, i, el);\n\n    if (val != null) {\n      elems = elems.concat(val);\n    }\n  }\n\n  return this._make(elems);\n}\n\nexports.map = map;\n/**\n * Creates a function to test if a filter is matched.\n *\n * @param match - A filter.\n * @returns A function that determines if a filter has been matched.\n */\n\nfunction getFilterFn(match) {\n  if (typeof match === 'function') {\n    return function (el, i) {\n      return match.call(el, i, el);\n    };\n  }\n\n  if (utils_1.isCheerio(match)) {\n    return function (el) {\n      return Array.prototype.includes.call(match, el);\n    };\n  }\n\n  return function (el) {\n    return match === el;\n  };\n}\n\nfunction filter(match) {\n  var _a;\n\n  return this._make(filterArray(this.toArray(), match, this.options.xmlMode, (_a = this._root) === null || _a === void 0 ? void 0 : _a[0]));\n}\n\nexports.filter = filter;\n\nfunction filterArray(nodes, match, xmlMode, root) {\n  return typeof match === 'string' ? select.filter(match, nodes, {\n    xmlMode: xmlMode,\n    root: root\n  }) : nodes.filter(getFilterFn(match));\n}\n\nexports.filterArray = filterArray;\n/**\n * Checks the current list of elements and returns `true` if *any* of the\n * elements match the selector. If using an element or Cheerio selection,\n * returns `true` if *any* of the elements match. If using a predicate function,\n * the function is executed in the context of the selected element, so `this`\n * refers to the current element.\n *\n * @category Attributes\n * @param selector - Selector for the selection.\n * @returns Whether or not the selector matches an element of the instance.\n * @see {@link https://api.jquery.com/is/}\n */\n\nfunction is(selector) {\n  var nodes = this.toArray();\n  return typeof selector === 'string' ? select.some(nodes.filter(utils_1.isTag), selector, this.options) : selector ? nodes.some(getFilterFn(selector)) : false;\n}\n\nexports.is = is;\n/**\n * Remove elements from the set of matched elements. Given a Cheerio object that\n * represents a set of DOM elements, the `.not()` method constructs a new\n * Cheerio object from a subset of the matching elements. The supplied selector\n * is tested against each element; the elements that don't match the selector\n * will be included in the result.\n *\n * The `.not()` method can take a function as its argument in the same way that\n * `.filter()` does. Elements for which the function returns `true` are excluded\n * from the filtered set; all other elements are included.\n *\n * @category Traversing\n * @example <caption>Selector</caption>\n *\n * ```js\n * $('li').not('.apple').length;\n * //=> 2\n * ```\n *\n * @example <caption>Function</caption>\n *\n * ```js\n * $('li').not(function (i, el) {\n *   // this === el\n *   return $(this).attr('class') === 'orange';\n * }).length; //=> 2\n * ```\n *\n * @param match - Value to look for, following the rules above.\n * @param container - Optional node to filter instead.\n * @returns The filtered collection.\n * @see {@link https://api.jquery.com/not/}\n */\n\nfunction not(match) {\n  var nodes = this.toArray();\n\n  if (typeof match === 'string') {\n    var matches_1 = new Set(select.filter(match, nodes, this.options));\n    nodes = nodes.filter(function (el) {\n      return !matches_1.has(el);\n    });\n  } else {\n    var filterFn_1 = getFilterFn(match);\n    nodes = nodes.filter(function (el, i) {\n      return !filterFn_1(el, i);\n    });\n  }\n\n  return this._make(nodes);\n}\n\nexports.not = not;\n/**\n * Filters the set of matched elements to only those which have the given DOM\n * element as a descendant or which have a descendant that matches the given\n * selector. Equivalent to `.filter(':has(selector)')`.\n *\n * @category Traversing\n * @example <caption>Selector</caption>\n *\n * ```js\n * $('ul').has('.pear').attr('id');\n * //=> fruits\n * ```\n *\n * @example <caption>Element</caption>\n *\n * ```js\n * $('ul').has($('.pear')[0]).attr('id');\n * //=> fruits\n * ```\n *\n * @param selectorOrHaystack - Element to look for.\n * @returns The filtered collection.\n * @see {@link https://api.jquery.com/has/}\n */\n\nfunction has(selectorOrHaystack) {\n  var _this = this;\n\n  return this.filter(typeof selectorOrHaystack === 'string' ? // Using the `:has` selector here short-circuits searches.\n  \":has(\" + selectorOrHaystack + \")\" : function (_, el) {\n    return _this._make(el).find(selectorOrHaystack).length > 0;\n  });\n}\n\nexports.has = has;\n/**\n * Will select the first element of a cheerio object.\n *\n * @category Traversing\n * @example\n *\n * ```js\n * $('#fruits').children().first().text();\n * //=> Apple\n * ```\n *\n * @returns The first element.\n * @see {@link https://api.jquery.com/first/}\n */\n\nfunction first() {\n  return this.length > 1 ? this._make(this[0]) : this;\n}\n\nexports.first = first;\n/**\n * Will select the last element of a cheerio object.\n *\n * @category Traversing\n * @example\n *\n * ```js\n * $('#fruits').children().last().text();\n * //=> Pear\n * ```\n *\n * @returns The last element.\n * @see {@link https://api.jquery.com/last/}\n */\n\nfunction last() {\n  return this.length > 0 ? this._make(this[this.length - 1]) : this;\n}\n\nexports.last = last;\n/**\n * Reduce the set of matched elements to the one at the specified index. Use\n * `.eq(-i)` to count backwards from the last selected element.\n *\n * @category Traversing\n * @example\n *\n * ```js\n * $('li').eq(0).text();\n * //=> Apple\n *\n * $('li').eq(-1).text();\n * //=> Pear\n * ```\n *\n * @param i - Index of the element to select.\n * @returns The element at the `i`th position.\n * @see {@link https://api.jquery.com/eq/}\n */\n\nfunction eq(i) {\n  var _a;\n\n  i = +i; // Use the first identity optimization if possible\n\n  if (i === 0 && this.length <= 1) return this;\n  if (i < 0) i = this.length + i;\n  return this._make((_a = this[i]) !== null && _a !== void 0 ? _a : []);\n}\n\nexports.eq = eq;\n\nfunction get(i) {\n  if (i == null) {\n    return this.toArray();\n  }\n\n  return this[i < 0 ? this.length + i : i];\n}\n\nexports.get = get;\n/**\n * Retrieve all the DOM elements contained in the jQuery set as an array.\n *\n * @example\n *\n * ```js\n * $('li').toArray();\n * //=> [ {...}, {...}, {...} ]\n * ```\n *\n * @returns The contained items.\n */\n\nfunction toArray() {\n  return Array.prototype.slice.call(this);\n}\n\nexports.toArray = toArray;\n/**\n * Search for a given element from among the matched elements.\n *\n * @category Traversing\n * @example\n *\n * ```js\n * $('.pear').index();\n * //=> 2 $('.orange').index('li');\n * //=> 1\n * $('.apple').index($('#fruit, li'));\n * //=> 1\n * ```\n *\n * @param selectorOrNeedle - Element to look for.\n * @returns The index of the element.\n * @see {@link https://api.jquery.com/index/}\n */\n\nfunction index(selectorOrNeedle) {\n  var $haystack;\n  var needle;\n\n  if (selectorOrNeedle == null) {\n    $haystack = this.parent().children();\n    needle = this[0];\n  } else if (typeof selectorOrNeedle === 'string') {\n    $haystack = this._make(selectorOrNeedle);\n    needle = this[0];\n  } else {\n    $haystack = this;\n    needle = utils_1.isCheerio(selectorOrNeedle) ? selectorOrNeedle[0] : selectorOrNeedle;\n  }\n\n  return Array.prototype.indexOf.call($haystack, needle);\n}\n\nexports.index = index;\n/**\n * Gets the elements matching the specified range (0-based position).\n *\n * @category Traversing\n * @example\n *\n * ```js\n * $('li').slice(1).eq(0).text();\n * //=> 'Orange'\n *\n * $('li').slice(1, 2).length;\n * //=> 1\n * ```\n *\n * @param start - An position at which the elements begin to be selected. If\n *   negative, it indicates an offset from the end of the set.\n * @param end - An position at which the elements stop being selected. If\n *   negative, it indicates an offset from the end of the set. If omitted, the\n *   range continues until the end of the set.\n * @returns The elements matching the specified range.\n * @see {@link https://api.jquery.com/slice/}\n */\n\nfunction slice(start, end) {\n  return this._make(Array.prototype.slice.call(this, start, end));\n}\n\nexports.slice = slice;\n/**\n * End the most recent filtering operation in the current chain and return the\n * set of matched elements to its previous state.\n *\n * @category Traversing\n * @example\n *\n * ```js\n * $('li').eq(0).end().length;\n * //=> 3\n * ```\n *\n * @returns The previous state of the set of matched elements.\n * @see {@link https://api.jquery.com/end/}\n */\n\nfunction end() {\n  var _a;\n\n  return (_a = this.prevObject) !== null && _a !== void 0 ? _a : this._make([]);\n}\n\nexports.end = end;\n/**\n * Add elements to the set of matched elements.\n *\n * @category Traversing\n * @example\n *\n * ```js\n * $('.apple').add('.orange').length;\n * //=> 2\n * ```\n *\n * @param other - Elements to add.\n * @param context - Optionally the context of the new selection.\n * @returns The combined set.\n * @see {@link https://api.jquery.com/add/}\n */\n\nfunction add(other, context) {\n  var selection = this._make(other, context);\n\n  var contents = uniqueSort(tslib_1.__spreadArray(tslib_1.__spreadArray([], this.get()), selection.get()));\n  return this._make(contents);\n}\n\nexports.add = add;\n/**\n * Add the previous set of elements on the stack to the current set, optionally\n * filtered by a selector.\n *\n * @category Traversing\n * @example\n *\n * ```js\n * $('li').eq(0).addBack('.orange').length;\n * //=> 2\n * ```\n *\n * @param selector - Selector for the elements to add.\n * @returns The combined set.\n * @see {@link https://api.jquery.com/addBack/}\n */\n\nfunction addBack(selector) {\n  return this.prevObject ? this.add(selector ? this.prevObject.filter(selector) : this.prevObject) : this;\n}\n\nexports.addBack = addBack;","map":null,"metadata":{},"sourceType":"script"}