{"ast":null,"code":"/**\n * Utilities for reformatting web3 outputs\n */\nconst BigNumber = require(\"bignumber.js/bignumber\");\n\nconst web3Utils = require(\"web3-utils\");\n/**\n * Converts from string to other number format\n * @param  {String} val    number string returned by web3\n * @param  {String} format name of format to convert to\n * @return {Object|String} converted value\n */\n\n\nconst _convertNumber = function (val, format) {\n  const badFormatMsg = \"Attempting to convert to unknown number format: \".concat(format);\n\n  switch (format) {\n    case \"BigNumber\":\n      return new BigNumber(val);\n\n    case \"BN\":\n      return web3Utils.toBN(val);\n\n    case \"String\":\n      return val;\n\n    default:\n      throw new Error(badFormatMsg);\n  }\n};\n/**\n * Converts arrays of number strings to other number formats\n * @param  {String[]} arr       number string array returned by web3\n * @param  {String}   format    name of format to convert to\n * @return {Object[]|String[]}  array of converted values\n */\n\n\nconst _convertNumberArray = function (arr, format, depth = 0) {\n  if (depth == 0) return arr.map(item => _convertNumber(item, format)); // arr is nested\n\n  return arr.map(item => _convertNumberArray(item, format, depth - 1));\n};\n/**\n * Reformats numbers in the result/result-object of a web3 call.\n * Possible forms of `result` are:\n *   - object (with index keys and optionally, named keys)\n *   - array\n *   - single primitive\n * @param  {String|Object|Array} result      web3 call result\n * @param  {Array}               abiSegment  event params OR .call outputs\n * @return {String|Object|Array} reformatted result\n */\n\n\nconst numbers = function (result, abiSegment) {\n  const format = this.numberFormat;\n  abiSegment.forEach((output, i) => {\n    // output is a number type (uint || int);\n    if (output.type.includes(\"int\")) {\n      // output is an array type\n      if (output.type.includes(\"[\")) {\n        // larger than zero if nested array\n        let depth = output.type.split(\"[\").length - 2; // result is array\n\n        if (Array.isArray(result)) {\n          result = _convertNumberArray(result, format, depth); // result is object\n        } else {\n          // output has name\n          if (output.name.length) {\n            result[output.name] = _convertNumberArray(result[output.name], format, depth);\n          } // output will always have an index key\n\n\n          result[i] = _convertNumberArray(result[i], format, depth);\n        } //\n\n      } else if (typeof result === \"object\") {\n        // output has name\n        if (output.name.length) {\n          result[output.name] = _convertNumber(result[output.name], format);\n        } // output will always have an index key\n\n\n        result[i] = _convertNumber(result[i], format);\n      } else {\n        result = _convertNumber(result, format);\n      }\n    }\n  });\n  return result;\n};\n\nmodule.exports = {\n  numbers: numbers\n};","map":null,"metadata":{},"sourceType":"script"}