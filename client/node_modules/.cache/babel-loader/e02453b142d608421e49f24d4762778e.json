{"ast":null,"code":"import { array } from './array.js';\nimport { convertFromNext, convertToNext } from '../check/arbitrary/definition/Converters.js';\nimport { oneof } from './oneof.js';\nimport { hexaString } from './hexaString.js';\nimport { tuple } from './tuple.js';\nimport { ipV4 } from './ipV4.js';\nimport { fullySpecifiedMapper, fullySpecifiedUnmapper, onlyTrailingMapper, onlyTrailingUnmapper, multiTrailingMapper, multiTrailingUnmapper, multiTrailingMapperOne, multiTrailingUnmapperOne, singleTrailingMapper, singleTrailingUnmapper, noTrailingMapper, noTrailingUnmapper } from './_internals/mappers/EntitiesToIPv6.js';\n\nfunction h16sTol32Mapper([a, b]) {\n  return \"\".concat(a, \":\").concat(b);\n}\n\nfunction h16sTol32Unmapper(value) {\n  if (typeof value !== 'string') throw new Error('Invalid type');\n  if (!value.includes(':')) throw new Error('Invalid value');\n  return value.split(':', 2);\n}\n\nexport function ipV6() {\n  const h16Arb = hexaString({\n    minLength: 1,\n    maxLength: 4,\n    size: 'max'\n  });\n  const ls32Arb = oneof(convertFromNext(convertToNext(tuple(h16Arb, h16Arb)).map(h16sTol32Mapper, h16sTol32Unmapper)), ipV4());\n  return oneof(convertFromNext(convertToNext(tuple(array(h16Arb, {\n    minLength: 6,\n    maxLength: 6,\n    size: 'max'\n  }), ls32Arb)).map(fullySpecifiedMapper, fullySpecifiedUnmapper)), convertFromNext(convertToNext(tuple(array(h16Arb, {\n    minLength: 5,\n    maxLength: 5,\n    size: 'max'\n  }), ls32Arb)).map(onlyTrailingMapper, onlyTrailingUnmapper)), convertFromNext(convertToNext(tuple(array(h16Arb, {\n    minLength: 0,\n    maxLength: 1,\n    size: 'max'\n  }), array(h16Arb, {\n    minLength: 4,\n    maxLength: 4,\n    size: 'max'\n  }), ls32Arb)).map(multiTrailingMapper, multiTrailingUnmapper)), convertFromNext(convertToNext(tuple(array(h16Arb, {\n    minLength: 0,\n    maxLength: 2,\n    size: 'max'\n  }), array(h16Arb, {\n    minLength: 3,\n    maxLength: 3,\n    size: 'max'\n  }), ls32Arb)).map(multiTrailingMapper, multiTrailingUnmapper)), convertFromNext(convertToNext(tuple(array(h16Arb, {\n    minLength: 0,\n    maxLength: 3,\n    size: 'max'\n  }), array(h16Arb, {\n    minLength: 2,\n    maxLength: 2,\n    size: 'max'\n  }), ls32Arb)).map(multiTrailingMapper, multiTrailingUnmapper)), convertFromNext(convertToNext(tuple(array(h16Arb, {\n    minLength: 0,\n    maxLength: 4,\n    size: 'max'\n  }), h16Arb, ls32Arb)).map(multiTrailingMapperOne, multiTrailingUnmapperOne)), convertFromNext(convertToNext(tuple(array(h16Arb, {\n    minLength: 0,\n    maxLength: 5,\n    size: 'max'\n  }), ls32Arb)).map(singleTrailingMapper, singleTrailingUnmapper)), convertFromNext(convertToNext(tuple(array(h16Arb, {\n    minLength: 0,\n    maxLength: 6,\n    size: 'max'\n  }), h16Arb)).map(singleTrailingMapper, singleTrailingUnmapper)), convertFromNext(convertToNext(tuple(array(h16Arb, {\n    minLength: 0,\n    maxLength: 7,\n    size: 'max'\n  }))).map(noTrailingMapper, noTrailingUnmapper)));\n}","map":null,"metadata":{},"sourceType":"module"}