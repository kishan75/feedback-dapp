{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { useEventCallback } from '@mui/material/utils';\nimport { useGridApiMethod } from '../../utils/useGridApiMethod';\nimport { GridRowModes, GridEditModes, GridCellModes } from '../../../models/gridEditRowModel';\nimport { useGridSelector } from '../../utils/useGridSelector';\nimport { gridColumnFieldsSelector } from '../columns/gridColumnsSelector';\nimport { gridEditRowsStateSelector } from './gridEditRowsSelector';\nimport { GridEvents } from '../../../models/events/gridEvents';\nimport { gridFocusCellSelector } from '../focus/gridFocusStateSelector';\nimport { useGridApiOptionHandler, useGridApiEventHandler } from '../../utils/useGridApiEventHandler';\nexport const useGridRowEditing = (apiRef, props) => {\n  var _props$experimentalFe2, _props$experimentalFe4;\n\n  const focusTimeout = React.useRef(null);\n  const nextFocusedCell = React.useRef(null);\n  const columnFields = useGridSelector(apiRef, gridColumnFieldsSelector);\n\n  const buildCallback = callback => (...args) => {\n    if (props.editMode === GridEditModes.Row) {\n      callback(...args);\n    }\n  };\n\n  const setRowMode = React.useCallback((id, mode) => {\n    if (mode === apiRef.current.getRowMode(id)) {\n      return;\n    }\n\n    apiRef.current.setState(state => {\n      const newEditRowsState = _extends({}, state.editRows);\n\n      if (mode === GridRowModes.Edit) {\n        newEditRowsState[id] = {};\n        columnFields.forEach(field => {\n          const cellParams = apiRef.current.getCellParams(id, field);\n\n          if (cellParams.isEditable) {\n            newEditRowsState[id][field] = {\n              value: cellParams.value\n            };\n          }\n        });\n      } else {\n        delete newEditRowsState[id];\n      }\n\n      return _extends({}, state, {\n        editRows: newEditRowsState\n      });\n    });\n    apiRef.current.forceUpdate();\n  }, [apiRef, columnFields]);\n  const getRowMode = React.useCallback(id => {\n    if (props.editMode === GridEditModes.Cell) {\n      return GridRowModes.View;\n    }\n\n    const editRowsState = gridEditRowsStateSelector(apiRef.current.state);\n    return editRowsState[id] ? GridRowModes.Edit : GridRowModes.View;\n  }, [apiRef, props.editMode]);\n  const commitRowChange = React.useCallback((id, event = {}) => {\n    var _props$experimentalFe;\n\n    if (props.editMode === GridEditModes.Cell) {\n      throw new Error(\"MUI: You can't commit changes when the edit mode is 'cell'.\");\n    }\n\n    apiRef.current.unstable_runPendingEditCellValueChangeDebounce(id);\n    const model = apiRef.current.getEditRowsModel();\n    const editRowProps = model[id];\n\n    if (!editRowProps) {\n      throw new Error(\"MUI: Row at id: \".concat(id, \" is not being edited.\"));\n    }\n\n    if ((_props$experimentalFe = props.experimentalFeatures) != null && _props$experimentalFe.preventCommitWhileValidating) {\n      const isValid = Object.keys(editRowProps).reduce((acc, field) => {\n        return acc && !editRowProps[field].isValidating && !editRowProps[field].error;\n      }, true);\n\n      if (!isValid) {\n        return false;\n      }\n    }\n\n    const hasFieldWithError = Object.values(editRowProps).some(value => !!value.error);\n\n    if (hasFieldWithError) {\n      return false;\n    }\n\n    const fieldsWithValidator = Object.keys(editRowProps).filter(field => {\n      const column = apiRef.current.getColumn(field);\n      return typeof column.preProcessEditCellProps === 'function';\n    });\n\n    if (fieldsWithValidator.length > 0) {\n      const row = apiRef.current.getRow(id);\n      const validatorErrors = fieldsWithValidator.map(async field => {\n        const column = apiRef.current.getColumn(field);\n        const newEditCellProps = await Promise.resolve(column.preProcessEditCellProps({\n          id,\n          row,\n          props: editRowProps[field]\n        }));\n        apiRef.current.unstable_setEditCellProps({\n          id,\n          field,\n          props: newEditCellProps\n        });\n        return newEditCellProps.error;\n      });\n      return Promise.all(validatorErrors).then(errors => {\n        if (errors.some(error => !!error)) {\n          return false;\n        }\n\n        apiRef.current.publishEvent(GridEvents.rowEditCommit, id, event);\n        return true;\n      });\n    }\n\n    apiRef.current.publishEvent(GridEvents.rowEditCommit, id, event);\n    return true;\n  }, [apiRef, props.editMode, (_props$experimentalFe2 = props.experimentalFeatures) == null ? void 0 : _props$experimentalFe2.preventCommitWhileValidating]);\n  const setRowEditingEditCellValue = React.useCallback(params => {\n    const model = apiRef.current.getEditRowsModel();\n    const editRow = model[params.id];\n    const row = apiRef.current.getRow(params.id);\n    let isValid = true;\n    return new Promise(resolve => {\n      Object.keys(editRow).forEach(async field => {\n        const column = apiRef.current.getColumn(field);\n        let editCellProps = field === params.field ? {\n          value: params.value\n        } : editRow[field]; // setEditCellProps runs the value parser and returns the updated props\n\n        editCellProps = apiRef.current.unstable_setEditCellProps({\n          id: params.id,\n          field,\n          props: _extends({}, editCellProps, {\n            isValidating: true\n          })\n        });\n\n        if (column.preProcessEditCellProps) {\n          editCellProps = await Promise.resolve(column.preProcessEditCellProps({\n            id: params.id,\n            row,\n            props: _extends({}, editCellProps, {\n              value: field === params.field ? apiRef.current.unstable_parseValue(params.id, field, params.value) : editCellProps.value\n            })\n          }));\n        }\n\n        if (editCellProps.error) {\n          isValid = false;\n        }\n\n        apiRef.current.unstable_setEditCellProps({\n          id: params.id,\n          field,\n          props: _extends({}, editCellProps, {\n            isValidating: false\n          })\n        });\n      });\n      resolve(isValid);\n    });\n  }, [apiRef]);\n  const rowEditingApi = {\n    setRowMode,\n    getRowMode,\n    commitRowChange,\n    unstable_setRowEditingEditCellValue: setRowEditingEditCellValue\n  };\n  useGridApiMethod(apiRef, rowEditingApi, 'EditRowApi');\n  const handleCellKeyDown = React.useCallback(async (params, event) => {\n    const cellMode = params.cellMode,\n          isEditable = params.isEditable;\n\n    if (!isEditable) {\n      return;\n    }\n\n    const isEditMode = cellMode === GridCellModes.Edit;\n    const rowParams = apiRef.current.getRowParams(params.id);\n\n    if (isEditMode) {\n      if (event.key === 'Enter') {\n        var _props$experimentalFe3; // TODO: check the return before firing GridEvents.rowEditStop\n        // On cell editing, it won't exits the edit mode with error\n\n\n        const isValid = await apiRef.current.commitRowChange(params.id);\n\n        if (!isValid && (_props$experimentalFe3 = props.experimentalFeatures) != null && _props$experimentalFe3.preventCommitWhileValidating) {\n          return;\n        }\n\n        apiRef.current.publishEvent(GridEvents.rowEditStop, rowParams, event);\n      } else if (event.key === 'Escape') {\n        apiRef.current.publishEvent(GridEvents.rowEditStop, rowParams, event);\n      }\n    } else if (event.key === 'Enter') {\n      apiRef.current.publishEvent(GridEvents.rowEditStart, rowParams, event);\n    }\n  }, [apiRef, (_props$experimentalFe4 = props.experimentalFeatures) == null ? void 0 : _props$experimentalFe4.preventCommitWhileValidating]);\n  const handleCellDoubleClick = React.useCallback((params, event) => {\n    if (!params.isEditable) {\n      return;\n    }\n\n    const rowParams = apiRef.current.getRowParams(params.id);\n    apiRef.current.publishEvent(GridEvents.rowEditStart, rowParams, event);\n  }, [apiRef]);\n  const handleEditCellPropsChange = React.useCallback(params => {\n    const row = apiRef.current.getRow(params.id);\n    const model = apiRef.current.getEditRowsModel();\n    const editRow = model[params.id];\n    Object.keys(editRow).forEach(async field => {\n      const column = apiRef.current.getColumn(field);\n\n      if (column.preProcessEditCellProps) {\n        const editCellProps = field === params.field ? params.props : editRow[field];\n        const newEditCellProps = await Promise.resolve(column.preProcessEditCellProps({\n          id: params.id,\n          row,\n          props: editCellProps\n        }));\n        apiRef.current.unstable_setEditCellProps({\n          id: params.id,\n          field,\n          props: newEditCellProps\n        });\n      } else if (field === params.field) {\n        apiRef.current.unstable_setEditCellProps(params);\n      }\n    });\n  }, [apiRef]);\n  const handleRowEditStart = React.useCallback(params => {\n    apiRef.current.setRowMode(params.id, GridRowModes.Edit);\n  }, [apiRef]);\n  const handleRowEditStop = React.useCallback((params, event) => {\n    apiRef.current.setRowMode(params.id, GridRowModes.View);\n\n    if (event.key === 'Enter') {\n      apiRef.current.publishEvent(GridEvents.cellNavigationKeyDown, params, event);\n    }\n  }, [apiRef]);\n  const handleRowEditCommit = React.useCallback(id => {\n    const model = apiRef.current.getEditRowsModel();\n    const editRow = model[id];\n\n    if (!editRow) {\n      throw new Error(\"MUI: Row at id: \".concat(id, \" is not being edited.\"));\n    }\n\n    const row = apiRef.current.getRow(id);\n\n    if (row) {\n      let rowUpdate = _extends({}, row);\n\n      Object.keys(editRow).forEach(field => {\n        const column = apiRef.current.getColumn(field);\n        const value = editRow[field].value;\n\n        if (column.valueSetter) {\n          rowUpdate = column.valueSetter({\n            row: rowUpdate,\n            value\n          });\n        } else {\n          rowUpdate[field] = value;\n        }\n      });\n      apiRef.current.updateRows([rowUpdate]);\n    }\n  }, [apiRef]);\n  const handleCellFocusIn = React.useCallback(params => {\n    nextFocusedCell.current = params;\n  }, []);\n\n  const commitPropsAndExit = async (params, event) => {\n    if (params.cellMode === GridCellModes.View) {\n      return;\n    }\n\n    nextFocusedCell.current = null;\n    focusTimeout.current = setTimeout(async () => {\n      var _nextFocusedCell$curr;\n\n      if (((_nextFocusedCell$curr = nextFocusedCell.current) == null ? void 0 : _nextFocusedCell$curr.id) !== params.id) {\n        await apiRef.current.commitRowChange(params.id, event);\n        const rowParams = apiRef.current.getRowParams(params.id);\n        apiRef.current.publishEvent(GridEvents.rowEditStop, rowParams, event);\n      }\n    });\n  };\n\n  const handleCellFocusOut = useEventCallback((params, event) => {\n    commitPropsAndExit(params, event);\n  });\n  const handleColumnHeaderDragStart = useEventCallback(() => {\n    const cell = gridFocusCellSelector(apiRef);\n\n    if (!cell) {\n      return;\n    }\n\n    const params = apiRef.current.getCellParams(cell.id, cell.field);\n    commitPropsAndExit(params, {});\n  });\n  useGridApiEventHandler(apiRef, GridEvents.cellKeyDown, buildCallback(handleCellKeyDown));\n  useGridApiEventHandler(apiRef, GridEvents.cellDoubleClick, buildCallback(handleCellDoubleClick));\n  useGridApiEventHandler(apiRef, GridEvents.editCellPropsChange, buildCallback(handleEditCellPropsChange));\n  useGridApiEventHandler(apiRef, GridEvents.rowEditStart, buildCallback(handleRowEditStart));\n  useGridApiEventHandler(apiRef, GridEvents.rowEditStop, buildCallback(handleRowEditStop));\n  useGridApiEventHandler(apiRef, GridEvents.rowEditCommit, buildCallback(handleRowEditCommit));\n  useGridApiEventHandler(apiRef, GridEvents.cellFocusIn, buildCallback(handleCellFocusIn));\n  useGridApiEventHandler(apiRef, GridEvents.cellFocusOut, buildCallback(handleCellFocusOut));\n  useGridApiEventHandler(apiRef, GridEvents.columnHeaderDragStart, buildCallback(handleColumnHeaderDragStart));\n  useGridApiOptionHandler(apiRef, GridEvents.rowEditCommit, props.onRowEditCommit);\n  useGridApiOptionHandler(apiRef, GridEvents.rowEditStart, props.onRowEditStart);\n  useGridApiOptionHandler(apiRef, GridEvents.rowEditStop, props.onRowEditStop);\n};","map":null,"metadata":{},"sourceType":"module"}