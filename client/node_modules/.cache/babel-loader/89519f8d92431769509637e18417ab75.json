{"ast":null,"code":"'use strict'; // detect either spaces or tabs but not both to properly handle tabs\n// for indentation and spaces for alignment\n\nconst INDENT_RE = /^(?:( )+|\\t+)/;\n\nfunction getMostUsed(indents) {\n  let result = 0;\n  let maxUsed = 0;\n  let maxWeight = 0;\n\n  for (const entry of indents) {\n    // TODO: use destructuring when targeting Node.js 6\n    const key = entry[0];\n    const val = entry[1];\n    const u = val[0];\n    const w = val[1];\n\n    if (u > maxUsed || u === maxUsed && w > maxWeight) {\n      maxUsed = u;\n      maxWeight = w;\n      result = Number(key);\n    }\n  }\n\n  return result;\n}\n\nmodule.exports = str => {\n  if (typeof str !== 'string') {\n    throw new TypeError('Expected a string');\n  } // used to see if tabs or spaces are the most used\n\n\n  let tabs = 0;\n  let spaces = 0; // remember the size of previous line's indentation\n\n  let prev = 0; // remember how many indents/unindents as occurred for a given size\n  // and how much lines follow a given indentation\n  //\n  // indents = {\n  //    3: [1, 0],\n  //    4: [1, 5],\n  //    5: [1, 0],\n  //   12: [1, 0],\n  // }\n\n  const indents = new Map(); // pointer to the array of last used indent\n\n  let current; // whether the last action was an indent (opposed to an unindent)\n\n  let isIndent;\n\n  for (const line of str.split(/\\n/g)) {\n    if (!line) {\n      // ignore empty lines\n      continue;\n    }\n\n    let indent;\n    const matches = line.match(INDENT_RE);\n\n    if (matches) {\n      indent = matches[0].length;\n\n      if (matches[1]) {\n        spaces++;\n      } else {\n        tabs++;\n      }\n    } else {\n      indent = 0;\n    }\n\n    const diff = indent - prev;\n    prev = indent;\n\n    if (diff) {\n      // an indent or unindent has been detected\n      isIndent = diff > 0;\n      current = indents.get(isIndent ? diff : -diff);\n\n      if (current) {\n        current[0]++;\n      } else {\n        current = [1, 0];\n        indents.set(diff, current);\n      }\n    } else if (current) {\n      // if the last action was an indent, increment the weight\n      current[1] += Number(isIndent);\n    }\n  }\n\n  const amount = getMostUsed(indents);\n  let type;\n  let indent;\n\n  if (!amount) {\n    type = null;\n    indent = '';\n  } else if (spaces >= tabs) {\n    type = 'space';\n    indent = ' '.repeat(amount);\n  } else {\n    type = 'tab';\n    indent = '\\t'.repeat(amount);\n  }\n\n  return {\n    amount,\n    type,\n    indent\n  };\n};","map":null,"metadata":{},"sourceType":"script"}