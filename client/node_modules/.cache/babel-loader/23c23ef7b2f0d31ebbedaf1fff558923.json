{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\n\nvar _LastPageIcon, _FirstPageIcon, _KeyboardArrowRight, _KeyboardArrowLeft, _KeyboardArrowLeft2, _KeyboardArrowRight2, _FirstPageIcon2, _LastPageIcon2;\n\nconst _excluded = [\"backIconButtonProps\", \"count\", \"getItemAriaLabel\", \"nextIconButtonProps\", \"onPageChange\", \"page\", \"rowsPerPage\", \"showFirstButton\", \"showLastButton\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport KeyboardArrowLeft from '../internal/svg-icons/KeyboardArrowLeft';\nimport KeyboardArrowRight from '../internal/svg-icons/KeyboardArrowRight';\nimport useTheme from '../styles/useTheme';\nimport IconButton from '../IconButton';\nimport LastPageIcon from '../internal/svg-icons/LastPage';\nimport FirstPageIcon from '../internal/svg-icons/FirstPage';\n/**\n * @ignore - internal component.\n */\n\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nconst TablePaginationActions =\n/*#__PURE__*/\nReact.forwardRef(function TablePaginationActions(props, ref) {\n  const backIconButtonProps = props.backIconButtonProps,\n        count = props.count,\n        getItemAriaLabel = props.getItemAriaLabel,\n        nextIconButtonProps = props.nextIconButtonProps,\n        onPageChange = props.onPageChange,\n        page = props.page,\n        rowsPerPage = props.rowsPerPage,\n        showFirstButton = props.showFirstButton,\n        showLastButton = props.showLastButton,\n        other = _objectWithoutPropertiesLoose(props, _excluded);\n\n  const theme = useTheme();\n\n  const handleFirstPageButtonClick = event => {\n    onPageChange(event, 0);\n  };\n\n  const handleBackButtonClick = event => {\n    onPageChange(event, page - 1);\n  };\n\n  const handleNextButtonClick = event => {\n    onPageChange(event, page + 1);\n  };\n\n  const handleLastPageButtonClick = event => {\n    onPageChange(event, Math.max(0, Math.ceil(count / rowsPerPage) - 1));\n  };\n\n  return (\n    /*#__PURE__*/\n    _jsxs(\"div\", _extends({\n      ref: ref\n    }, other, {\n      children: [showFirstButton &&\n      /*#__PURE__*/\n      _jsx(IconButton, {\n        onClick: handleFirstPageButtonClick,\n        disabled: page === 0,\n        \"aria-label\": getItemAriaLabel('first', page),\n        title: getItemAriaLabel('first', page),\n        children: theme.direction === 'rtl' ? _LastPageIcon || (_LastPageIcon =\n        /*#__PURE__*/\n        _jsx(LastPageIcon, {})) : _FirstPageIcon || (_FirstPageIcon =\n        /*#__PURE__*/\n        _jsx(FirstPageIcon, {}))\n      }),\n      /*#__PURE__*/\n      _jsx(IconButton, _extends({\n        onClick: handleBackButtonClick,\n        disabled: page === 0,\n        color: \"inherit\",\n        \"aria-label\": getItemAriaLabel('previous', page),\n        title: getItemAriaLabel('previous', page)\n      }, backIconButtonProps, {\n        children: theme.direction === 'rtl' ? _KeyboardArrowRight || (_KeyboardArrowRight =\n        /*#__PURE__*/\n        _jsx(KeyboardArrowRight, {})) : _KeyboardArrowLeft || (_KeyboardArrowLeft =\n        /*#__PURE__*/\n        _jsx(KeyboardArrowLeft, {}))\n      })),\n      /*#__PURE__*/\n      _jsx(IconButton, _extends({\n        onClick: handleNextButtonClick,\n        disabled: count !== -1 ? page >= Math.ceil(count / rowsPerPage) - 1 : false,\n        color: \"inherit\",\n        \"aria-label\": getItemAriaLabel('next', page),\n        title: getItemAriaLabel('next', page)\n      }, nextIconButtonProps, {\n        children: theme.direction === 'rtl' ? _KeyboardArrowLeft2 || (_KeyboardArrowLeft2 =\n        /*#__PURE__*/\n        _jsx(KeyboardArrowLeft, {})) : _KeyboardArrowRight2 || (_KeyboardArrowRight2 =\n        /*#__PURE__*/\n        _jsx(KeyboardArrowRight, {}))\n      })), showLastButton &&\n      /*#__PURE__*/\n      _jsx(IconButton, {\n        onClick: handleLastPageButtonClick,\n        disabled: page >= Math.ceil(count / rowsPerPage) - 1,\n        \"aria-label\": getItemAriaLabel('last', page),\n        title: getItemAriaLabel('last', page),\n        children: theme.direction === 'rtl' ? _FirstPageIcon2 || (_FirstPageIcon2 =\n        /*#__PURE__*/\n        _jsx(FirstPageIcon, {})) : _LastPageIcon2 || (_LastPageIcon2 =\n        /*#__PURE__*/\n        _jsx(LastPageIcon, {}))\n      })]\n    }))\n  );\n});\nprocess.env.NODE_ENV !== \"production\" ? TablePaginationActions.propTypes = {\n  /**\n   * Props applied to the back arrow [`IconButton`](/api/icon-button/) element.\n   */\n  backIconButtonProps: PropTypes.object,\n\n  /**\n   * The total number of rows.\n   */\n  count: PropTypes.number.isRequired,\n\n  /**\n   * Accepts a function which returns a string value that provides a user-friendly name for the current page.\n   *\n   * For localization purposes, you can use the provided [translations](/guides/localization/).\n   *\n   * @param {string} type The link or button type to format ('page' | 'first' | 'last' | 'next' | 'previous'). Defaults to 'page'.\n   * @param {number} page The page number to format.\n   * @returns {string}\n   */\n  getItemAriaLabel: PropTypes.func.isRequired,\n\n  /**\n   * Props applied to the next arrow [`IconButton`](/api/icon-button/) element.\n   */\n  nextIconButtonProps: PropTypes.object,\n\n  /**\n   * Callback fired when the page is changed.\n   *\n   * @param {object} event The event source of the callback.\n   * @param {number} page The page selected.\n   */\n  onPageChange: PropTypes.func.isRequired,\n\n  /**\n   * The zero-based index of the current page.\n   */\n  page: PropTypes.number.isRequired,\n\n  /**\n   * The number of rows per page.\n   */\n  rowsPerPage: PropTypes.number.isRequired,\n\n  /**\n   * If `true`, show the first-page button.\n   */\n  showFirstButton: PropTypes.bool.isRequired,\n\n  /**\n   * If `true`, show the last-page button.\n   */\n  showLastButton: PropTypes.bool.isRequired\n} : void 0;\nexport default TablePaginationActions;","map":null,"metadata":{},"sourceType":"module"}