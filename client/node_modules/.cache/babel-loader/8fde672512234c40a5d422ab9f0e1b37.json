{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nconst _excluded = [\"item\", \"applyValue\", \"type\", \"apiRef\", \"focusElementRef\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport Autocomplete, { createFilterOptions } from '@mui/material/Autocomplete';\nimport Chip from '@mui/material/Chip';\nimport TextField from '@mui/material/TextField';\nimport { unstable_useId as useId } from '@mui/material/utils';\nimport { getValueFromOption } from './filterPanelUtils';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nconst getSingleSelectOptionFormatter = ({\n  valueFormatter,\n  field\n}, api) => option => {\n  if (typeof option === 'object') {\n    return option.label;\n  }\n\n  return valueFormatter && option !== '' ? valueFormatter({\n    value: option,\n    field,\n    api\n  }) : option;\n};\n\nconst isOptionEqualToValue = (option, value) => getValueFromOption(option) === getValueFromOption(value);\n\nconst filter = createFilterOptions();\n\nfunction GridFilterInputMultipleSingleSelect(props) {\n  const item = props.item,\n        applyValue = props.applyValue,\n        apiRef = props.apiRef,\n        focusElementRef = props.focusElementRef,\n        other = _objectWithoutPropertiesLoose(props, _excluded);\n\n  const id = useId();\n  const resolvedColumn = item.columnField ? apiRef.current.getColumn(item.columnField) : null;\n  const resolvedValueOptions = React.useMemo(() => {\n    return typeof resolvedColumn.valueOptions === 'function' ? resolvedColumn.valueOptions({\n      field: resolvedColumn.field\n    }) : resolvedColumn.valueOptions;\n  }, [resolvedColumn]);\n  const resolvedFormattedValueOptions = React.useMemo(() => {\n    return resolvedValueOptions.map(getValueFromOption);\n  }, [resolvedValueOptions]);\n  const filterValueOptionFormatter = getSingleSelectOptionFormatter(apiRef.current.getColumn(item.columnField), apiRef.current); // The value is computed from the item.value and used directly\n  // If it was done by a useEffect/useSate, the Autocomplete could receive incoherent value and options\n\n  const filterValues = React.useMemo(() => {\n    if (!Array.isArray(item.value)) {\n      return [];\n    }\n\n    if (resolvedValueOptions !== undefined) {\n      const itemValueIndexes = item.value.map(element => {\n        // get the index matching between values and valueoptions\n        const formattedElement = getValueFromOption(element);\n        const index = resolvedFormattedValueOptions.findIndex(formatedOption => formatedOption === formattedElement);\n        return index;\n      });\n      return itemValueIndexes.filter(index => index >= 0).map(index => resolvedValueOptions[index]);\n    }\n\n    return item.value;\n  }, [item.value, resolvedValueOptions, resolvedFormattedValueOptions]);\n  React.useEffect(() => {\n    if (!Array.isArray(item.value) || filterValues.length !== item.value.length) {\n      // update the state if the filter value has been cleaned by the component\n      applyValue(_extends({}, item, {\n        value: filterValues.map(getValueFromOption)\n      }));\n    }\n  }, [item, filterValues, applyValue]);\n  const handleChange = React.useCallback((event, value) => {\n    applyValue(_extends({}, item, {\n      value: [...value.map(getValueFromOption)]\n    }));\n  }, [applyValue, item]);\n  return (\n    /*#__PURE__*/\n    _jsx(Autocomplete, _extends({\n      multiple: true,\n      freeSolo: false,\n      limitTags: 1,\n      options: resolvedValueOptions,\n      isOptionEqualToValue: isOptionEqualToValue,\n      filterOptions: filter,\n      id: id,\n      value: filterValues,\n      onChange: handleChange,\n      renderTags: (value, getTagProps) => value.map((option, index) =>\n      /*#__PURE__*/\n      _jsx(Chip, _extends({\n        variant: \"outlined\",\n        size: \"small\",\n        label: filterValueOptionFormatter(option)\n      }, getTagProps({\n        index\n      })))),\n      renderInput: params =>\n      /*#__PURE__*/\n      _jsx(TextField, _extends({}, params, {\n        label: apiRef.current.getLocaleText('filterPanelInputLabel'),\n        placeholder: apiRef.current.getLocaleText('filterPanelInputPlaceholder'),\n        InputLabelProps: _extends({}, params.InputLabelProps, {\n          shrink: true\n        }),\n        inputRef: focusElementRef,\n        type: 'singleSelect',\n        variant: \"standard\"\n      }))\n    }, other))\n  );\n}\n\nprocess.env.NODE_ENV !== \"production\" ? GridFilterInputMultipleSingleSelect.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // | To update them edit the TypeScript types and run \"yarn proptypes\"  |\n  // ----------------------------------------------------------------------\n  apiRef: PropTypes.any.isRequired,\n  applyValue: PropTypes.func.isRequired,\n  focusElementRef: PropTypes\n  /* @typescript-to-proptypes-ignore */\n  .oneOfType([PropTypes.func, PropTypes.object]),\n  item: PropTypes.shape({\n    columnField: PropTypes.string.isRequired,\n    id: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n    operatorValue: PropTypes.string,\n    value: PropTypes.any\n  }).isRequired,\n  type: PropTypes.oneOf(['singleSelect'])\n} : void 0;\nexport { GridFilterInputMultipleSingleSelect };","map":null,"metadata":{},"sourceType":"module"}