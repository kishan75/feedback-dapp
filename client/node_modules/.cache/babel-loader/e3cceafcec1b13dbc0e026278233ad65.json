{"ast":null,"code":"\"use strict\";\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  Object.defineProperty(o, k2, {\n    enumerable: true,\n    get: function () {\n      return m[k];\n    }\n  });\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n\n  __setModuleDefault(result, mod);\n\n  return result;\n};\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.decodeString = exports.decodeBytes = void 0;\n\nconst debug_1 = __importDefault(require(\"debug\"));\n\nconst debug = debug_1.default(\"codec:bytes:decode\");\n\nconst read_1 = __importDefault(require(\"../../read\"));\n\nconst Conversion = __importStar(require(\"../../conversion\"));\n\nconst errors_1 = require(\"../../errors\");\n\nconst utf8_1 = __importDefault(require(\"utf8\"));\n\nfunction* decodeBytes(dataType, pointer, info, options = {}) {\n  const state = info.state;\n  const strict = options.strictAbiMode; //if this is undefined it'll still be falsy so OK\n\n  let bytes;\n\n  try {\n    bytes = yield* read_1.default(pointer, state);\n  } catch (error) {\n    debug(\"segfault, pointer %o, state: %O\", pointer, state);\n    return errors_1.handleDecodingError(dataType, error, strict);\n  }\n\n  debug(\"type %O\", dataType);\n  debug(\"pointer %o\", pointer); //note: this function does not check padding\n\n  switch (dataType.typeClass) {\n    case \"bytes\":\n      //we assume this is a dynamic bytestring!\n      //static ones should go to decodeBasic!\n      return {\n        type: dataType,\n        kind: \"value\",\n        value: {\n          asHex: Conversion.toHexString(bytes)\n        }\n      };\n\n    case \"string\":\n      return {\n        type: dataType,\n        kind: \"value\",\n        value: decodeString(bytes)\n      };\n  }\n}\n\nexports.decodeBytes = decodeBytes;\n\nfunction decodeString(bytes) {\n  //the following line takes our UTF-8 string... and interprets each byte\n  //as a UTF-16 bytepair.  Yikes!  Fortunately, we have a library to repair that.\n  let badlyEncodedString = String.fromCharCode.apply(undefined, bytes);\n\n  try {\n    //this will throw an error if we have malformed UTF-8\n    let correctlyEncodedString = utf8_1.default.decode(badlyEncodedString); //NOTE: we don't use node's builtin Buffer class to do the UTF-8 decoding\n    //here, because that handles malformed UTF-8 by means of replacement characters\n    //(U+FFFD).  That loses information.  So we use the utf8 package instead,\n    //and... well, see the catch block below.\n\n    return {\n      kind: \"valid\",\n      asString: correctlyEncodedString\n    };\n  } catch (_a) {\n    //we're going to ignore the precise error and just assume it's because\n    //the string was malformed (what else could it be?)\n    let hexString = Conversion.toHexString(bytes);\n    return {\n      kind: \"malformed\",\n      asHex: hexString\n    };\n  }\n}\n\nexports.decodeString = decodeString;","map":null,"metadata":{},"sourceType":"script"}