{"ast":null,"code":"\"use strict\";\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  Object.defineProperty(o, k2, {\n    enumerable: true,\n    get: function () {\n      return m[k];\n    }\n  });\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n\n  __setModuleDefault(result, mod);\n\n  return result;\n};\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.decodeMagic = exports.decodeSpecial = void 0;\n\nconst debug_1 = __importDefault(require(\"debug\"));\n\nconst debug = debug_1.default(\"codec:special:decode\");\n\nconst Basic = __importStar(require(\"../../basic\"));\n\nconst Bytes = __importStar(require(\"../../bytes\"));\n\nconst Compiler = __importStar(require(\"../../compiler\"));\n\nconst Evm = __importStar(require(\"../../evm\"));\n\nfunction* decodeSpecial(dataType, pointer, info) {\n  if (dataType.typeClass === \"magic\") {\n    return yield* decodeMagic(dataType, pointer, info);\n  } else {\n    return yield* Basic.Decode.decodeBasic(dataType, pointer, info);\n  }\n}\n\nexports.decodeSpecial = decodeSpecial;\n\nfunction* decodeMagic(dataType, pointer, info) {\n  let state = info.state;\n\n  switch (pointer.special) {\n    case \"msg\":\n      return {\n        type: dataType,\n        kind: \"value\",\n        value: {\n          data: yield* Bytes.Decode.decodeBytes({\n            typeClass: \"bytes\",\n            kind: \"dynamic\",\n            location: \"calldata\"\n          }, {\n            location: \"calldata\",\n            start: 0,\n            length: state.calldata.length\n          }, info),\n          sig: yield* Basic.Decode.decodeBasic({\n            typeClass: \"bytes\",\n            kind: \"static\",\n            length: Evm.Utils.SELECTOR_SIZE\n          }, {\n            location: \"calldata\",\n            start: 0,\n            length: Evm.Utils.SELECTOR_SIZE\n          }, info),\n          sender: yield* Basic.Decode.decodeBasic(senderType(info.currentContext.compiler), {\n            location: \"special\",\n            special: \"sender\"\n          }, info),\n          value: yield* Basic.Decode.decodeBasic({\n            typeClass: \"uint\",\n            bits: 256\n          }, {\n            location: \"special\",\n            special: \"value\"\n          }, info)\n        }\n      };\n\n    case \"tx\":\n      return {\n        type: dataType,\n        kind: \"value\",\n        value: {\n          origin: yield* Basic.Decode.decodeBasic(senderType(info.currentContext.compiler), {\n            location: \"special\",\n            special: \"origin\"\n          }, info),\n          gasprice: yield* Basic.Decode.decodeBasic({\n            typeClass: \"uint\",\n            bits: 256\n          }, {\n            location: \"special\",\n            special: \"gasprice\"\n          }, info)\n        }\n      };\n\n    case \"block\":\n      let block = {\n        coinbase: yield* Basic.Decode.decodeBasic(coinbaseType(info.currentContext.compiler), {\n          location: \"special\",\n          special: \"coinbase\"\n        }, info)\n      }; //the other ones are all uint's, so let's handle them all at once; due to\n      //the lack of generator arrow functions, we do it by mutating block\n\n      const variables = [\"difficulty\", \"gaslimit\", \"number\", \"timestamp\"];\n\n      if (solidityVersionHasChainId(info.currentContext.compiler)) {\n        variables.push(\"chainid\");\n      }\n\n      if (solidityVersionHasBaseFee(info.currentContext.compiler)) {\n        variables.push(\"basefee\");\n      }\n\n      for (let variable of variables) {\n        block[variable] = yield* Basic.Decode.decodeBasic({\n          typeClass: \"uint\",\n          bits: 256\n        }, {\n          location: \"special\",\n          special: variable\n        }, info);\n      }\n\n      return {\n        type: dataType,\n        kind: \"value\",\n        value: block\n      };\n  }\n}\n\nexports.decodeMagic = decodeMagic;\n\nfunction senderType(compiler) {\n  switch (Compiler.Utils.solidityFamily(compiler)) {\n    case \"unknown\":\n    case \"pre-0.5.0\":\n      return {\n        typeClass: \"address\",\n        kind: \"general\"\n      };\n\n    case \"0.5.x\":\n      return {\n        typeClass: \"address\",\n        kind: \"specific\",\n        payable: true\n      };\n\n    default:\n      return {\n        typeClass: \"address\",\n        kind: \"specific\",\n        payable: false\n      };\n  }\n}\n\nfunction coinbaseType(compiler) {\n  switch (Compiler.Utils.solidityFamily(compiler)) {\n    case \"unknown\":\n    case \"pre-0.5.0\":\n      return {\n        typeClass: \"address\",\n        kind: \"general\"\n      };\n\n    case \"0.5.x\":\n    case \"0.8.x\":\n    case \"0.8.7+\":\n    case \"0.8.9+\":\n      return {\n        typeClass: \"address\",\n        kind: \"specific\",\n        payable: true\n      };\n  }\n}\n\nfunction solidityVersionHasChainId(compiler) {\n  switch (Compiler.Utils.solidityFamily(compiler)) {\n    case \"unknown\":\n    case \"pre-0.5.0\":\n    case \"0.5.x\":\n      return false;\n\n    default:\n      return true;\n  }\n}\n\nfunction solidityVersionHasBaseFee(compiler) {\n  switch (Compiler.Utils.solidityFamily(compiler)) {\n    case \"unknown\":\n    case \"pre-0.5.0\":\n    case \"0.5.x\":\n    case \"0.8.x\":\n      return false;\n\n    default:\n      return true;\n  }\n}","map":null,"metadata":{},"sourceType":"script"}