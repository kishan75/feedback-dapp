{"ast":null,"code":"import { Shrinkable } from './Shrinkable.js';\nexport class Arbitrary {\n  filter(refinement) {\n    return new FilterArbitrary(this, refinement);\n  }\n\n  map(mapper) {\n    return new MapArbitrary(this, mapper);\n  }\n\n  chain(fmapper) {\n    return new ChainArbitrary(this, fmapper);\n  }\n\n  noShrink() {\n    return new NoShrinkArbitrary(this);\n  }\n\n  withBias(_freq) {\n    return this;\n  }\n\n  noBias() {\n    return new NoBiasArbitrary(this);\n  }\n\n}\n\nclass ChainArbitrary extends Arbitrary {\n  constructor(arb, fmapper) {\n    super();\n    this.arb = arb;\n    this.fmapper = fmapper;\n  }\n\n  generate(mrng) {\n    const clonedMrng = mrng.clone();\n    const src = this.arb.generate(mrng);\n    const dst = this.fmapper(src.value).generate(mrng);\n    return ChainArbitrary.shrinkChain(clonedMrng, src, dst, this.fmapper);\n  }\n\n  withBias(freq) {\n    return this.arb.withBias(freq).chain(t => this.fmapper(t).withBias(freq));\n  }\n\n  static shrinkChain(mrng, src, dst, fmapper) {\n    return new Shrinkable(dst.value, () => src.shrink().map(v => ChainArbitrary.shrinkChain(mrng.clone(), v, fmapper(v.value).generate(mrng.clone()), fmapper)).join(dst.shrink()));\n  }\n\n}\n\nclass MapArbitrary extends Arbitrary {\n  constructor(arb, mapper) {\n    super();\n    this.arb = arb;\n    this.mapper = mapper;\n  }\n\n  generate(mrng) {\n    return this.arb.generate(mrng).map(this.mapper);\n  }\n\n  withBias(freq) {\n    return this.arb.withBias(freq).map(this.mapper);\n  }\n\n}\n\nclass FilterArbitrary extends Arbitrary {\n  constructor(arb, refinement) {\n    super();\n    this.arb = arb;\n    this.refinement = refinement;\n  }\n\n  generate(mrng) {\n    let g = this.arb.generate(mrng);\n\n    while (!this.refinementOnShrinkable(g)) {\n      g = this.arb.generate(mrng);\n    }\n\n    return g.filter(this.refinement);\n  }\n\n  withBias(freq) {\n    return this.arb.withBias(freq).filter(this.refinement);\n  }\n\n  refinementOnShrinkable(s) {\n    return this.refinement(s.value);\n  }\n\n}\n\nclass NoShrinkArbitrary extends Arbitrary {\n  constructor(arb) {\n    super();\n    this.arb = arb;\n  }\n\n  generate(mrng) {\n    return new Shrinkable(this.arb.generate(mrng).value);\n  }\n\n  withBias(freq) {\n    return this.arb.withBias(freq).noShrink();\n  }\n\n}\n\nclass NoBiasArbitrary extends Arbitrary {\n  constructor(arb) {\n    super();\n    this.arb = arb;\n  }\n\n  generate(mrng) {\n    return this.arb.generate(mrng);\n  }\n\n}\n\nexport function assertIsArbitrary(instance) {\n  if (typeof instance !== 'object' || instance === null || !('generate' in instance)) {\n    throw new Error('Unexpected value received: not an instance of Arbitrary');\n  }\n}","map":null,"metadata":{},"sourceType":"module"}