{"ast":null,"code":"import _slicedToArray from \"F:\\\\BlockChain\\\\Projects\\\\feedback-dapp-full\\\\feedback-dapp\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nconst _excluded = [\"id\", \"value\", \"formattedValue\", \"api\", \"field\", \"row\", \"rowNode\", \"colDef\", \"cellMode\", \"isEditable\", \"tabIndex\", \"className\", \"getValue\", \"hasFocus\", \"isValidating\", \"error\"];\nimport * as React from 'react';\nimport clsx from 'clsx';\nimport { unstable_composeClasses as composeClasses } from '@mui/material';\nimport { unstable_useId as useId, unstable_useEnhancedEffect as useEnhancedEffect } from '@mui/material/utils';\nimport { getDataGridUtilityClass } from '../../constants/gridClasses';\nimport { useGridRootProps } from '../../hooks/utils/useGridRootProps';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nconst useUtilityClasses = ownerState => {\n  const classes = ownerState.classes;\n  const slots = {\n    root: ['editBooleanCell']\n  };\n  return composeClasses(slots, getDataGridUtilityClass, classes);\n};\n\nexport function GridEditBooleanCell(props) {\n  var _rootProps$components;\n\n  const idProp = props.id,\n        value = props.value,\n        api = props.api,\n        field = props.field,\n        className = props.className,\n        hasFocus = props.hasFocus,\n        other = _objectWithoutPropertiesLoose(props, _excluded);\n\n  const inputRef = React.useRef(null);\n  const id = useId();\n\n  const _React$useState = React.useState(value),\n        _React$useState2 = _slicedToArray(_React$useState, 2),\n        valueState = _React$useState2[0],\n        setValueState = _React$useState2[1];\n\n  const rootProps = useGridRootProps();\n  const ownerState = {\n    classes: rootProps.classes\n  };\n  const classes = useUtilityClasses(ownerState);\n  const handleChange = React.useCallback(event => {\n    const newValue = event.target.checked;\n    setValueState(newValue);\n    api.setEditCellValue({\n      id: idProp,\n      field,\n      value: newValue\n    }, event);\n  }, [api, field, idProp]);\n  React.useEffect(() => {\n    setValueState(value);\n  }, [value]);\n  useEnhancedEffect(() => {\n    if (hasFocus) {\n      inputRef.current.focus();\n    }\n  }, [hasFocus]);\n  return (\n    /*#__PURE__*/\n    _jsx(\"label\", _extends({\n      htmlFor: id,\n      className: clsx(classes.root, className)\n    }, other, {\n      children:\n      /*#__PURE__*/\n      _jsx(rootProps.components.BaseCheckbox, _extends({\n        id: id,\n        inputRef: inputRef,\n        checked: Boolean(valueState),\n        onChange: handleChange,\n        size: \"small\"\n      }, (_rootProps$components = rootProps.componentsProps) == null ? void 0 : _rootProps$components.baseCheckbox))\n    }))\n  );\n}\nexport const renderEditBooleanCell = params =>\n/*#__PURE__*/\n_jsx(GridEditBooleanCell, _extends({}, params));","map":null,"metadata":{},"sourceType":"module"}