{"ast":null,"code":"import _slicedToArray from \"F:\\\\BlockChain\\\\Projects\\\\feedback-dapp-full\\\\feedback-dapp\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { unstable_composeClasses as composeClasses } from '@mui/material';\nimport IconButton from '@mui/material/IconButton';\nimport { switchClasses } from '@mui/material/Switch';\nimport FormControlLabel from '@mui/material/FormControlLabel';\nimport { styled } from '@mui/material/styles';\nimport { gridColumnDefinitionsSelector, gridColumnVisibilityModelSelector } from '../../hooks/features/columns/gridColumnsSelector';\nimport { useGridSelector } from '../../hooks/utils/useGridSelector';\nimport { useGridApiContext } from '../../hooks/utils/useGridApiContext';\nimport { GridDragIcon } from '../icons';\nimport { GridPanelContent } from './GridPanelContent';\nimport { GridPanelFooter } from './GridPanelFooter';\nimport { GridPanelHeader } from './GridPanelHeader';\nimport { GridPanelWrapper } from './GridPanelWrapper';\nimport { GRID_EXPERIMENTAL_ENABLED } from '../../constants/envConstants';\nimport { useGridRootProps } from '../../hooks/utils/useGridRootProps';\nimport { getDataGridUtilityClass } from '../../constants/gridClasses';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nconst useUtilityClasses = ownerState => {\n  const classes = ownerState.classes;\n  const slots = {\n    root: ['columnsPanel'],\n    columnsPanelRow: ['columnsPanelRow']\n  };\n  return composeClasses(slots, getDataGridUtilityClass, classes);\n};\n\nconst GridColumnsPanelRoot = styled('div', {\n  name: 'MuiDataGrid',\n  slot: 'ColumnsPanel',\n  overridesResolver: (props, styles) => styles.columnsPanel\n})(() => ({\n  padding: '8px 0px 8px 8px'\n}));\nconst GridColumnsPanelRowRoot = styled('div', {\n  name: 'MuiDataGrid',\n  slot: 'ColumnsPanelRow',\n  overridesResolver: (props, styles) => styles.columnsPanelRow\n})(({\n  theme\n}) => ({\n  display: 'flex',\n  justifyContent: 'space-between',\n  padding: '1px 8px 1px 7px',\n  [\"& .\".concat(switchClasses.root)]: {\n    marginRight: theme.spacing(0.5)\n  }\n}));\nconst GridIconButtonRoot = styled(IconButton)({\n  justifyContent: 'flex-end'\n});\nexport function GridColumnsPanel() {\n  var _rootProps$components, _rootProps$components3, _rootProps$components4;\n\n  const apiRef = useGridApiContext();\n  const searchInputRef = React.useRef(null);\n  const columns = useGridSelector(apiRef, gridColumnDefinitionsSelector);\n  const columnVisibilityModel = useGridSelector(apiRef, gridColumnVisibilityModelSelector);\n  const rootProps = useGridRootProps();\n\n  const _React$useState = React.useState(''),\n        _React$useState2 = _slicedToArray(_React$useState, 2),\n        searchValue = _React$useState2[0],\n        setSearchValue = _React$useState2[1];\n\n  const ownerState = {\n    classes: rootProps.classes\n  };\n  const classes = useUtilityClasses(ownerState);\n\n  const toggleColumn = event => {\n    const field = event.target.name;\n    apiRef.current.setColumnVisibility(field, columnVisibilityModel[field] === false);\n  };\n\n  const toggleAllColumns = React.useCallback(isVisible => {\n    // TODO v6: call `setColumnVisibilityModel` directly\n    apiRef.current.updateColumns(columns.map(col => {\n      if (col.hideable !== false) {\n        return {\n          field: col.field,\n          hide: !isVisible\n        };\n      }\n\n      return col;\n    }));\n  }, [apiRef, columns]);\n  const handleSearchValueChange = React.useCallback(event => {\n    setSearchValue(event.target.value);\n  }, []);\n  const currentColumns = React.useMemo(() => {\n    if (!searchValue) {\n      return columns;\n    }\n\n    const searchValueToCheck = searchValue.toLowerCase();\n    return columns.filter(column => (column.headerName || column.field).toLowerCase().indexOf(searchValueToCheck) > -1);\n  }, [columns, searchValue]);\n  React.useEffect(() => {\n    searchInputRef.current.focus();\n  }, []);\n  return (\n    /*#__PURE__*/\n    _jsxs(GridPanelWrapper, {\n      children: [\n      /*#__PURE__*/\n      _jsx(GridPanelHeader, {\n        children:\n        /*#__PURE__*/\n        _jsx(rootProps.components.BaseTextField, _extends({\n          label: apiRef.current.getLocaleText('columnsPanelTextFieldLabel'),\n          placeholder: apiRef.current.getLocaleText('columnsPanelTextFieldPlaceholder'),\n          inputRef: searchInputRef,\n          value: searchValue,\n          onChange: handleSearchValueChange,\n          variant: \"standard\",\n          fullWidth: true\n        }, (_rootProps$components = rootProps.componentsProps) == null ? void 0 : _rootProps$components.baseTextField))\n      }),\n      /*#__PURE__*/\n      _jsx(GridPanelContent, {\n        children:\n        /*#__PURE__*/\n        _jsx(GridColumnsPanelRoot, {\n          className: classes.root,\n          children: currentColumns.map(column => {\n            var _rootProps$components2;\n\n            return (\n              /*#__PURE__*/\n              _jsxs(GridColumnsPanelRowRoot, {\n                className: classes.columnsPanelRow,\n                children: [\n                /*#__PURE__*/\n                _jsx(FormControlLabel, {\n                  control:\n                  /*#__PURE__*/\n                  _jsx(rootProps.components.BaseSwitch, _extends({\n                    disabled: column.hideable === false,\n                    checked: columnVisibilityModel[column.field] !== false,\n                    onClick: toggleColumn,\n                    name: column.field,\n                    color: \"primary\",\n                    size: \"small\"\n                  }, (_rootProps$components2 = rootProps.componentsProps) == null ? void 0 : _rootProps$components2.baseSwitch)),\n                  label: column.headerName || column.field\n                }), !rootProps.disableColumnReorder && GRID_EXPERIMENTAL_ENABLED &&\n                /*#__PURE__*/\n                _jsx(GridIconButtonRoot, {\n                  draggable: true,\n                  \"aria-label\": apiRef.current.getLocaleText('columnsPanelDragIconLabel'),\n                  title: apiRef.current.getLocaleText('columnsPanelDragIconLabel'),\n                  size: \"small\",\n                  disabled: true,\n                  children:\n                  /*#__PURE__*/\n                  _jsx(GridDragIcon, {})\n                })]\n              }, column.field)\n            );\n          })\n        })\n      }),\n      /*#__PURE__*/\n      _jsxs(GridPanelFooter, {\n        children: [\n        /*#__PURE__*/\n        _jsx(rootProps.components.BaseButton, _extends({\n          onClick: () => toggleAllColumns(false),\n          color: \"primary\"\n        }, (_rootProps$components3 = rootProps.componentsProps) == null ? void 0 : _rootProps$components3.baseButton, {\n          children: apiRef.current.getLocaleText('columnsPanelHideAllButton')\n        })),\n        /*#__PURE__*/\n        _jsx(rootProps.components.BaseButton, _extends({\n          onClick: () => toggleAllColumns(true),\n          color: \"primary\"\n        }, (_rootProps$components4 = rootProps.componentsProps) == null ? void 0 : _rootProps$components4.baseButton, {\n          children: apiRef.current.getLocaleText('columnsPanelShowAllButton')\n        }))]\n      })]\n    })\n  );\n}","map":null,"metadata":{},"sourceType":"module"}