{"ast":null,"code":"/**\n *\n * @namespace faker.address\n */\nfunction Address(faker) {\n  var f = faker.fake,\n      Helpers = faker.helpers;\n  /**\n   * Generates random zipcode from format. If format is not specified, the\n   * locale's zip format is used.\n   *\n   * @method faker.address.zipCode\n   * @param {String} format\n   */\n\n  this.zipCode = function (format) {\n    // if zip format is not specified, use the zip format defined for the locale\n    if (typeof format === 'undefined') {\n      var localeFormat = faker.definitions.address.postcode;\n\n      if (typeof localeFormat === 'string') {\n        format = localeFormat;\n      } else {\n        format = faker.random.arrayElement(localeFormat);\n      }\n    }\n\n    return Helpers.replaceSymbols(format);\n  };\n  /**\n   * Generates random zipcode from state abbreviation. If state abbreviation is\n   * not specified, a random zip code is generated according to the locale's zip format.\n   * Only works for locales with postcode_by_state definition. If a locale does not\n   * have a postcode_by_state definition, a random zip code is generated according\n   * to the locale's zip format.\n   *\n   * @method faker.address.zipCodeByState\n   * @param {String} state\n   */\n\n\n  this.zipCodeByState = function (state) {\n    var zipRange = faker.definitions.address.postcode_by_state[state];\n\n    if (zipRange) {\n      return faker.datatype.number(zipRange);\n    }\n\n    return faker.address.zipCode();\n  };\n  /**\n   * Generates a random localized city name. The format string can contain any\n   * method provided by faker wrapped in `{{}}`, e.g. `{{name.firstName}}` in\n   * order to build the city name.\n   *\n   * If no format string is provided one of the following is randomly used:\n   *\n   * * `{{address.cityPrefix}} {{name.firstName}}{{address.citySuffix}}`\n   * * `{{address.cityPrefix}} {{name.firstName}}`\n   * * `{{name.firstName}}{{address.citySuffix}}`\n   * * `{{name.lastName}}{{address.citySuffix}}`\n   * * `{{address.cityName}}` when city name is available\n   *\n   * @method faker.address.city\n   * @param {String} format\n   */\n\n\n  this.city = function (format) {\n    var formats = ['{{address.cityPrefix}} {{name.firstName}}{{address.citySuffix}}', '{{address.cityPrefix}} {{name.firstName}}', '{{name.firstName}}{{address.citySuffix}}', '{{name.lastName}}{{address.citySuffix}}'];\n\n    if (!format && faker.definitions.address.city_name) {\n      formats.push('{{address.cityName}}');\n    }\n\n    if (typeof format !== \"number\") {\n      format = faker.datatype.number(formats.length - 1);\n    }\n\n    return f(formats[format]);\n  };\n  /**\n   * Return a random localized city prefix\n   * @method faker.address.cityPrefix\n   */\n\n\n  this.cityPrefix = function () {\n    return faker.random.arrayElement(faker.definitions.address.city_prefix);\n  };\n  /**\n   * Return a random localized city suffix\n   *\n   * @method faker.address.citySuffix\n   */\n\n\n  this.citySuffix = function () {\n    return faker.random.arrayElement(faker.definitions.address.city_suffix);\n  };\n  /**\n   * Returns a random city name\n   * \n   * @method faker.address.cityName\n   */\n\n\n  this.cityName = function () {\n    return faker.random.arrayElement(faker.definitions.address.city_name);\n  };\n  /**\n   * Returns a random localized street name\n   *\n   * @method faker.address.streetName\n   */\n\n\n  this.streetName = function () {\n    var result;\n    var suffix = faker.address.streetSuffix();\n\n    if (suffix !== \"\") {\n      suffix = \" \" + suffix;\n    }\n\n    switch (faker.datatype.number(1)) {\n      case 0:\n        result = faker.name.lastName() + suffix;\n        break;\n\n      case 1:\n        result = faker.name.firstName() + suffix;\n        break;\n    }\n\n    return result;\n  }; //\n  // TODO: change all these methods that accept a boolean to instead accept an options hash.\n  //\n\n  /**\n   * Returns a random localized street address\n   *\n   * @method faker.address.streetAddress\n   * @param {Boolean} useFullAddress\n   */\n\n\n  this.streetAddress = function (useFullAddress) {\n    if (useFullAddress === undefined) {\n      useFullAddress = false;\n    }\n\n    var address = \"\";\n\n    switch (faker.datatype.number(2)) {\n      case 0:\n        address = Helpers.replaceSymbolWithNumber(\"#####\") + \" \" + faker.address.streetName();\n        break;\n\n      case 1:\n        address = Helpers.replaceSymbolWithNumber(\"####\") + \" \" + faker.address.streetName();\n        break;\n\n      case 2:\n        address = Helpers.replaceSymbolWithNumber(\"###\") + \" \" + faker.address.streetName();\n        break;\n    }\n\n    return useFullAddress ? address + \" \" + faker.address.secondaryAddress() : address;\n  };\n  /**\n   * streetSuffix\n   *\n   * @method faker.address.streetSuffix\n   */\n\n\n  this.streetSuffix = function () {\n    return faker.random.arrayElement(faker.definitions.address.street_suffix);\n  };\n  /**\n   * streetPrefix\n   *\n   * @method faker.address.streetPrefix\n   */\n\n\n  this.streetPrefix = function () {\n    return faker.random.arrayElement(faker.definitions.address.street_prefix);\n  };\n  /**\n   * secondaryAddress\n   *\n   * @method faker.address.secondaryAddress\n   */\n\n\n  this.secondaryAddress = function () {\n    return Helpers.replaceSymbolWithNumber(faker.random.arrayElement(['Apt. ###', 'Suite ###']));\n  };\n  /**\n   * county\n   *\n   * @method faker.address.county\n   */\n\n\n  this.county = function () {\n    return faker.random.arrayElement(faker.definitions.address.county);\n  };\n  /**\n   * country\n   *\n   * @method faker.address.country\n   */\n\n\n  this.country = function () {\n    return faker.random.arrayElement(faker.definitions.address.country);\n  };\n  /**\n   * countryCode\n   *\n   * @method faker.address.countryCode\n   * @param {string} alphaCode default alpha-2\n   */\n\n\n  this.countryCode = function (alphaCode) {\n    if (typeof alphaCode === 'undefined' || alphaCode === 'alpha-2') {\n      return faker.random.arrayElement(faker.definitions.address.country_code);\n    }\n\n    if (alphaCode === 'alpha-3') {\n      return faker.random.arrayElement(faker.definitions.address.country_code_alpha_3);\n    }\n\n    return faker.random.arrayElement(faker.definitions.address.country_code);\n  };\n  /**\n   * state\n   *\n   * @method faker.address.state\n   * @param {Boolean} useAbbr\n   */\n\n\n  this.state = function (useAbbr) {\n    return faker.random.arrayElement(faker.definitions.address.state);\n  };\n  /**\n   * stateAbbr\n   *\n   * @method faker.address.stateAbbr\n   */\n\n\n  this.stateAbbr = function () {\n    return faker.random.arrayElement(faker.definitions.address.state_abbr);\n  };\n  /**\n   * latitude\n   *\n   * @method faker.address.latitude\n   * @param {Double} max default is 90\n   * @param {Double} min default is -90\n   * @param {number} precision default is 4\n   */\n\n\n  this.latitude = function (max, min, precision) {\n    max = max || 90;\n    min = min || -90;\n    precision = precision || 4;\n    return faker.datatype.number({\n      max: max,\n      min: min,\n      precision: parseFloat(0.0.toPrecision(precision) + '1')\n    }).toFixed(precision);\n  };\n  /**\n   * longitude\n   *\n   * @method faker.address.longitude\n   * @param {Double} max default is 180\n   * @param {Double} min default is -180\n   * @param {number} precision default is 4\n   */\n\n\n  this.longitude = function (max, min, precision) {\n    max = max || 180;\n    min = min || -180;\n    precision = precision || 4;\n    return faker.datatype.number({\n      max: max,\n      min: min,\n      precision: parseFloat(0.0.toPrecision(precision) + '1')\n    }).toFixed(precision);\n  };\n  /**\n   *  direction\n   *\n   * @method faker.address.direction\n   * @param {Boolean} useAbbr return direction abbreviation. defaults to false\n   */\n\n\n  this.direction = function (useAbbr) {\n    if (typeof useAbbr === 'undefined' || useAbbr === false) {\n      return faker.random.arrayElement(faker.definitions.address.direction);\n    }\n\n    return faker.random.arrayElement(faker.definitions.address.direction_abbr);\n  };\n\n  this.direction.schema = {\n    \"description\": \"Generates a direction. Use optional useAbbr bool to return abbreviation\",\n    \"sampleResults\": [\"Northwest\", \"South\", \"SW\", \"E\"]\n  };\n  /**\n   * cardinal direction\n   *\n   * @method faker.address.cardinalDirection\n   * @param {Boolean} useAbbr return direction abbreviation. defaults to false\n   */\n\n  this.cardinalDirection = function (useAbbr) {\n    if (typeof useAbbr === 'undefined' || useAbbr === false) {\n      return faker.random.arrayElement(faker.definitions.address.direction.slice(0, 4));\n    }\n\n    return faker.random.arrayElement(faker.definitions.address.direction_abbr.slice(0, 4));\n  };\n\n  this.cardinalDirection.schema = {\n    \"description\": \"Generates a cardinal direction. Use optional useAbbr boolean to return abbreviation\",\n    \"sampleResults\": [\"North\", \"South\", \"E\", \"W\"]\n  };\n  /**\n   * ordinal direction\n   *\n   * @method faker.address.ordinalDirection\n   * @param {Boolean} useAbbr return direction abbreviation. defaults to false\n   */\n\n  this.ordinalDirection = function (useAbbr) {\n    if (typeof useAbbr === 'undefined' || useAbbr === false) {\n      return faker.random.arrayElement(faker.definitions.address.direction.slice(4, 8));\n    }\n\n    return faker.random.arrayElement(faker.definitions.address.direction_abbr.slice(4, 8));\n  };\n\n  this.ordinalDirection.schema = {\n    \"description\": \"Generates an ordinal direction. Use optional useAbbr boolean to return abbreviation\",\n    \"sampleResults\": [\"Northwest\", \"Southeast\", \"SW\", \"NE\"]\n  };\n\n  this.nearbyGPSCoordinate = function (coordinate, radius, isMetric) {\n    function randomFloat(min, max) {\n      return Math.random() * (max - min) + min;\n    }\n\n    function degreesToRadians(degrees) {\n      return degrees * (Math.PI / 180.0);\n    }\n\n    function radiansToDegrees(radians) {\n      return radians * (180.0 / Math.PI);\n    }\n\n    function kilometersToMiles(miles) {\n      return miles * 0.621371;\n    }\n\n    function coordinateWithOffset(coordinate, bearing, distance, isMetric) {\n      var R = 6378.137; // Radius of the Earth (http://nssdc.gsfc.nasa.gov/planetary/factsheet/earthfact.html)\n\n      var d = isMetric ? distance : kilometersToMiles(distance); // Distance in km\n\n      var lat1 = degreesToRadians(coordinate[0]); //Current lat point converted to radians\n\n      var lon1 = degreesToRadians(coordinate[1]); //Current long point converted to radians\n\n      var lat2 = Math.asin(Math.sin(lat1) * Math.cos(d / R) + Math.cos(lat1) * Math.sin(d / R) * Math.cos(bearing));\n      var lon2 = lon1 + Math.atan2(Math.sin(bearing) * Math.sin(d / R) * Math.cos(lat1), Math.cos(d / R) - Math.sin(lat1) * Math.sin(lat2)); // Keep longitude in range [-180, 180]\n\n      if (lon2 > degreesToRadians(180)) {\n        lon2 = lon2 - degreesToRadians(360);\n      } else if (lon2 < degreesToRadians(-180)) {\n        lon2 = lon2 + degreesToRadians(360);\n      }\n\n      return [radiansToDegrees(lat2), radiansToDegrees(lon2)];\n    } // If there is no coordinate, the best we can do is return a random GPS coordinate.\n\n\n    if (coordinate === undefined) {\n      return [faker.address.latitude(), faker.address.longitude()];\n    }\n\n    radius = radius || 10.0;\n    isMetric = isMetric || false; // TODO: implement either a gaussian/uniform distribution of points in cicular region.\n    // Possibly include param to function that allows user to choose between distributions.\n    // This approach will likely result in a higher density of points near the center.\n\n    var randomCoord = coordinateWithOffset(coordinate, degreesToRadians(Math.random() * 360.0), radius, isMetric);\n    return [randomCoord[0].toFixed(4), randomCoord[1].toFixed(4)];\n  };\n  /**\n     * Return a random time zone\n     * @method faker.address.timeZone\n     */\n\n\n  this.timeZone = function () {\n    return faker.random.arrayElement(faker.definitions.address.time_zone);\n  };\n\n  return this;\n}\n\nmodule.exports = Address;","map":null,"metadata":{},"sourceType":"script"}