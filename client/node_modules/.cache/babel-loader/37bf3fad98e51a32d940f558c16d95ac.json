{"ast":null,"code":"import { hash } from '../utils/hash.js';\nimport { asyncStringify, asyncToStringMethod, stringify, toStringMethod } from '../utils/stringify.js';\nimport { cloneMethod, hasCloneMethod } from '../check/symbols.js';\nimport { array } from './array.js';\nimport { integer } from './integer.js';\nimport { tuple } from './tuple.js';\nimport { escapeForMultilineComments } from './_internals/helpers/TextEscaper.js';\nexport function func(arb) {\n  return tuple(array(arb, {\n    minLength: 1\n  }), integer().noShrink()).map(([outs, seed]) => {\n    const producer = () => {\n      const recorded = {};\n\n      const f = (...args) => {\n        const repr = stringify(args);\n        const val = outs[hash(\"\".concat(seed).concat(repr)) % outs.length];\n        recorded[repr] = val;\n        return hasCloneMethod(val) ? val[cloneMethod]() : val;\n      };\n\n      function prettyPrint(stringifiedOuts) {\n        const seenValues = Object.keys(recorded).sort().map(k => \"\".concat(k, \" => \").concat(stringify(recorded[k]))).map(line => \"/* \".concat(escapeForMultilineComments(line), \" */\"));\n        return \"function(...args) {\\n  // With hash and stringify coming from fast-check\".concat(seenValues.length !== 0 ? \"\\n  \".concat(seenValues.join('\\n  ')) : '', \"\\n  const outs = \").concat(stringifiedOuts, \";\\n  return outs[hash('\").concat(seed, \"' + stringify(args)) % outs.length];\\n}\");\n      }\n\n      return Object.defineProperties(f, {\n        toString: {\n          value: () => prettyPrint(stringify(outs))\n        },\n        [toStringMethod]: {\n          value: () => prettyPrint(stringify(outs))\n        },\n        [asyncToStringMethod]: {\n          value: async () => prettyPrint((await asyncStringify(outs)))\n        },\n        [cloneMethod]: {\n          value: producer,\n          configurable: true\n        }\n      });\n    };\n\n    return producer();\n  });\n}","map":null,"metadata":{},"sourceType":"module"}