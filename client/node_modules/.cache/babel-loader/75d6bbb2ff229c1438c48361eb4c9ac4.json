{"ast":null,"code":"\"use strict\";\n/**\n * @protected\n *\n * @packageDocumentation\n */\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  Object.defineProperty(o, k2, {\n    enumerable: true,\n    get: function () {\n      return m[k];\n    }\n  });\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n\n  __setModuleDefault(result, mod);\n\n  return result;\n};\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.readDefinition = void 0;\n\nconst debug_1 = __importDefault(require(\"debug\"));\n\nconst debug = debug_1.default(\"codec:ast:read\");\n\nconst Conversion = __importStar(require(\"../../conversion\"));\n\nconst Evm = __importStar(require(\"../../evm\"));\n\nconst Ast = __importStar(require(\"../../ast\"));\n\nconst errors_1 = require(\"../../errors\");\n\nfunction readDefinition(pointer) {\n  const definition = pointer.definition;\n  debug(\"definition %o\", definition);\n\n  switch (Ast.Utils.typeClass(definition)) {\n    case \"rational\":\n      let numericalValue = Ast.Utils.rationalValue(definition);\n      return Conversion.toBytes(numericalValue, Evm.Utils.WORD_SIZE);\n    //you may be wondering, why do we not just use definition.value here,\n    //like we do below? answer: because if this isn't a literal, that may not\n    //exist\n\n    case \"stringliteral\":\n      return Conversion.toBytes(definition.hexValue);\n\n    default:\n      //unfortunately, other types of constants are just too complicated to\n      //handle right now.  sorry.\n      debug(\"unsupported constant definition type\");\n      throw new errors_1.DecodingError({\n        kind: \"UnsupportedConstantError\",\n        definition\n      });\n  }\n}\n\nexports.readDefinition = readDefinition;","map":null,"metadata":{},"sourceType":"script"}