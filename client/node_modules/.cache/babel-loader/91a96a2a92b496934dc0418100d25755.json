{"ast":null,"code":"import { unsafeUniformArrayIntDistribution, unsafeUniformBigIntDistribution, unsafeUniformIntDistribution } from 'pure-rand';\nimport { convertToRandomGenerator } from './PureRandom.js';\nexport class Random {\n  constructor(sourceRng) {\n    this.internalRng = convertToRandomGenerator(sourceRng).clone();\n  }\n\n  clone() {\n    return new Random(this.internalRng);\n  }\n\n  next(bits) {\n    return unsafeUniformIntDistribution(0, (1 << bits) - 1, this.internalRng);\n  }\n\n  nextBoolean() {\n    return unsafeUniformIntDistribution(0, 1, this.internalRng) == 1;\n  }\n\n  nextInt(min, max) {\n    return unsafeUniformIntDistribution(min == null ? Random.MIN_INT : min, max == null ? Random.MAX_INT : max, this.internalRng);\n  }\n\n  nextBigInt(min, max) {\n    return unsafeUniformBigIntDistribution(min, max, this.internalRng);\n  }\n\n  nextArrayInt(min, max) {\n    return unsafeUniformArrayIntDistribution(min, max, this.internalRng);\n  }\n\n  nextDouble() {\n    const a = this.next(26);\n    const b = this.next(27);\n    return (a * Random.DBL_FACTOR + b) * Random.DBL_DIVISOR;\n  }\n\n}\nRandom.MIN_INT = 0x80000000 | 0;\nRandom.MAX_INT = 0x7fffffff | 0;\nRandom.DBL_FACTOR = Math.pow(2, 27);\nRandom.DBL_DIVISOR = Math.pow(2, -53);","map":null,"metadata":{},"sourceType":"module"}