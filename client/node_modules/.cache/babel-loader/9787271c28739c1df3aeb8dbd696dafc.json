{"ast":null,"code":"var colors = require('./colors');\n\nmodule['exports'] = function () {\n  //\n  // Extends prototype of native string object to allow for \"foo\".red syntax\n  //\n  var addProperty = function (color, func) {\n    String.prototype.__defineGetter__(color, func);\n  };\n\n  addProperty('strip', function () {\n    return colors.strip(this);\n  });\n  addProperty('stripColors', function () {\n    return colors.strip(this);\n  });\n  addProperty('trap', function () {\n    return colors.trap(this);\n  });\n  addProperty('zalgo', function () {\n    return colors.zalgo(this);\n  });\n  addProperty('zebra', function () {\n    return colors.zebra(this);\n  });\n  addProperty('rainbow', function () {\n    return colors.rainbow(this);\n  });\n  addProperty('random', function () {\n    return colors.random(this);\n  });\n  addProperty('america', function () {\n    return colors.america(this);\n  }); //\n  // Iterate through all default styles and colors\n  //\n\n  var x = Object.keys(colors.styles);\n  x.forEach(function (style) {\n    addProperty(style, function () {\n      return colors.stylize(this, style);\n    });\n  });\n\n  function applyTheme(theme) {\n    //\n    // Remark: This is a list of methods that exist\n    // on String that you should not overwrite.\n    //\n    var stringPrototypeBlacklist = ['__defineGetter__', '__defineSetter__', '__lookupGetter__', '__lookupSetter__', 'charAt', 'constructor', 'hasOwnProperty', 'isPrototypeOf', 'propertyIsEnumerable', 'toLocaleString', 'toString', 'valueOf', 'charCodeAt', 'indexOf', 'lastIndexOf', 'length', 'localeCompare', 'match', 'repeat', 'replace', 'search', 'slice', 'split', 'substring', 'toLocaleLowerCase', 'toLocaleUpperCase', 'toLowerCase', 'toUpperCase', 'trim', 'trimLeft', 'trimRight'];\n    Object.keys(theme).forEach(function (prop) {\n      if (stringPrototypeBlacklist.indexOf(prop) !== -1) {\n        console.log('warn: '.red + ('String.prototype' + prop).magenta + ' is probably something you don\\'t want to override.  ' + 'Ignoring style name');\n      } else {\n        if (typeof theme[prop] === 'string') {\n          colors[prop] = colors[theme[prop]];\n          addProperty(prop, function () {\n            return colors[prop](this);\n          });\n        } else {\n          var themePropApplicator = function (str) {\n            var ret = str || this;\n\n            for (var t = 0; t < theme[prop].length; t++) {\n              ret = colors[theme[prop][t]](ret);\n            }\n\n            return ret;\n          };\n\n          addProperty(prop, themePropApplicator);\n\n          colors[prop] = function (str) {\n            return themePropApplicator(str);\n          };\n        }\n      }\n    });\n  }\n\n  colors.setTheme = function (theme) {\n    if (typeof theme === 'string') {\n      console.log('colors.setTheme now only accepts an object, not a string. ' + 'If you are trying to set a theme from a file, it is now your (the ' + 'caller\\'s) responsibility to require the file.  The old syntax ' + 'looked like colors.setTheme(__dirname + ' + '\\'/../themes/generic-logging.js\\'); The new syntax looks like ' + 'colors.setTheme(require(__dirname + ' + '\\'/../themes/generic-logging.js\\'));');\n      return;\n    } else {\n      applyTheme(theme);\n    }\n  };\n};","map":null,"metadata":{},"sourceType":"script"}