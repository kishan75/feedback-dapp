{"ast":null,"code":"const timeoutAfter = timeMs => {\n  let timeoutHandle = null;\n  const promise = new Promise(resolve => {\n    timeoutHandle = setTimeout(() => {\n      resolve(\"Property timeout: exceeded limit of \".concat(timeMs, \" milliseconds\"));\n    }, timeMs);\n  });\n  return {\n    clear: () => clearTimeout(timeoutHandle),\n    promise\n  };\n};\n\nexport class TimeoutProperty {\n  constructor(property, timeMs) {\n    this.property = property;\n    this.timeMs = timeMs;\n  }\n\n  isAsync() {\n    return true;\n  }\n\n  generate(mrng, runId) {\n    return this.property.generate(mrng, runId);\n  }\n\n  shrink(value) {\n    return this.property.shrink(value);\n  }\n\n  async run(v) {\n    const t = timeoutAfter(this.timeMs);\n    const propRun = Promise.race([this.property.run(v), t.promise]);\n    propRun.then(t.clear, t.clear);\n    return propRun;\n  }\n\n}","map":null,"metadata":{},"sourceType":"module"}