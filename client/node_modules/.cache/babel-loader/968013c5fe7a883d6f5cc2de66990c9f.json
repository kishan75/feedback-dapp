{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.compileGeneralSelector = void 0;\n\nvar attributes_1 = require(\"./attributes\");\n\nvar pseudo_selectors_1 = require(\"./pseudo-selectors\");\n/*\n * All available rules\n */\n\n\nfunction compileGeneralSelector(next, selector, options, context, compileToken) {\n  var adapter = options.adapter,\n      equals = options.equals;\n\n  switch (selector.type) {\n    case \"pseudo-element\":\n      throw new Error(\"Pseudo-elements are not supported by css-select\");\n\n    case \"attribute\":\n      return attributes_1.attributeRules[selector.action](next, selector, options);\n\n    case \"pseudo\":\n      return (0, pseudo_selectors_1.compilePseudoSelector)(next, selector, options, context, compileToken);\n    // Tags\n\n    case \"tag\":\n      return function tag(elem) {\n        return adapter.getName(elem) === selector.name && next(elem);\n      };\n    // Traversal\n\n    case \"descendant\":\n      if (options.cacheResults === false || typeof WeakSet === \"undefined\") {\n        return function descendant(elem) {\n          var current = elem;\n\n          while (current = adapter.getParent(current)) {\n            if (adapter.isTag(current) && next(current)) {\n              return true;\n            }\n          }\n\n          return false;\n        };\n      } // @ts-expect-error `ElementNode` is not extending object\n      // eslint-disable-next-line no-case-declarations\n\n\n      var isFalseCache_1 = new WeakSet();\n      return function cachedDescendant(elem) {\n        var current = elem;\n\n        while (current = adapter.getParent(current)) {\n          if (!isFalseCache_1.has(current)) {\n            if (adapter.isTag(current) && next(current)) {\n              return true;\n            }\n\n            isFalseCache_1.add(current);\n          }\n        }\n\n        return false;\n      };\n\n    case \"_flexibleDescendant\":\n      // Include element itself, only used while querying an array\n      return function flexibleDescendant(elem) {\n        var current = elem;\n\n        do {\n          if (adapter.isTag(current) && next(current)) return true;\n        } while (current = adapter.getParent(current));\n\n        return false;\n      };\n\n    case \"parent\":\n      return function parent(elem) {\n        return adapter.getChildren(elem).some(function (elem) {\n          return adapter.isTag(elem) && next(elem);\n        });\n      };\n\n    case \"child\":\n      return function child(elem) {\n        var parent = adapter.getParent(elem);\n        return parent != null && adapter.isTag(parent) && next(parent);\n      };\n\n    case \"sibling\":\n      return function sibling(elem) {\n        var siblings = adapter.getSiblings(elem);\n\n        for (var i = 0; i < siblings.length; i++) {\n          var currentSibling = siblings[i];\n          if (equals(elem, currentSibling)) break;\n\n          if (adapter.isTag(currentSibling) && next(currentSibling)) {\n            return true;\n          }\n        }\n\n        return false;\n      };\n\n    case \"adjacent\":\n      return function adjacent(elem) {\n        var siblings = adapter.getSiblings(elem);\n        var lastElement;\n\n        for (var i = 0; i < siblings.length; i++) {\n          var currentSibling = siblings[i];\n          if (equals(elem, currentSibling)) break;\n\n          if (adapter.isTag(currentSibling)) {\n            lastElement = currentSibling;\n          }\n        }\n\n        return !!lastElement && next(lastElement);\n      };\n\n    case \"universal\":\n      return next;\n  }\n}\n\nexports.compileGeneralSelector = compileGeneralSelector;","map":null,"metadata":{},"sourceType":"script"}