{"ast":null,"code":"\"use strict\";\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  Object.defineProperty(o, k2, {\n    enumerable: true,\n    get: function () {\n      return m[k];\n    }\n  });\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n\n  __setModuleDefault(result, mod);\n\n  return result;\n};\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.encodeBytes = void 0;\n\nconst Conversion = __importStar(require(\"../../conversion\"));\n\nconst utf8_1 = __importDefault(require(\"utf8\")); //UGH -- it turns out TypeScript can't handle nested tagged unions\n//see: https://github.com/microsoft/TypeScript/issues/18758\n//so, I'm just going to have to throw in a bunch of type coercions >_>\n\n/**\n * Encodes without padding, length, etc!\n *\n * @Category Encoding (low-level)\n */\n\n\nfunction encodeBytes(input) {\n  switch (input.type.typeClass) {\n    case \"bytes\":\n      return Conversion.toBytes(input.value.asHex);\n\n    case \"string\":\n      {\n        let coercedInput = input;\n\n        switch (coercedInput.value.kind) {\n          case \"valid\":\n            return stringToBytes(coercedInput.value.asString);\n\n          case \"malformed\":\n            return Conversion.toBytes(coercedInput.value.asHex);\n        }\n      }\n  }\n}\n\nexports.encodeBytes = encodeBytes;\n/**\n * @Category Encoding (low-level)\n */\n\nfunction stringToBytes(input) {\n  input = utf8_1.default.encode(input);\n  let bytes = new Uint8Array(input.length);\n\n  for (let i = 0; i < input.length; i++) {\n    bytes[i] = input.charCodeAt(i);\n  }\n\n  return bytes; //NOTE: this will throw an error if the string contained malformed UTF-16!\n  //but, well, it shouldn't contain that...\n}","map":null,"metadata":{},"sourceType":"script"}