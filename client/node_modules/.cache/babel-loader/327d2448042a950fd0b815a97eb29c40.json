{"ast":null,"code":"var _slicedToArray = require(\"F:\\\\BlockChain\\\\Projects\\\\feedback-dapp\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/slicedToArray\");\n\n// given a set of versions and a range, create a \"simplified\" range\n// that includes the same versions that the original range does\n// If the original range is shorter than the simplified one, return that.\nconst satisfies = require('../functions/satisfies.js');\n\nconst compare = require('../functions/compare.js');\n\nmodule.exports = (versions, range, options) => {\n  const set = [];\n  let min = null;\n  let prev = null;\n  const v = versions.sort((a, b) => compare(a, b, options));\n\n  for (const version of v) {\n    const included = satisfies(version, range, options);\n\n    if (included) {\n      prev = version;\n      if (!min) min = version;\n    } else {\n      if (prev) {\n        set.push([min, prev]);\n      }\n\n      prev = null;\n      min = null;\n    }\n  }\n\n  if (min) set.push([min, null]);\n  const ranges = [];\n\n  for (const _ref of set) {\n    var _ref2 = _slicedToArray(_ref, 2);\n\n    const min = _ref2[0];\n    const max = _ref2[1];\n    if (min === max) ranges.push(min);else if (!max && min === v[0]) ranges.push('*');else if (!max) ranges.push(\">=\".concat(min));else if (min === v[0]) ranges.push(\"<=\".concat(max));else ranges.push(\"\".concat(min, \" - \").concat(max));\n  }\n\n  const simplified = ranges.join(' || ');\n  const original = typeof range.raw === 'string' ? range.raw : String(range);\n  return simplified.length < original.length ? simplified : range;\n};","map":null,"metadata":{},"sourceType":"script"}