{"ast":null,"code":"/**\n * @param {string} value\n * @returns {RegExp}\n * */\n\n/**\n * @param {RegExp | string } re\n * @returns {string}\n */\nfunction source(re) {\n  if (!re) return null;\n  if (typeof re === \"string\") return re;\n  return re.source;\n}\n/**\n * @param {RegExp | string } re\n * @returns {string}\n */\n\n\nfunction lookahead(re) {\n  return concat('(?=', re, ')');\n}\n/**\n * @param {...(RegExp | string) } args\n * @returns {string}\n */\n\n\nfunction concat(...args) {\n  const joined = args.map(x => source(x)).join(\"\");\n  return joined;\n}\n/**\n * Any of the passed expresssions may match\n *\n * Creates a huge this | this | that | that match\n * @param {(RegExp | string)[] } args\n * @returns {string}\n */\n\n\nfunction either(...args) {\n  const joined = '(' + args.map(x => source(x)).join(\"|\") + \")\";\n  return joined;\n}\n/*\nLanguage: TOML, also INI\nDescription: TOML aims to be a minimal configuration file format that's easy to read due to obvious semantics.\nContributors: Guillaume Gomez <guillaume1.gomez@gmail.com>\nCategory: common, config\nWebsite: https://github.com/toml-lang/toml\n*/\n\n\nfunction ini(hljs) {\n  const NUMBERS = {\n    className: 'number',\n    relevance: 0,\n    variants: [{\n      begin: /([+-]+)?[\\d]+_[\\d_]+/\n    }, {\n      begin: hljs.NUMBER_RE\n    }]\n  };\n  const COMMENTS = hljs.COMMENT();\n  COMMENTS.variants = [{\n    begin: /;/,\n    end: /$/\n  }, {\n    begin: /#/,\n    end: /$/\n  }];\n  const VARIABLES = {\n    className: 'variable',\n    variants: [{\n      begin: /\\$[\\w\\d\"][\\w\\d_]*/\n    }, {\n      begin: /\\$\\{(.*?)\\}/\n    }]\n  };\n  const LITERALS = {\n    className: 'literal',\n    begin: /\\bon|off|true|false|yes|no\\b/\n  };\n  const STRINGS = {\n    className: \"string\",\n    contains: [hljs.BACKSLASH_ESCAPE],\n    variants: [{\n      begin: \"'''\",\n      end: \"'''\",\n      relevance: 10\n    }, {\n      begin: '\"\"\"',\n      end: '\"\"\"',\n      relevance: 10\n    }, {\n      begin: '\"',\n      end: '\"'\n    }, {\n      begin: \"'\",\n      end: \"'\"\n    }]\n  };\n  const ARRAY = {\n    begin: /\\[/,\n    end: /\\]/,\n    contains: [COMMENTS, LITERALS, VARIABLES, STRINGS, NUMBERS, 'self'],\n    relevance: 0\n  };\n  const BARE_KEY = /[A-Za-z0-9_-]+/;\n  const QUOTED_KEY_DOUBLE_QUOTE = /\"(\\\\\"|[^\"])*\"/;\n  const QUOTED_KEY_SINGLE_QUOTE = /'[^']*'/;\n  const ANY_KEY = either(BARE_KEY, QUOTED_KEY_DOUBLE_QUOTE, QUOTED_KEY_SINGLE_QUOTE);\n  const DOTTED_KEY = concat(ANY_KEY, '(\\\\s*\\\\.\\\\s*', ANY_KEY, ')*', lookahead(/\\s*=\\s*[^#\\s]/));\n  return {\n    name: 'TOML, also INI',\n    aliases: ['toml'],\n    case_insensitive: true,\n    illegal: /\\S/,\n    contains: [COMMENTS, {\n      className: 'section',\n      begin: /\\[+/,\n      end: /\\]+/\n    }, {\n      begin: DOTTED_KEY,\n      className: 'attr',\n      starts: {\n        end: /$/,\n        contains: [COMMENTS, ARRAY, LITERALS, VARIABLES, STRINGS, NUMBERS]\n      }\n    }]\n  };\n}\n\nmodule.exports = ini;","map":null,"metadata":{},"sourceType":"script"}