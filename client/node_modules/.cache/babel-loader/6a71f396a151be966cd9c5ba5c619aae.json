{"ast":null,"code":"import { asyncToStringMethod, hasAsyncToStringMethod, hasToStringMethod, toStringMethod } from '../../../utils/stringify.js';\nimport { cloneMethod, hasCloneMethod } from '../../symbols.js';\nexport class CommandWrapper {\n  constructor(cmd) {\n    this.cmd = cmd;\n    this.hasRan = false;\n\n    if (hasToStringMethod(cmd)) {\n      const method = cmd[toStringMethod];\n\n      this[toStringMethod] = function toStringMethod() {\n        return method.call(cmd);\n      };\n    }\n\n    if (hasAsyncToStringMethod(cmd)) {\n      const method = cmd[asyncToStringMethod];\n\n      this[asyncToStringMethod] = function asyncToStringMethod() {\n        return method.call(cmd);\n      };\n    }\n  }\n\n  check(m) {\n    return this.cmd.check(m);\n  }\n\n  run(m, r) {\n    this.hasRan = true;\n    return this.cmd.run(m, r);\n  }\n\n  clone() {\n    if (hasCloneMethod(this.cmd)) return new CommandWrapper(this.cmd[cloneMethod]());\n    return new CommandWrapper(this.cmd);\n  }\n\n  toString() {\n    return this.cmd.toString();\n  }\n\n}","map":null,"metadata":{},"sourceType":"module"}