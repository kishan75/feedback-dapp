{"ast":null,"code":"var MULTIPLIER = 0x000343fd;\nvar INCREMENT = 0x00269ec3;\nvar MASK = 0xffffffff;\nvar MASK_2 = (1 << 31) - 1;\n\nvar computeNextSeed = function (seed) {\n  return seed * MULTIPLIER + INCREMENT & MASK;\n};\n\nvar computeValueFromNextSeed = function (nextseed) {\n  return (nextseed & MASK_2) >> 16;\n};\n\nvar LinearCongruential = function () {\n  function LinearCongruential(seed) {\n    this.seed = seed;\n  }\n\n  LinearCongruential.prototype.min = function () {\n    return LinearCongruential.min;\n  };\n\n  LinearCongruential.prototype.max = function () {\n    return LinearCongruential.max;\n  };\n\n  LinearCongruential.prototype.clone = function () {\n    return new LinearCongruential(this.seed);\n  };\n\n  LinearCongruential.prototype.next = function () {\n    var nextRng = new LinearCongruential(this.seed);\n    var out = nextRng.unsafeNext();\n    return [out, nextRng];\n  };\n\n  LinearCongruential.prototype.unsafeNext = function () {\n    this.seed = computeNextSeed(this.seed);\n    return computeValueFromNextSeed(this.seed);\n  };\n\n  LinearCongruential.min = 0;\n  LinearCongruential.max = Math.pow(2, 15) - 1;\n  return LinearCongruential;\n}();\n\nvar LinearCongruential32 = function () {\n  function LinearCongruential32(seed) {\n    this.seed = seed;\n  }\n\n  LinearCongruential32.prototype.min = function () {\n    return LinearCongruential32.min;\n  };\n\n  LinearCongruential32.prototype.max = function () {\n    return LinearCongruential32.max;\n  };\n\n  LinearCongruential32.prototype.clone = function () {\n    return new LinearCongruential32(this.seed);\n  };\n\n  LinearCongruential32.prototype.next = function () {\n    var nextRng = new LinearCongruential32(this.seed);\n    var out = nextRng.unsafeNext();\n    return [out, nextRng];\n  };\n\n  LinearCongruential32.prototype.unsafeNext = function () {\n    var s1 = computeNextSeed(this.seed);\n    var v1 = computeValueFromNextSeed(s1);\n    var s2 = computeNextSeed(s1);\n    var v2 = computeValueFromNextSeed(s2);\n    this.seed = computeNextSeed(s2);\n    var v3 = computeValueFromNextSeed(this.seed);\n    var vnext = v3 + (v2 + (v1 << 15) << 15);\n    return (vnext + 0x80000000 | 0) + 0x80000000;\n  };\n\n  LinearCongruential32.min = 0;\n  LinearCongruential32.max = 0xffffffff;\n  return LinearCongruential32;\n}();\n\nexport var congruential = function (seed) {\n  return new LinearCongruential(seed);\n};\nexport var congruential32 = function (seed) {\n  return new LinearCongruential32(seed);\n};","map":null,"metadata":{},"sourceType":"module"}