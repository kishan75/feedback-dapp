{"ast":null,"code":"\"use strict\";\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  Object.defineProperty(o, k2, {\n    enumerable: true,\n    get: function () {\n      return m[k];\n    }\n  });\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n\n  __setModuleDefault(result, mod);\n\n  return result;\n};\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.toAddress = exports.equalData = exports.keccak256 = exports.ZERO_ADDRESS = exports.MAX_WORD = exports.PC_SIZE = exports.SELECTOR_SIZE = exports.ADDRESS_SIZE = exports.WORD_SIZE = void 0;\n\nconst debug_1 = __importDefault(require(\"debug\"));\n\nconst debug = debug_1.default(\"codec:evm:utils\");\n\nconst bn_js_1 = __importDefault(require(\"bn.js\")); // untyped import since no @types/web3-utils exists\n\n\nconst Web3Utils = require(\"web3-utils\");\n\nconst Conversion = __importStar(require(\"../conversion\"));\n\nexports.WORD_SIZE = 0x20;\nexports.ADDRESS_SIZE = 20;\nexports.SELECTOR_SIZE = 4; //function selectors, not event selectors\n\nexports.PC_SIZE = 4;\nexports.MAX_WORD = new bn_js_1.default(-1).toTwos(exports.WORD_SIZE * 8);\nexports.ZERO_ADDRESS = \"0x\" + \"00\".repeat(exports.ADDRESS_SIZE); //beware of using this for generic strings! (it's fine for bytestrings, or\n//strings representing numbers) if you want to use this on a generic string,\n//you should pass in {type: \"string\", value: theString} instead of the string\n//itself.\n//(maybe I should add a rawKeccak256 function, using sha3 instead of\n//soliditysha3?  not seeing the need atm though)\n\nfunction keccak256(...args) {\n  // debug(\"args %o\", args);\n  const rawSha = Web3Utils.soliditySha3(...args);\n  debug(\"rawSha %o\", rawSha);\n  let sha;\n\n  if (rawSha === null) {\n    sha = \"\"; //HACK, I guess?\n  } else {\n    sha = rawSha.replace(/0x/, \"\");\n  }\n\n  return Conversion.toBN(sha);\n}\n\nexports.keccak256 = keccak256; //checks if two bytearrays (which may be undefined) are equal.\n//does not consider undefined to be equal to itself.\n\nfunction equalData(bytes1, bytes2) {\n  if (!bytes1 || !bytes2) {\n    return false;\n  }\n\n  if (bytes1.length !== bytes2.length) {\n    return false;\n  }\n\n  for (let i = 0; i < bytes1.length; i++) {\n    if (bytes1[i] !== bytes2[i]) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nexports.equalData = equalData;\n\nfunction toAddress(bytes) {\n  if (typeof bytes === \"string\") {\n    //in this case, we can do some simple string manipulation and\n    //then pass to web3\n    let hex = bytes; //just renaming for clarity\n\n    if (hex.startsWith(\"0x\")) {\n      hex = hex.slice(2);\n    }\n\n    if (hex.length < 2 * exports.ADDRESS_SIZE) {\n      hex = hex.padStart(2 * exports.ADDRESS_SIZE, \"0\");\n    }\n\n    if (hex.length > 2 * exports.ADDRESS_SIZE) {\n      hex = \"0x\" + hex.slice(hex.length - 2 * exports.ADDRESS_SIZE);\n    }\n\n    return Web3Utils.toChecksumAddress(hex);\n  } //otherwise, we're in the Uint8Array case, which we can't fully handle ourself\n  //truncate *on left* to 20 bytes\n\n\n  if (bytes.length > exports.ADDRESS_SIZE) {\n    bytes = bytes.slice(bytes.length - exports.ADDRESS_SIZE, bytes.length);\n  } //now, convert to hex string and apply checksum case that second argument\n  //(which ensures it's padded to 20 bytes) shouldn't actually ever be\n  //needed, but I'll be safe and include it\n\n\n  return Web3Utils.toChecksumAddress(Conversion.toHexString(bytes, exports.ADDRESS_SIZE));\n}\n\nexports.toAddress = toAddress;","map":null,"metadata":{},"sourceType":"script"}