{"ast":null,"code":"\"use strict\";\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  Object.defineProperty(o, k2, {\n    enumerable: true,\n    get: function () {\n      return m[k];\n    }\n  });\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n\n  __setModuleDefault(result, mod);\n\n  return result;\n};\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.readStackLiteral = exports.readStack = void 0;\n\nconst debug_1 = __importDefault(require(\"debug\"));\n\nconst debug = debug_1.default(\"codec:stack:read\");\n\nconst Evm = __importStar(require(\"../../evm\"));\n\nconst errors_1 = require(\"../../errors\");\n\nfunction readStack(pointer, state) {\n  let from = pointer.from,\n      to = pointer.to;\n  let stack = state.stack;\n\n  if (from < 0 || to >= stack.length) {\n    throw new errors_1.DecodingError({\n      kind: \"ReadErrorStack\",\n      from,\n      to\n    });\n  } //unforunately, Uint8Arrays don't support concat; if they did the rest of\n  //this would be one line.  Or similarly if they worked with lodash's flatten,\n  //but they don't support that either.  But neither of those are the case, so\n  //we'll have to concatenate a bit more manually.\n\n\n  let words = stack.slice(from, to + 1);\n  let result = new Uint8Array(words.length * Evm.Utils.WORD_SIZE); //shouldn't we total up the lengths? yeah, but each one should have a\n  //length of 32, so unless somehting's gone wrong we can just multiply\n\n  for (let index = 0; index < words.length; index++) {\n    result.set(words[index], index * Evm.Utils.WORD_SIZE);\n  }\n\n  return result;\n}\n\nexports.readStack = readStack;\n\nfunction readStackLiteral(pointer) {\n  return pointer.literal;\n}\n\nexports.readStackLiteral = readStackLiteral;","map":null,"metadata":{},"sourceType":"script"}