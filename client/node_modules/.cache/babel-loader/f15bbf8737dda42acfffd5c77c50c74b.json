{"ast":null,"code":"import BHUTokenJSON from \"../contracts/BHUToken.json\";\nimport FeedbackDataJSON from \"../contracts/FeedbackData.json\";\nimport Web3 from \"web3\";\nexport const loadContracts = async () => {\n  const networkId = await window.web3.eth.net.getId();\n  let bhuTokenNetwork = BHUTokenJSON.networks[networkId];\n  var bhuToken = null;\n\n  if (bhuTokenNetwork) {\n    bhuToken = new window.web3.eth.Contract(BHUTokenJSON.abi, bhuTokenNetwork.address);\n  } else {\n    alert(\" BhuToken contract is not deployed on this blockchain\");\n  }\n\n  let feedbackDataNetwork = FeedbackDataJSON.networks[networkId];\n  var feedbackData = null;\n\n  if (feedbackDataNetwork) {\n    feedbackData = new window.web3.eth.Contract(FeedbackDataJSON.abi, feedbackDataNetwork.address);\n  } else {\n    alert(\" Feedback contract is not deployed on this blockchain\");\n  }\n\n  return {\n    bhuToken,\n    feedbackData\n  };\n}; // Web3 loading needs to be updated\n\nexport const setupMetamask = async () => {\n  if (!window.ethereum) {\n    alert(\"please install metamask first\");\n    return;\n  }\n\n  window.ethereum.on(\"accountsChanged\", () => {\n    window.location.reload();\n  });\n  window.ethereum.on(\"chainChanged\", () => {\n    window.location.reload();\n  });\n  window.web3 = new Web3(window.ethereum);\n  window.web3.eth.handleRevert = true;\n  const accounts = await window.ethereum.request({\n    method: \"eth_requestAccounts\"\n  });\n  if (accounts.length && accounts[0]) return accounts[0];else {\n    alert(\"please connect to metamask first\");\n    return null;\n  }\n};\nexport const loadSkills = async contracts => {\n  let result = await contracts.feedbackData.methods.getFacultySkills().call();\n  return result;\n};\nexport const loadEmails = async contracts => {\n  let result = await contracts.feedbackData.methods.getProfessorIds().call();\n  return result;\n};\nexport const loadProfsByEmail = async (contracts, emails) => {\n  let result = await contracts.feedbackData.methods.getProfessorsDetailsByIds(emails).call();\n  let profsDetails = {};\n  let addressToEmail = {};\n  result.forEach(prof => {\n    let name = prof.name,\n        email = prof.email,\n        profilePicture = prof.profilePicture,\n        addressId = prof.addressId,\n        rating = prof.rating;\n    addressId.toLowerCase();\n    profsDetails[email] = {\n      name,\n      email,\n      profilePicture,\n      addressId,\n      rating\n    };\n    addressToEmail[addressId] = email;\n  });\n  return {\n    profsDetails,\n    addressToEmail\n  };\n};\nexport const loadCourses = async (contracts, emails) => {\n  let result = await contracts.feedbackData.methods.getCoursesByEmails(emails).call();\n  let profCourses = {};\n\n  for (let i = 0; i < emails.length; i++) {\n    let email = emails[i];\n    let courses = result[i];\n    let yearWise = {};\n    courses = [].concat(...courses);\n    courses.forEach(course => {\n      const name = course.name,\n            code = course.code,\n            semester = course.semester,\n            year = course.year,\n            studentCount = course.studentCount;\n      if (yearWise[year] === undefined) yearWise[year] = {};\n      if (yearWise[year][semester] === undefined) yearWise[year][semester] = {};\n      yearWise[year][semester][code] = {\n        name,\n        code,\n        semester,\n        year,\n        studentCount,\n        feedbacks: []\n      };\n    });\n    profCourses[email] = yearWise;\n  }\n\n  return profCourses;\n};\nexport const loadFeedbacks = async (contracts, emails, courses) => {\n  let result = await contracts.feedbackData.methods.getFeedbacksByEmails(emails).call();\n  let feedbacks = {};\n\n  for (let i = 0; i < emails.length; i++) {\n    let email = emails[i];\n    let courseFeedbacks = result[i];\n    let yearWise = {};\n    courseFeedbacks = [].concat(...courseFeedbacks);\n    courseFeedbacks.forEach(feedback => {\n      const code = feedback.code,\n            semester = feedback.semester,\n            year = feedback.year,\n            content = feedback.content,\n            skills = feedback.skills;\n      if (yearWise[year] === undefined) yearWise[year] = {};\n      if (yearWise[year][semester] === undefined) yearWise[year][semester] = {};\n      yearWise[year][semester][code] = {\n        code,\n        semester,\n        year,\n        content,\n        skills\n      };\n      courses[email][year][semester][code].feedbacks.push({\n        content,\n        skills\n      });\n    });\n    feedbacks[email] = yearWise;\n  }\n\n  return {\n    feedbacks,\n    updatedCourses: courses\n  };\n};\nexport const loadSkillsCount = async (contracts, emails, profsDetails) => {\n  //console.log(contracts, contracts, '------------------');\n  let result = await contracts.feedbackData.methods.getSkillsUpvotesByEmails(emails).call();\n  let skillsUpvote = {};\n\n  for (let i = 0; i < emails.length; i++) {\n    let email = emails[i];\n    let skills = {};\n    result[i].forEach(skill => {\n      const name = skill.name,\n            count = skill.count;\n      skills[name] = count;\n    });\n    skillsUpvote[email] = skills;\n    profsDetails[\"skillsUpvote\"] = skills;\n  }\n\n  return {\n    skillsUpvote,\n    updatedProfsDetail: profsDetails\n  };\n};\nexport const getBalance = async (contracts, address) => {\n  let balance = await contracts.feedbackData.methods.checkBalance(address).call();\n  return balance;\n};","map":{"version":3,"sources":["F:/BlockChain/Projects/feedback-dapp/client/src/scripts/loader.js"],"names":["BHUTokenJSON","FeedbackDataJSON","Web3","loadContracts","networkId","window","web3","eth","net","getId","bhuTokenNetwork","networks","bhuToken","Contract","abi","address","alert","feedbackDataNetwork","feedbackData","setupMetamask","ethereum","on","location","reload","handleRevert","accounts","request","method","length","loadSkills","contracts","result","methods","getFacultySkills","call","loadEmails","getProfessorIds","loadProfsByEmail","emails","getProfessorsDetailsByIds","profsDetails","addressToEmail","forEach","prof","name","email","profilePicture","addressId","rating","toLowerCase","loadCourses","getCoursesByEmails","profCourses","i","courses","yearWise","concat","course","code","semester","year","studentCount","undefined","feedbacks","loadFeedbacks","getFeedbacksByEmails","courseFeedbacks","feedback","content","skills","push","updatedCourses","loadSkillsCount","getSkillsUpvotesByEmails","skillsUpvote","skill","count","updatedProfsDetail","getBalance","balance","checkBalance"],"mappings":"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","sourcesContent":["import BHUTokenJSON from \"../contracts/BHUToken.json\";\r\nimport FeedbackDataJSON from \"../contracts/FeedbackData.json\";\r\nimport Web3 from \"web3\";\r\n\r\nexport const loadContracts = async () => {\r\n  const networkId = await window.web3.eth.net.getId();\r\n  let bhuTokenNetwork = BHUTokenJSON.networks[networkId];\r\n  var bhuToken = null;\r\n  if (bhuTokenNetwork) {\r\n    bhuToken = new window.web3.eth.Contract(\r\n      BHUTokenJSON.abi,\r\n      bhuTokenNetwork.address\r\n    );\r\n  } else {\r\n    alert(\" BhuToken contract is not deployed on this blockchain\");\r\n  }\r\n  let feedbackDataNetwork = FeedbackDataJSON.networks[networkId];\r\n  var feedbackData = null;\r\n  if (feedbackDataNetwork) {\r\n    feedbackData = new window.web3.eth.Contract(\r\n      FeedbackDataJSON.abi,\r\n      feedbackDataNetwork.address\r\n    );\r\n  } else {\r\n    alert(\" Feedback contract is not deployed on this blockchain\");\r\n  }\r\n  return { bhuToken, feedbackData };\r\n};\r\n\r\n// Web3 loading needs to be updated\r\nexport const setupMetamask = async () => {\r\n  if (!window.ethereum) {\r\n    alert(\"please install metamask first\");\r\n    return;\r\n  }\r\n  window.ethereum.on(\"accountsChanged\", () => {\r\n    window.location.reload();\r\n  });\r\n\r\n  window.ethereum.on(\"chainChanged\", () => {\r\n    window.location.reload();\r\n  });\r\n\r\n  window.web3 = new Web3(window.ethereum);\r\n  window.web3.eth.handleRevert = true;\r\n\r\n  const accounts = await window.ethereum.request({\r\n    method: \"eth_requestAccounts\",\r\n  });\r\n\r\n  if (accounts.length && accounts[0]) return accounts[0];\r\n  else {\r\n    alert(\"please connect to metamask first\");\r\n    return null;\r\n  }\r\n};\r\n\r\nexport const loadSkills = async (contracts) => {\r\n  let result = await contracts.feedbackData.methods.getFacultySkills().call();\r\n  return result;\r\n};\r\n\r\nexport const loadEmails = async (contracts) => {\r\n  let result = await contracts.feedbackData.methods.getProfessorIds().call();\r\n  return result;\r\n};\r\n\r\nexport const loadProfsByEmail = async (contracts, emails) => {\r\n  let result = await contracts.feedbackData.methods\r\n    .getProfessorsDetailsByIds(emails)\r\n    .call();\r\n  let profsDetails = {};\r\n  let addressToEmail = {};\r\n\r\n  result.forEach((prof) => {\r\n    let { name, email, profilePicture, addressId, rating } = prof;\r\n    addressId.toLowerCase();\r\n\r\n    profsDetails[email] = {\r\n      name,\r\n      email,\r\n      profilePicture,\r\n      addressId,\r\n      rating,\r\n    };\r\n    addressToEmail[addressId] = email;\r\n  });\r\n\r\n  return { profsDetails, addressToEmail };\r\n};\r\n\r\nexport const loadCourses = async (contracts, emails) => {\r\n  let result = await contracts.feedbackData.methods\r\n    .getCoursesByEmails(emails)\r\n    .call();\r\n  let profCourses = {};\r\n  for (let i = 0; i < emails.length; i++) {\r\n    let email = emails[i];\r\n    let courses = result[i];\r\n    let yearWise = {};\r\n    courses = [].concat(...courses);\r\n\r\n    courses.forEach((course) => {\r\n      const { name, code, semester, year, studentCount } = course;\r\n      if (yearWise[year] === undefined) yearWise[year] = {};\r\n      if (yearWise[year][semester] === undefined) yearWise[year][semester] = {};\r\n      yearWise[year][semester][code] = {\r\n        name,\r\n        code,\r\n        semester,\r\n        year,\r\n        studentCount,\r\n        feedbacks: [],\r\n      };\r\n    });\r\n\r\n    profCourses[email] = yearWise;\r\n  }\r\n  return profCourses;\r\n};\r\n\r\nexport const loadFeedbacks = async (contracts, emails, courses) => {\r\n  let result = await contracts.feedbackData.methods\r\n    .getFeedbacksByEmails(emails)\r\n    .call();\r\n  let feedbacks = {};\r\n  for (let i = 0; i < emails.length; i++) {\r\n    let email = emails[i];\r\n    let courseFeedbacks = result[i];\r\n    let yearWise = {};\r\n    courseFeedbacks = [].concat(...courseFeedbacks);\r\n\r\n    courseFeedbacks.forEach((feedback) => {\r\n      const { code, semester, year, content, skills } = feedback;\r\n\r\n      if (yearWise[year] === undefined) yearWise[year] = {};\r\n      if (yearWise[year][semester] === undefined) yearWise[year][semester] = {};\r\n\r\n      yearWise[year][semester][code] = {\r\n        code,\r\n        semester,\r\n        year,\r\n        content,\r\n        skills,\r\n      };\r\n\r\n      courses[email][year][semester][code].feedbacks.push({ content, skills });\r\n    });\r\n\r\n    feedbacks[email] = yearWise;\r\n  }\r\n  return { feedbacks, updatedCourses: courses };\r\n};\r\n\r\nexport const loadSkillsCount = async (contracts, emails, profsDetails) => {\r\n  //console.log(contracts, contracts, '------------------');\r\n  let result = await contracts.feedbackData.methods\r\n    .getSkillsUpvotesByEmails(emails)\r\n    .call();\r\n\r\n  let skillsUpvote = {};\r\n  for (let i = 0; i < emails.length; i++) {\r\n    let email = emails[i];\r\n    let skills = {};\r\n\r\n    result[i].forEach((skill) => {\r\n      const { name, count } = skill;\r\n\r\n      skills[name] = count;\r\n    });\r\n\r\n    skillsUpvote[email] = skills;\r\n    profsDetails[\"skillsUpvote\"] = skills;\r\n  }\r\n\r\n  return { skillsUpvote, updatedProfsDetail: profsDetails };\r\n};\r\n\r\nexport const getBalance = async (contracts, address) => {\r\n  let balance = await contracts.feedbackData.methods\r\n    .checkBalance(address)\r\n    .call();\r\n  return balance;\r\n};\r\n"]},"metadata":{},"sourceType":"module"}