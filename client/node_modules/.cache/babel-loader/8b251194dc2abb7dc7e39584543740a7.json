{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.checkLabels = void 0;\nObject.defineProperty(exports, \"decodeContenthash\", {\n  enumerable: true,\n  get: function get() {\n    return _contents.decodeContenthash;\n  }\n});\nObject.defineProperty(exports, \"decodeLabelhash\", {\n  enumerable: true,\n  get: function get() {\n    return _labelhash.decodeLabelhash;\n  }\n});\nexports.emptyAddress = void 0;\nObject.defineProperty(exports, \"encodeContenthash\", {\n  enumerable: true,\n  get: function get() {\n    return _contents.encodeContenthash;\n  }\n});\nObject.defineProperty(exports, \"encodeLabelhash\", {\n  enumerable: true,\n  get: function get() {\n    return _labelhash.encodeLabelhash;\n  }\n});\nexports.getEnsStartBlock = getEnsStartBlock;\nObject.defineProperty(exports, \"isDecrypted\", {\n  enumerable: true,\n  get: function get() {\n    return _labelhash.isDecrypted;\n  }\n});\nObject.defineProperty(exports, \"isEncodedLabelhash\", {\n  enumerable: true,\n  get: function get() {\n    return _labelhash.isEncodedLabelhash;\n  }\n});\nexports.isLabelValid = isLabelValid;\nObject.defineProperty(exports, \"isValidContenthash\", {\n  enumerable: true,\n  get: function get() {\n    return _contents.isValidContenthash;\n  }\n});\nObject.defineProperty(exports, \"labelhash\", {\n  enumerable: true,\n  get: function get() {\n    return _labelhash.labelhash;\n  }\n});\nexports.mergeLabels = void 0;\nObject.defineProperty(exports, \"namehash\", {\n  enumerable: true,\n  get: function get() {\n    return _namehash.namehash;\n  }\n});\nexports.uniq = exports.parseSearchTerm = void 0;\nexports.validateName = validateName;\n\nvar _ethers = require(\"ethers\");\n\nvar _labelhash = require(\"./labelhash\");\n\nvar _contents = require(\"./contents\");\n\nvar _ethEnsNamehash = require(\"eth-ens-namehash\");\n\nvar _namehash = require(\"./namehash\"); //import { checkLabelHash } from '../updaters/preImageDB'\n\n\nvar uniq = function uniq(a, param) {\n  return a.filter(function (item, pos) {\n    return a.map(function (mapItem) {\n      return mapItem[param];\n    }).indexOf(item[param]) === pos;\n  });\n};\n\nexports.uniq = uniq;\n\nvar checkLabels = function checkLabels() {\n  for (var _len = arguments.length, labelHashes = new Array(_len), _key = 0; _key < _len; _key++) {\n    labelHashes[_key] = arguments[_key];\n  }\n\n  return labelHashes.map(function (hash) {\n    return null;\n  });\n};\n\nexports.checkLabels = checkLabels;\n\nfunction getEnsStartBlock(networkId) {\n  switch (networkId) {\n    case 1:\n    case '1':\n      return 3327417;\n\n    case 3:\n    case '3':\n      return 25409;\n\n    default:\n      return 0;\n  }\n} // export const checkLabels = (...labelHashes) =>\n//   labelHashes.map(labelHash => checkLabelHash(labelHash) || null)\n\n\nvar mergeLabels = function mergeLabels(labels1, labels2) {\n  return labels1.map(function (label, index) {\n    return label ? label : labels2[index];\n  });\n};\n\nexports.mergeLabels = mergeLabels;\n\nfunction validateName(name) {\n  var nameArray = name.split('.');\n  var hasEmptyLabels = nameArray.filter(function (e) {\n    return e.length < 1;\n  }).length > 0;\n  if (hasEmptyLabels) throw new Error('Domain cannot have empty labels');\n  var normalizedArray = nameArray.map(function (label) {\n    return (0, _labelhash.isEncodedLabelhash)(label) ? label : (0, _ethEnsNamehash.normalize)(label);\n  });\n\n  try {\n    return normalizedArray.join('.');\n  } catch (e) {\n    throw e;\n  }\n}\n\nfunction isLabelValid(name) {\n  try {\n    validateName(name);\n\n    if (name.indexOf('.') === -1) {\n      return true;\n    }\n  } catch (e) {\n    console.log(e);\n    return false;\n  }\n}\n\nvar parseSearchTerm = function parseSearchTerm(term, validTld) {\n  var regex = /[^.]+$/;\n\n  try {\n    validateName(term);\n  } catch (e) {\n    return 'invalid';\n  }\n\n  if (term.indexOf('.') !== -1) {\n    var termArray = term.split('.');\n    var tld = term.match(regex) ? term.match(regex)[0] : '';\n\n    if (validTld) {\n      if (tld === 'eth' && termArray[termArray.length - 2].length < 3) {\n        return 'short';\n      }\n\n      return 'supported';\n    }\n\n    return 'unsupported';\n  } else if (_ethers.ethers.utils.isAddress(term)) {\n    return 'address';\n  } else {\n    //check if the search term is actually a tld\n    if (validTld) {\n      return 'tld';\n    }\n\n    return 'search';\n  }\n};\n\nexports.parseSearchTerm = parseSearchTerm;\nvar emptyAddress = '0x0000000000000000000000000000000000000000';\nexports.emptyAddress = emptyAddress;","map":null,"metadata":{},"sourceType":"script"}