{"ast":null,"code":"export function countToggledBits(n) {\n  let count = 0;\n\n  while (n > BigInt(0)) {\n    if (n & BigInt(1)) ++count;\n    n >>= BigInt(1);\n  }\n\n  return count;\n}\nexport function computeNextFlags(flags, nextSize) {\n  const allowedMask = (BigInt(1) << BigInt(nextSize)) - BigInt(1);\n  const preservedFlags = flags & allowedMask;\n  let numMissingFlags = countToggledBits(flags - preservedFlags);\n  let nFlags = preservedFlags;\n\n  for (let mask = BigInt(1); mask <= allowedMask && numMissingFlags !== 0; mask <<= BigInt(1)) {\n    if (!(nFlags & mask)) {\n      nFlags |= mask;\n      --numMissingFlags;\n    }\n  }\n\n  return nFlags;\n}\nexport function computeTogglePositions(chars, toggleCase) {\n  const positions = [];\n\n  for (let idx = chars.length - 1; idx !== -1; --idx) {\n    if (toggleCase(chars[idx]) !== chars[idx]) positions.push(idx);\n  }\n\n  return positions;\n}\nexport function computeFlagsFromChars(untoggledChars, toggledChars, togglePositions) {\n  let flags = BigInt(0);\n\n  for (let idx = 0, mask = BigInt(1); idx !== togglePositions.length; ++idx, mask <<= BigInt(1)) {\n    if (untoggledChars[togglePositions[idx]] !== toggledChars[togglePositions[idx]]) {\n      flags |= mask;\n    }\n  }\n\n  return flags;\n}\nexport function applyFlagsOnChars(chars, flags, togglePositions, toggleCase) {\n  for (let idx = 0, mask = BigInt(1); idx !== togglePositions.length; ++idx, mask <<= BigInt(1)) {\n    if (flags & mask) chars[togglePositions[idx]] = toggleCase(chars[togglePositions[idx]]);\n  }\n}","map":null,"metadata":{},"sourceType":"module"}