{"ast":null,"code":"var _a;\n\nimport { ArbitraryWithContextualShrink } from './ArbitraryWithContextualShrink.js';\nimport { ConverterToNext } from './ConverterToNext.js';\nimport { Shrinkable } from './Shrinkable.js';\nconst identifier = '__ConverterFromNext__';\n\nfunction fromNextValueToShrinkableFor(arb) {\n  return function fromNextValueToShrinkable(v) {\n    const value_ = v.value_;\n\n    const shrinker = () => arb.shrink(value_, v.context).map(fromNextValueToShrinkable);\n\n    if (!v.hasToBeCloned) {\n      return new Shrinkable(value_, shrinker);\n    }\n\n    return new Shrinkable(value_, shrinker, () => v.value);\n  };\n}\n\nexport class ConverterFromNext extends ArbitraryWithContextualShrink {\n  constructor(arb, legacyShrunkOnceContext, biasFactor = undefined) {\n    super();\n    this.arb = arb;\n    this.legacyShrunkOnceContext = legacyShrunkOnceContext;\n    this.biasFactor = biasFactor;\n    this[_a] = true;\n    this.toShrinkable = fromNextValueToShrinkableFor(arb);\n  }\n\n  static isConverterFromNext(arb) {\n    return identifier in arb;\n  }\n\n  static convertIfNeeded(arb) {\n    if (ConverterToNext.isConverterToNext(arb)) return arb.arb;else return new ConverterFromNext(arb);\n  }\n\n  generate(mrng) {\n    const g = this.arb.generate(mrng, this.biasFactor);\n    return this.toShrinkable(g);\n  }\n\n  contextualShrink(value, context) {\n    return this.arb.shrink(value, context).map(v => [v.value_, v.context]);\n  }\n\n  shrunkOnceContext() {\n    return this.legacyShrunkOnceContext;\n  }\n\n  filter(refinement) {\n    return ConverterFromNext.convertIfNeeded(this.arb.filter(refinement));\n  }\n\n  map(mapper) {\n    return ConverterFromNext.convertIfNeeded(this.arb.map(mapper));\n  }\n\n  chain(fmapper) {\n    return ConverterFromNext.convertIfNeeded(this.arb.chain(t => {\n      const fmapped = fmapper(t);\n      if (ConverterFromNext.isConverterFromNext(fmapped)) return fmapped.arb;else return new ConverterToNext(fmapped);\n    }));\n  }\n\n  noShrink() {\n    return ConverterFromNext.convertIfNeeded(this.arb.noShrink());\n  }\n\n  withBias(freq) {\n    return new ConverterFromNext(this.arb, this.legacyShrunkOnceContext, freq);\n  }\n\n  noBias() {\n    return ConverterFromNext.convertIfNeeded(this.arb.noBias());\n  }\n\n}\n_a = identifier;","map":null,"metadata":{},"sourceType":"module"}