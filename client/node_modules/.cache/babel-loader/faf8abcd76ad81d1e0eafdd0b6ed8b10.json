{"ast":null,"code":"/**\n * highlight.js Solidity syntax highlighting definition\n *\n * @see https://github.com/isagalaev/highlight.js\n *\n * @package: highlightjs-solidity\n * @author:  Sam Pospischil <sam@changegiving.com>\n * @since:   2016-07-01\n */\nconst _require = require(\"../common.js\"),\n      baseAssembly = _require.baseAssembly,\n      solAposStringMode = _require.solAposStringMode,\n      solQuoteStringMode = _require.solQuoteStringMode,\n      HEX_APOS_STRING_MODE = _require.HEX_APOS_STRING_MODE,\n      HEX_QUOTE_STRING_MODE = _require.HEX_QUOTE_STRING_MODE,\n      SOL_NUMBER = _require.SOL_NUMBER,\n      isNegativeLookbehindAvailable = _require.isNegativeLookbehindAvailable;\n\nfunction hljsDefineSolidity(hljs) {\n  var SOL_APOS_STRING_MODE = solAposStringMode(hljs);\n  var SOL_QUOTE_STRING_MODE = solQuoteStringMode(hljs); //first: let's set up all parameterized types (bytes, int, uint, fixed, ufixed)\n  //NOTE: unparameterized versions are *not* included here, those are included\n  //manually\n\n  var byteSizes = [];\n\n  for (var i = 0; i < 32; i++) {\n    byteSizes[i] = i + 1;\n  }\n\n  var numSizes = byteSizes.map(function (bytes) {\n    return bytes * 8;\n  });\n  var precisions = [];\n\n  for (i = 0; i <= 80; i++) {\n    precisions[i] = i;\n  }\n\n  var bytesTypes = byteSizes.map(function (size) {\n    return 'bytes' + size;\n  });\n  var bytesTypesString = bytesTypes.join(' ') + ' ';\n  var uintTypes = numSizes.map(function (size) {\n    return 'uint' + size;\n  });\n  var uintTypesString = uintTypes.join(' ') + ' ';\n  var intTypes = numSizes.map(function (size) {\n    return 'int' + size;\n  });\n  var intTypesString = intTypes.join(' ') + ' ';\n  var sizePrecisionPairs = [].concat.apply([], numSizes.map(function (size) {\n    return precisions.map(function (precision) {\n      return size + 'x' + precision;\n    });\n  }));\n  var fixedTypes = sizePrecisionPairs.map(function (pair) {\n    return 'fixed' + pair;\n  });\n  var fixedTypesString = fixedTypes.join(' ') + ' ';\n  var ufixedTypes = sizePrecisionPairs.map(function (pair) {\n    return 'ufixed' + pair;\n  });\n  var ufixedTypesString = ufixedTypes.join(' ') + ' ';\n  var SOL_KEYWORDS = {\n    keyword: 'var bool string ' + 'int uint ' + intTypesString + uintTypesString + 'byte bytes ' + bytesTypesString + 'fixed ufixed ' + fixedTypesString + ufixedTypesString + 'enum struct mapping address ' + 'new delete ' + 'if else for while continue break return throw emit try catch revert ' + 'unchecked ' + //NOTE: doesn't always act as a keyword, but seems fine to include\n    '_ ' + 'function modifier event constructor fallback receive error ' + 'virtual override ' + 'constant immutable anonymous indexed ' + 'storage memory calldata ' + 'external public internal payable pure view private returns ' + 'import from as using pragma ' + 'contract interface library is abstract ' + 'type ' + 'assembly',\n    literal: 'true false ' + 'wei gwei szabo finney ether ' + 'seconds minutes hours days weeks years',\n    built_in: 'self ' + // :NOTE: not a real keyword, but a convention used in storage manipulation libraries\n    'this super selfdestruct suicide ' + 'now ' + 'msg block tx abi ' + 'blockhash gasleft ' + 'assert require ' + 'Error Panic ' + 'sha3 sha256 keccak256 ripemd160 ecrecover addmod mulmod ' + 'log0 log1 log2 log3 log4'\n  }; //note: we always put operators below comments so\n  //it won't interfere with comments\n\n  var SOL_OPERATORS = {\n    className: 'operator',\n    begin: /[+\\-!~*\\/%<>&^|=]/ //excluding ?: because having : as operator causes problems\n\n  };\n  var SOL_LEXEMES_RE = /[A-Za-z_$][A-Za-z_$0-9]*/;\n  var SOL_FUNC_PARAMS = {\n    className: 'params',\n    begin: /\\(/,\n    end: /\\)/,\n    excludeBegin: true,\n    excludeEnd: true,\n    lexemes: SOL_LEXEMES_RE,\n    keywords: SOL_KEYWORDS,\n    contains: [hljs.C_LINE_COMMENT_MODE, hljs.C_BLOCK_COMMENT_MODE, SOL_APOS_STRING_MODE, SOL_QUOTE_STRING_MODE, SOL_NUMBER, 'self' //to account for mappings and fn variables\n    ]\n  };\n  var SOL_RESERVED_MEMBERS = {\n    begin: /\\.\\s*/,\n    // match any property access up to start of prop\n    end: /[^A-Za-z0-9$_\\.]/,\n    excludeBegin: true,\n    excludeEnd: true,\n    keywords: {\n      built_in: 'gas value selector address length push pop ' + //members of external functions; members of arrays\n      'send transfer call callcode delegatecall staticcall ' + //members of addresses\n      'balance code codehash ' + //more members of addresses\n      'wrap unwrap ' + //members of UDVTs (the types not the values)\n      'name creationCode runtimeCode interfaceId min max' //members of type(...)\n\n    },\n    relevance: 2\n  };\n  var SOL_TITLE_MODE = hljs.inherit(hljs.TITLE_MODE, {\n    begin: /[A-Za-z$_][0-9A-Za-z$_]*/,\n    lexemes: SOL_LEXEMES_RE,\n    keywords: SOL_KEYWORDS\n  }); //special parameters (note: these aren't really handled properly, but this seems like the best compromise for now)\n\n  var SOL_SPECIAL_PARAMETERS_LIST = ['gas', 'value', 'salt'];\n  var SOL_SPECIAL_PARAMETERS_PARTIAL_RE = '(' + SOL_SPECIAL_PARAMETERS_LIST.join('|') + ')(?=:)';\n  var SOL_SPECIAL_PARAMETERS = {\n    className: 'built_in',\n    begin: (isNegativeLookbehindAvailable() ? '(?<!\\\\$)\\\\b' : '\\\\b') + SOL_SPECIAL_PARAMETERS_PARTIAL_RE\n  };\n\n  function makeBuiltinProps(obj, props) {\n    return {\n      begin: (isNegativeLookbehindAvailable() ? '(?<!\\\\$)\\\\b' : '\\\\b') + obj + '\\\\.\\\\s*',\n      end: /[^A-Za-z0-9$_\\.]/,\n      excludeBegin: false,\n      excludeEnd: true,\n      lexemes: SOL_LEXEMES_RE,\n      keywords: {\n        built_in: obj + ' ' + props\n      },\n      contains: [SOL_RESERVED_MEMBERS],\n      relevance: 10\n    };\n  } //covers the special slot/offset notation in assembly\n  //(old-style, with an underscore)\n\n\n  var SOL_ASSEMBLY_MEMBERS_OLD = {\n    begin: /_/,\n    end: /[^A-Za-z0-9$.]/,\n    excludeBegin: true,\n    excludeEnd: true,\n    keywords: {\n      built_in: 'slot offset'\n    },\n    relevance: 2\n  }; //covers the special slot/offset notation in assembly\n  //(new-style, with a dot; keeping this separate as it\n  //may be expanded in the future)\n\n  var SOL_ASSEMBLY_MEMBERS = {\n    begin: /\\./,\n    end: /[^A-Za-z0-9$.]/,\n    excludeBegin: true,\n    excludeEnd: true,\n    keywords: {\n      built_in: 'slot offset length address selector'\n    },\n    relevance: 2\n  };\n  var BASE_ASSEMBLY_ENVIRONMENT = baseAssembly(hljs);\n  var SOL_ASSEMBLY_ENVIRONMENT = hljs.inherit(BASE_ASSEMBLY_ENVIRONMENT, {\n    contains: BASE_ASSEMBLY_ENVIRONMENT.contains.concat([SOL_ASSEMBLY_MEMBERS, SOL_ASSEMBLY_MEMBERS_OLD])\n  });\n  return {\n    aliases: ['sol'],\n    keywords: SOL_KEYWORDS,\n    lexemes: SOL_LEXEMES_RE,\n    contains: [// basic literal definitions\n    SOL_APOS_STRING_MODE, SOL_QUOTE_STRING_MODE, HEX_APOS_STRING_MODE, HEX_QUOTE_STRING_MODE, hljs.C_LINE_COMMENT_MODE, hljs.C_BLOCK_COMMENT_MODE, SOL_NUMBER, SOL_SPECIAL_PARAMETERS, SOL_OPERATORS, {\n      // functions\n      className: 'function',\n      lexemes: SOL_LEXEMES_RE,\n      beginKeywords: 'function modifier event constructor fallback receive error',\n      end: /[{;]/,\n      excludeEnd: true,\n      contains: [SOL_TITLE_MODE, SOL_FUNC_PARAMS, SOL_SPECIAL_PARAMETERS, hljs.C_LINE_COMMENT_MODE, hljs.C_BLOCK_COMMENT_MODE],\n      illegal: /%/\n    }, // built-in members\n    makeBuiltinProps('msg', 'gas value data sender sig'), makeBuiltinProps('block', 'blockhash coinbase difficulty gaslimit basefee number timestamp chainid'), makeBuiltinProps('tx', 'gasprice origin'), makeBuiltinProps('abi', 'decode encode encodePacked encodeWithSelector encodeWithSignature encodeCall'), makeBuiltinProps('bytes', 'concat'), makeBuiltinProps('string', 'concat'), SOL_RESERVED_MEMBERS, {\n      // contracts & libraries & interfaces\n      className: 'class',\n      lexemes: SOL_LEXEMES_RE,\n      beginKeywords: 'contract interface library',\n      end: '{',\n      excludeEnd: true,\n      illegal: /[:\"\\[\\]]/,\n      contains: [{\n        beginKeywords: 'is',\n        lexemes: SOL_LEXEMES_RE\n      }, SOL_TITLE_MODE, SOL_FUNC_PARAMS, SOL_SPECIAL_PARAMETERS, hljs.C_LINE_COMMENT_MODE, hljs.C_BLOCK_COMMENT_MODE]\n    }, {\n      // structs & enums\n      lexemes: SOL_LEXEMES_RE,\n      beginKeywords: 'struct enum',\n      end: '{',\n      excludeEnd: true,\n      illegal: /[:\"\\[\\]]/,\n      contains: [SOL_TITLE_MODE, hljs.C_LINE_COMMENT_MODE, hljs.C_BLOCK_COMMENT_MODE]\n    }, {\n      // imports\n      beginKeywords: 'import',\n      end: ';',\n      lexemes: SOL_LEXEMES_RE,\n      keywords: 'import from as',\n      contains: [SOL_TITLE_MODE, SOL_APOS_STRING_MODE, SOL_QUOTE_STRING_MODE, HEX_APOS_STRING_MODE, HEX_QUOTE_STRING_MODE, hljs.C_LINE_COMMENT_MODE, hljs.C_BLOCK_COMMENT_MODE, SOL_OPERATORS]\n    }, {\n      // using\n      beginKeywords: 'using',\n      end: ';',\n      lexemes: SOL_LEXEMES_RE,\n      keywords: 'using for',\n      contains: [SOL_TITLE_MODE, hljs.C_LINE_COMMENT_MODE, hljs.C_BLOCK_COMMENT_MODE, SOL_OPERATORS]\n    }, {\n      // pragmas\n      className: 'meta',\n      beginKeywords: 'pragma',\n      end: ';',\n      lexemes: SOL_LEXEMES_RE,\n      keywords: {\n        keyword: 'pragma solidity experimental abicoder',\n        built_in: 'ABIEncoderV2 SMTChecker v1 v2'\n      },\n      contains: [hljs.C_LINE_COMMENT_MODE, hljs.C_BLOCK_COMMENT_MODE, hljs.inherit(SOL_APOS_STRING_MODE, {\n        className: 'meta-string'\n      }), hljs.inherit(SOL_QUOTE_STRING_MODE, {\n        className: 'meta-string'\n      })]\n    }, {\n      //assembly section\n      beginKeywords: 'assembly',\n      end: /\\b\\B/,\n      //unsatisfiable regex; ended by endsParent instead\n      contains: [hljs.C_LINE_COMMENT_MODE, hljs.C_BLOCK_COMMENT_MODE, hljs.inherit(SOL_ASSEMBLY_ENVIRONMENT, {\n        //the actual *block* in the assembly section\n        begin: '{',\n        end: '}',\n        endsParent: true,\n        contains: SOL_ASSEMBLY_ENVIRONMENT.contains.concat([hljs.inherit(SOL_ASSEMBLY_ENVIRONMENT, {\n          //block within assembly\n          begin: '{',\n          end: '}',\n          contains: SOL_ASSEMBLY_ENVIRONMENT.contains.concat(['self'])\n        })])\n      })]\n    }],\n    illegal: /#/\n  };\n}\n\nmodule.exports = hljsDefineSolidity;","map":null,"metadata":{},"sourceType":"script"}