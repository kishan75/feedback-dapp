{"ast":null,"code":"import { scheduleCommands } from './commands/ScheduledCommand.js';\n\nconst genericModelRun = (s, cmds, initialValue, runCmd, then) => {\n  return s.then(o => {\n    const model = o.model,\n          real = o.real;\n    let state = initialValue;\n\n    for (const c of cmds) {\n      state = then(state, () => {\n        return runCmd(c, model, real);\n      });\n    }\n\n    return state;\n  });\n};\n\nconst internalModelRun = (s, cmds) => {\n  const then = (_p, c) => c();\n\n  const setupProducer = {\n    then: fun => {\n      fun(s());\n      return undefined;\n    }\n  };\n\n  const runSync = (cmd, m, r) => {\n    if (cmd.check(m)) cmd.run(m, r);\n    return undefined;\n  };\n\n  return genericModelRun(setupProducer, cmds, undefined, runSync, then);\n};\n\nconst isAsyncSetup = s => {\n  return typeof s.then === 'function';\n};\n\nconst internalAsyncModelRun = async (s, cmds, defaultPromise = Promise.resolve()) => {\n  const then = (p, c) => p.then(c);\n\n  const setupProducer = {\n    then: fun => {\n      const out = s();\n      if (isAsyncSetup(out)) return out.then(fun);else return fun(out);\n    }\n  };\n\n  const runAsync = async (cmd, m, r) => {\n    if (await cmd.check(m)) await cmd.run(m, r);\n  };\n\n  return await genericModelRun(setupProducer, cmds, defaultPromise, runAsync, then);\n};\n\nexport function modelRun(s, cmds) {\n  internalModelRun(s, cmds);\n}\nexport async function asyncModelRun(s, cmds) {\n  await internalAsyncModelRun(s, cmds);\n}\nexport async function scheduledModelRun(scheduler, s, cmds) {\n  const scheduledCommands = scheduleCommands(scheduler, cmds);\n  const out = internalAsyncModelRun(s, scheduledCommands, scheduler.schedule(Promise.resolve(), 'startModel'));\n  await scheduler.waitAll();\n  await out;\n}","map":null,"metadata":{},"sourceType":"module"}