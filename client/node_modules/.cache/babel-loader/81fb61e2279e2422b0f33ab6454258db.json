{"ast":null,"code":"import _slicedToArray from \"F:\\\\BlockChain\\\\Projects\\\\feedback-dapp-full\\\\feedback-dapp\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nconst _excluded = [\"value\"],\n      _excluded2 = [\"className\", \"defaultValue\", \"disabled\", \"emptyIcon\", \"emptyLabelText\", \"getLabelText\", \"highlightSelectedOnly\", \"icon\", \"IconContainerComponent\", \"max\", \"name\", \"onChange\", \"onChangeActive\", \"onMouseLeave\", \"onMouseMove\", \"precision\", \"readOnly\", \"size\", \"value\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { chainPropTypes, visuallyHidden } from '@mui/utils';\nimport { unstable_composeClasses as composeClasses } from '@mui/base';\nimport useTheme from '../styles/useTheme';\nimport { capitalize, useForkRef, useIsFocusVisible, useControlled, unstable_useId as useId } from '../utils';\nimport Star from '../internal/svg-icons/Star';\nimport StarBorder from '../internal/svg-icons/StarBorder';\nimport useThemeProps from '../styles/useThemeProps';\nimport styled, { slotShouldForwardProp } from '../styles/styled';\nimport ratingClasses, { getRatingUtilityClass } from './ratingClasses';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nfunction clamp(value, min, max) {\n  if (value < min) {\n    return min;\n  }\n\n  if (value > max) {\n    return max;\n  }\n\n  return value;\n}\n\nfunction getDecimalPrecision(num) {\n  const decimalPart = num.toString().split('.')[1];\n  return decimalPart ? decimalPart.length : 0;\n}\n\nfunction roundValueToPrecision(value, precision) {\n  if (value == null) {\n    return value;\n  }\n\n  const nearest = Math.round(value / precision) * precision;\n  return Number(nearest.toFixed(getDecimalPrecision(precision)));\n}\n\nconst useUtilityClasses = ownerState => {\n  const classes = ownerState.classes,\n        size = ownerState.size,\n        readOnly = ownerState.readOnly,\n        disabled = ownerState.disabled,\n        emptyValueFocused = ownerState.emptyValueFocused,\n        focusVisible = ownerState.focusVisible;\n  const slots = {\n    root: ['root', \"size\".concat(capitalize(size)), disabled && 'disabled', focusVisible && 'focusVisible', readOnly && 'readyOnly'],\n    label: ['label', 'pristine'],\n    labelEmptyValue: [emptyValueFocused && 'labelEmptyValueActive'],\n    icon: ['icon'],\n    iconEmpty: ['iconEmpty'],\n    iconFilled: ['iconFilled'],\n    iconHover: ['iconHover'],\n    iconFocus: ['iconFocus'],\n    iconActive: ['iconActive'],\n    decimal: ['decimal'],\n    visuallyHidden: ['visuallyHidden']\n  };\n  return composeClasses(slots, getRatingUtilityClass, classes);\n};\n\nconst RatingRoot = styled('span', {\n  name: 'MuiRating',\n  slot: 'Root',\n  overridesResolver: (props, styles) => {\n    const ownerState = props.ownerState;\n    return [{\n      [\"& .\".concat(ratingClasses.visuallyHidden)]: styles.visuallyHidden\n    }, styles.root, styles[\"size\".concat(capitalize(ownerState.size))], ownerState.readOnly && styles.readOnly];\n  }\n})(({\n  theme,\n  ownerState\n}) => _extends({\n  display: 'inline-flex',\n  // Required to position the pristine input absolutely\n  position: 'relative',\n  fontSize: theme.typography.pxToRem(24),\n  color: '#faaf00',\n  cursor: 'pointer',\n  textAlign: 'left',\n  WebkitTapHighlightColor: 'transparent',\n  [\"&.\".concat(ratingClasses.disabled)]: {\n    opacity: theme.palette.action.disabledOpacity,\n    pointerEvents: 'none'\n  },\n  [\"&.\".concat(ratingClasses.focusVisible, \" .\").concat(ratingClasses.iconActive)]: {\n    outline: '1px solid #999'\n  },\n  [\"& .\".concat(ratingClasses.visuallyHidden)]: visuallyHidden\n}, ownerState.size === 'small' && {\n  fontSize: theme.typography.pxToRem(18)\n}, ownerState.size === 'large' && {\n  fontSize: theme.typography.pxToRem(30)\n}, ownerState.readOnly && {\n  pointerEvents: 'none'\n}));\nconst RatingLabel = styled('label', {\n  name: 'MuiRating',\n  slot: 'Label',\n  overridesResolver: (props, styles) => styles.label\n})(({\n  ownerState\n}) => _extends({\n  cursor: 'inherit'\n}, ownerState.emptyValueFocused && {\n  top: 0,\n  bottom: 0,\n  position: 'absolute',\n  outline: '1px solid #999',\n  width: '100%'\n}));\nconst RatingIcon = styled('span', {\n  name: 'MuiRating',\n  slot: 'Icon',\n  overridesResolver: (props, styles) => {\n    const ownerState = props.ownerState;\n    return [styles.icon, ownerState.iconEmpty && styles.iconEmpty, ownerState.iconFilled && styles.iconFilled, ownerState.iconHover && styles.iconHover, ownerState.iconFocus && styles.iconFocus, ownerState.iconActive && styles.iconActive];\n  }\n})(({\n  theme,\n  ownerState\n}) => _extends({\n  // Fit wrapper to actual icon size.\n  display: 'flex',\n  transition: theme.transitions.create('transform', {\n    duration: theme.transitions.duration.shortest\n  }),\n  // Fix mouseLeave issue.\n  // https://github.com/facebook/react/issues/4492\n  pointerEvents: 'none'\n}, ownerState.iconActive && {\n  transform: 'scale(1.2)'\n}, ownerState.iconEmpty && {\n  color: theme.palette.action.disabled\n}));\nconst RatingDecimal = styled('span', {\n  name: 'MuiRating',\n  slot: 'Decimal',\n  shouldForwardProp: prop => slotShouldForwardProp(prop) && prop !== 'iconActive',\n  overridesResolver: (props, styles) => {\n    const iconActive = props.iconActive;\n    return [styles.decimal, iconActive && styles.iconActive];\n  }\n})(({\n  iconActive\n}) => _extends({\n  position: 'relative'\n}, iconActive && {\n  transform: 'scale(1.2)'\n}));\n\nfunction IconContainer(props) {\n  const other = _objectWithoutPropertiesLoose(props, _excluded);\n\n  return (\n    /*#__PURE__*/\n    _jsx(\"span\", _extends({}, other))\n  );\n}\n\nprocess.env.NODE_ENV !== \"production\" ? IconContainer.propTypes = {\n  value: PropTypes.number.isRequired\n} : void 0;\n\nfunction RatingItem(props) {\n  const classes = props.classes,\n        disabled = props.disabled,\n        emptyIcon = props.emptyIcon,\n        focus = props.focus,\n        getLabelText = props.getLabelText,\n        highlightSelectedOnly = props.highlightSelectedOnly,\n        hover = props.hover,\n        icon = props.icon,\n        IconContainerComponent = props.IconContainerComponent,\n        isActive = props.isActive,\n        itemValue = props.itemValue,\n        labelProps = props.labelProps,\n        name = props.name,\n        onBlur = props.onBlur,\n        onChange = props.onChange,\n        onClick = props.onClick,\n        onFocus = props.onFocus,\n        readOnly = props.readOnly,\n        ownerState = props.ownerState,\n        ratingValue = props.ratingValue,\n        ratingValueRounded = props.ratingValueRounded;\n  const isFilled = highlightSelectedOnly ? itemValue === ratingValue : itemValue <= ratingValue;\n  const isHovered = itemValue <= hover;\n  const isFocused = itemValue <= focus;\n  const isChecked = itemValue === ratingValueRounded;\n  const id = useId();\n\n  const container =\n  /*#__PURE__*/\n  _jsx(RatingIcon, {\n    as: IconContainerComponent,\n    value: itemValue,\n    className: clsx(classes.icon, isFilled ? classes.iconFilled : classes.iconEmpty, isHovered && classes.iconHover, isFocused && classes.iconFocus, isActive && classes.iconActive),\n    ownerState: _extends({}, ownerState, {\n      iconEmpty: !isFilled,\n      iconFilled: isFilled,\n      iconHover: isHovered,\n      iconFocus: isFocused,\n      iconActive: isActive\n    }),\n    children: emptyIcon && !isFilled ? emptyIcon : icon\n  });\n\n  if (readOnly) {\n    return (\n      /*#__PURE__*/\n      _jsx(\"span\", _extends({}, labelProps, {\n        children: container\n      }))\n    );\n  }\n\n  return (\n    /*#__PURE__*/\n    _jsxs(React.Fragment, {\n      children: [\n      /*#__PURE__*/\n      _jsxs(RatingLabel, _extends({\n        ownerState: _extends({}, ownerState, {\n          emptyValueFocused: undefined\n        }),\n        htmlFor: id\n      }, labelProps, {\n        children: [container,\n        /*#__PURE__*/\n        _jsx(\"span\", {\n          className: classes.visuallyHidden,\n          children: getLabelText(itemValue)\n        })]\n      })),\n      /*#__PURE__*/\n      _jsx(\"input\", {\n        className: classes.visuallyHidden,\n        onFocus: onFocus,\n        onBlur: onBlur,\n        onChange: onChange,\n        onClick: onClick,\n        disabled: disabled,\n        value: itemValue,\n        id: id,\n        type: \"radio\",\n        name: name,\n        checked: isChecked\n      })]\n    })\n  );\n}\n\nprocess.env.NODE_ENV !== \"production\" ? RatingItem.propTypes = {\n  classes: PropTypes.object.isRequired,\n  disabled: PropTypes.bool.isRequired,\n  emptyIcon: PropTypes.node,\n  focus: PropTypes.number.isRequired,\n  getLabelText: PropTypes.func.isRequired,\n  highlightSelectedOnly: PropTypes.bool.isRequired,\n  hover: PropTypes.number.isRequired,\n  icon: PropTypes.node,\n  IconContainerComponent: PropTypes.elementType.isRequired,\n  isActive: PropTypes.bool.isRequired,\n  itemValue: PropTypes.number.isRequired,\n  labelProps: PropTypes.object,\n  name: PropTypes.string,\n  onBlur: PropTypes.func.isRequired,\n  onChange: PropTypes.func.isRequired,\n  onClick: PropTypes.func.isRequired,\n  onFocus: PropTypes.func.isRequired,\n  ownerState: PropTypes.object.isRequired,\n  ratingValue: PropTypes.number,\n  ratingValueRounded: PropTypes.number,\n  readOnly: PropTypes.bool.isRequired\n} : void 0;\n\nconst defaultIcon =\n/*#__PURE__*/\n_jsx(Star, {\n  fontSize: \"inherit\"\n});\n\nconst defaultEmptyIcon =\n/*#__PURE__*/\n_jsx(StarBorder, {\n  fontSize: \"inherit\"\n});\n\nfunction defaultLabelText(value) {\n  return \"\".concat(value, \" Star\").concat(value !== 1 ? 's' : '');\n}\n\nconst Rating =\n/*#__PURE__*/\nReact.forwardRef(function Rating(inProps, ref) {\n  const props = useThemeProps({\n    name: 'MuiRating',\n    props: inProps\n  });\n\n  const className = props.className,\n        _props$defaultValue = props.defaultValue,\n        defaultValue = _props$defaultValue === void 0 ? null : _props$defaultValue,\n        _props$disabled = props.disabled,\n        disabled = _props$disabled === void 0 ? false : _props$disabled,\n        _props$emptyIcon = props.emptyIcon,\n        emptyIcon = _props$emptyIcon === void 0 ? defaultEmptyIcon : _props$emptyIcon,\n        _props$emptyLabelText = props.emptyLabelText,\n        emptyLabelText = _props$emptyLabelText === void 0 ? 'Empty' : _props$emptyLabelText,\n        _props$getLabelText = props.getLabelText,\n        getLabelText = _props$getLabelText === void 0 ? defaultLabelText : _props$getLabelText,\n        _props$highlightSelec = props.highlightSelectedOnly,\n        highlightSelectedOnly = _props$highlightSelec === void 0 ? false : _props$highlightSelec,\n        _props$icon = props.icon,\n        icon = _props$icon === void 0 ? defaultIcon : _props$icon,\n        _props$IconContainerC = props.IconContainerComponent,\n        IconContainerComponent = _props$IconContainerC === void 0 ? IconContainer : _props$IconContainerC,\n        _props$max = props.max,\n        max = _props$max === void 0 ? 5 : _props$max,\n        nameProp = props.name,\n        onChange = props.onChange,\n        onChangeActive = props.onChangeActive,\n        onMouseLeave = props.onMouseLeave,\n        onMouseMove = props.onMouseMove,\n        _props$precision = props.precision,\n        precision = _props$precision === void 0 ? 1 : _props$precision,\n        _props$readOnly = props.readOnly,\n        readOnly = _props$readOnly === void 0 ? false : _props$readOnly,\n        _props$size = props.size,\n        size = _props$size === void 0 ? 'medium' : _props$size,\n        valueProp = props.value,\n        other = _objectWithoutPropertiesLoose(props, _excluded2);\n\n  const name = useId(nameProp);\n\n  const _useControlled = useControlled({\n    controlled: valueProp,\n    default: defaultValue,\n    name: 'Rating'\n  }),\n        _useControlled2 = _slicedToArray(_useControlled, 2),\n        valueDerived = _useControlled2[0],\n        setValueState = _useControlled2[1];\n\n  const valueRounded = roundValueToPrecision(valueDerived, precision);\n  const theme = useTheme();\n\n  const _React$useState = React.useState({\n    hover: -1,\n    focus: -1\n  }),\n        _React$useState2 = _slicedToArray(_React$useState, 2),\n        _React$useState2$ = _React$useState2[0],\n        hover = _React$useState2$.hover,\n        focus = _React$useState2$.focus,\n        setState = _React$useState2[1];\n\n  let value = valueRounded;\n\n  if (hover !== -1) {\n    value = hover;\n  }\n\n  if (focus !== -1) {\n    value = focus;\n  }\n\n  const _useIsFocusVisible = useIsFocusVisible(),\n        isFocusVisibleRef = _useIsFocusVisible.isFocusVisibleRef,\n        handleBlurVisible = _useIsFocusVisible.onBlur,\n        handleFocusVisible = _useIsFocusVisible.onFocus,\n        focusVisibleRef = _useIsFocusVisible.ref;\n\n  const _React$useState3 = React.useState(false),\n        _React$useState4 = _slicedToArray(_React$useState3, 2),\n        focusVisible = _React$useState4[0],\n        setFocusVisible = _React$useState4[1];\n\n  const rootRef = React.useRef();\n  const handleFocusRef = useForkRef(focusVisibleRef, rootRef);\n  const handleRef = useForkRef(handleFocusRef, ref);\n\n  const handleMouseMove = event => {\n    if (onMouseMove) {\n      onMouseMove(event);\n    }\n\n    const rootNode = rootRef.current;\n\n    const _rootNode$getBounding = rootNode.getBoundingClientRect(),\n          right = _rootNode$getBounding.right,\n          left = _rootNode$getBounding.left;\n\n    const _rootNode$firstChild$ = rootNode.firstChild.getBoundingClientRect(),\n          width = _rootNode$firstChild$.width;\n\n    let percent;\n\n    if (theme.direction === 'rtl') {\n      percent = (right - event.clientX) / (width * max);\n    } else {\n      percent = (event.clientX - left) / (width * max);\n    }\n\n    let newHover = roundValueToPrecision(max * percent + precision / 2, precision);\n    newHover = clamp(newHover, precision, max);\n    setState(prev => prev.hover === newHover && prev.focus === newHover ? prev : {\n      hover: newHover,\n      focus: newHover\n    });\n    setFocusVisible(false);\n\n    if (onChangeActive && hover !== newHover) {\n      onChangeActive(event, newHover);\n    }\n  };\n\n  const handleMouseLeave = event => {\n    if (onMouseLeave) {\n      onMouseLeave(event);\n    }\n\n    const newHover = -1;\n    setState({\n      hover: newHover,\n      focus: newHover\n    });\n\n    if (onChangeActive && hover !== newHover) {\n      onChangeActive(event, newHover);\n    }\n  };\n\n  const handleChange = event => {\n    let newValue = event.target.value === '' ? null : parseFloat(event.target.value); // Give mouse priority over keyboard\n    // Fix https://github.com/mui/material-ui/issues/22827\n\n    if (hover !== -1) {\n      newValue = hover;\n    }\n\n    setValueState(newValue);\n\n    if (onChange) {\n      onChange(event, newValue);\n    }\n  };\n\n  const handleClear = event => {\n    // Ignore keyboard events\n    // https://github.com/facebook/react/issues/7407\n    if (event.clientX === 0 && event.clientY === 0) {\n      return;\n    }\n\n    setState({\n      hover: -1,\n      focus: -1\n    });\n    setValueState(null);\n\n    if (onChange && parseFloat(event.target.value) === valueRounded) {\n      onChange(event, null);\n    }\n  };\n\n  const handleFocus = event => {\n    handleFocusVisible(event);\n\n    if (isFocusVisibleRef.current === true) {\n      setFocusVisible(true);\n    }\n\n    const newFocus = parseFloat(event.target.value);\n    setState(prev => ({\n      hover: prev.hover,\n      focus: newFocus\n    }));\n  };\n\n  const handleBlur = event => {\n    if (hover !== -1) {\n      return;\n    }\n\n    handleBlurVisible(event);\n\n    if (isFocusVisibleRef.current === false) {\n      setFocusVisible(false);\n    }\n\n    const newFocus = -1;\n    setState(prev => ({\n      hover: prev.hover,\n      focus: newFocus\n    }));\n  };\n\n  const _React$useState5 = React.useState(false),\n        _React$useState6 = _slicedToArray(_React$useState5, 2),\n        emptyValueFocused = _React$useState6[0],\n        setEmptyValueFocused = _React$useState6[1];\n\n  const ownerState = _extends({}, props, {\n    defaultValue,\n    disabled,\n    emptyIcon,\n    emptyLabelText,\n    emptyValueFocused,\n    focusVisible,\n    getLabelText,\n    icon,\n    IconContainerComponent,\n    max,\n    precision,\n    readOnly,\n    size\n  });\n\n  const classes = useUtilityClasses(ownerState);\n  return (\n    /*#__PURE__*/\n    _jsxs(RatingRoot, _extends({\n      ref: handleRef,\n      onMouseMove: handleMouseMove,\n      onMouseLeave: handleMouseLeave,\n      className: clsx(classes.root, className),\n      ownerState: ownerState,\n      role: readOnly ? 'img' : null,\n      \"aria-label\": readOnly ? getLabelText(value) : null\n    }, other, {\n      children: [Array.from(new Array(max)).map((_, index) => {\n        const itemValue = index + 1;\n        const ratingItemProps = {\n          classes,\n          disabled,\n          emptyIcon,\n          focus,\n          getLabelText,\n          highlightSelectedOnly,\n          hover,\n          icon,\n          IconContainerComponent,\n          name,\n          onBlur: handleBlur,\n          onChange: handleChange,\n          onClick: handleClear,\n          onFocus: handleFocus,\n          ratingValue: value,\n          ratingValueRounded: valueRounded,\n          readOnly,\n          ownerState\n        };\n        const isActive = itemValue === Math.ceil(value) && (hover !== -1 || focus !== -1);\n\n        if (precision < 1) {\n          const items = Array.from(new Array(1 / precision));\n          return (\n            /*#__PURE__*/\n            _jsx(RatingDecimal, {\n              className: clsx(classes.decimal, isActive && classes.iconActive),\n              ownerState: ownerState,\n              iconActive: isActive,\n              children: items.map(($, indexDecimal) => {\n                const itemDecimalValue = roundValueToPrecision(itemValue - 1 + (indexDecimal + 1) * precision, precision);\n                return (\n                  /*#__PURE__*/\n                  _jsx(RatingItem, _extends({}, ratingItemProps, {\n                    // The icon is already displayed as active\n                    isActive: false,\n                    itemValue: itemDecimalValue,\n                    labelProps: {\n                      style: items.length - 1 === indexDecimal ? {} : {\n                        width: itemDecimalValue === value ? \"\".concat((indexDecimal + 1) * precision * 100, \"%\") : '0%',\n                        overflow: 'hidden',\n                        position: 'absolute'\n                      }\n                    }\n                  }), itemDecimalValue)\n                );\n              })\n            }, itemValue)\n          );\n        }\n\n        return (\n          /*#__PURE__*/\n          _jsx(RatingItem, _extends({}, ratingItemProps, {\n            isActive: isActive,\n            itemValue: itemValue\n          }), itemValue)\n        );\n      }), !readOnly && !disabled &&\n      /*#__PURE__*/\n      _jsxs(RatingLabel, {\n        className: clsx(classes.label, classes.labelEmptyValue),\n        ownerState: ownerState,\n        children: [\n        /*#__PURE__*/\n        _jsx(\"input\", {\n          className: classes.visuallyHidden,\n          value: \"\",\n          id: \"\".concat(name, \"-empty\"),\n          type: \"radio\",\n          name: name,\n          checked: valueRounded == null,\n          onFocus: () => setEmptyValueFocused(true),\n          onBlur: () => setEmptyValueFocused(false),\n          onChange: handleChange\n        }),\n        /*#__PURE__*/\n        _jsx(\"span\", {\n          className: classes.visuallyHidden,\n          children: emptyLabelText\n        })]\n      })]\n    }))\n  );\n});\nprocess.env.NODE_ENV !== \"production\" ? Rating.propTypes\n/* remove-proptypes */\n= {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * The default value. Use when the component is not controlled.\n   * @default null\n   */\n  defaultValue: PropTypes.number,\n\n  /**\n   * If `true`, the component is disabled.\n   * @default false\n   */\n  disabled: PropTypes.bool,\n\n  /**\n   * The icon to display when empty.\n   * @default <StarBorder fontSize=\"inherit\" />\n   */\n  emptyIcon: PropTypes.node,\n\n  /**\n   * The label read when the rating input is empty.\n   * @default 'Empty'\n   */\n  emptyLabelText: PropTypes.node,\n\n  /**\n   * Accepts a function which returns a string value that provides a user-friendly name for the current value of the rating.\n   * This is important for screen reader users.\n   *\n   * For localization purposes, you can use the provided [translations](/guides/localization/).\n   * @param {number} value The rating label's value to format.\n   * @returns {string}\n   * @default function defaultLabelText(value) {\n   *   return `${value} Star${value !== 1 ? 's' : ''}`;\n   * }\n   */\n  getLabelText: PropTypes.func,\n\n  /**\n   * If `true`, only the selected icon will be highlighted.\n   * @default false\n   */\n  highlightSelectedOnly: PropTypes.bool,\n\n  /**\n   * The icon to display.\n   * @default <Star fontSize=\"inherit\" />\n   */\n  icon: PropTypes.node,\n\n  /**\n   * The component containing the icon.\n   * @default function IconContainer(props) {\n   *   const { value, ...other } = props;\n   *   return <span {...other} />;\n   * }\n   */\n  IconContainerComponent: PropTypes.elementType,\n\n  /**\n   * Maximum rating.\n   * @default 5\n   */\n  max: PropTypes.number,\n\n  /**\n   * The name attribute of the radio `input` elements.\n   * This input `name` should be unique within the page.\n   * Being unique within a form is insufficient since the `name` is used to generated IDs.\n   */\n  name: PropTypes.string,\n\n  /**\n   * Callback fired when the value changes.\n   * @param {React.SyntheticEvent} event The event source of the callback.\n   * @param {number|null} value The new value.\n   */\n  onChange: PropTypes.func,\n\n  /**\n   * Callback function that is fired when the hover state changes.\n   * @param {React.SyntheticEvent} event The event source of the callback.\n   * @param {number} value The new value.\n   */\n  onChangeActive: PropTypes.func,\n\n  /**\n   * @ignore\n   */\n  onMouseLeave: PropTypes.func,\n\n  /**\n   * @ignore\n   */\n  onMouseMove: PropTypes.func,\n\n  /**\n   * The minimum increment value change allowed.\n   * @default 1\n   */\n  precision: chainPropTypes(PropTypes.number, props => {\n    if (props.precision < 0.1) {\n      return new Error(['MUI: The prop `precision` should be above 0.1.', 'A value below this limit has an imperceptible impact.'].join('\\n'));\n    }\n\n    return null;\n  }),\n\n  /**\n   * Removes all hover effects and pointer events.\n   * @default false\n   */\n  readOnly: PropTypes.bool,\n\n  /**\n   * The size of the component.\n   * @default 'medium'\n   */\n  size: PropTypes\n  /* @typescript-to-proptypes-ignore */\n  .oneOfType([PropTypes.oneOf(['small', 'medium', 'large']), PropTypes.string]),\n\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object]),\n\n  /**\n   * The rating value.\n   */\n  value: PropTypes.number\n} : void 0;\nexport default Rating;","map":null,"metadata":{},"sourceType":"module"}