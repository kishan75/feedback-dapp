{"ast":null,"code":"'use strict';\n\nconst unicode = require('../common/unicode');\n\nconst ERR = require('../common/error-codes'); //Aliases\n\n\nconst $ = unicode.CODE_POINTS; //Const\n\nconst DEFAULT_BUFFER_WATERLINE = 1 << 16; //Preprocessor\n//NOTE: HTML input preprocessing\n//(see: http://www.whatwg.org/specs/web-apps/current-work/multipage/parsing.html#preprocessing-the-input-stream)\n\nclass Preprocessor {\n  constructor() {\n    this.html = null;\n    this.pos = -1;\n    this.lastGapPos = -1;\n    this.lastCharPos = -1;\n    this.gapStack = [];\n    this.skipNextNewLine = false;\n    this.lastChunkWritten = false;\n    this.endOfChunkHit = false;\n    this.bufferWaterline = DEFAULT_BUFFER_WATERLINE;\n  }\n\n  _err() {// NOTE: err reporting is noop by default. Enabled by mixin.\n  }\n\n  _addGap() {\n    this.gapStack.push(this.lastGapPos);\n    this.lastGapPos = this.pos;\n  }\n\n  _processSurrogate(cp) {\n    //NOTE: try to peek a surrogate pair\n    if (this.pos !== this.lastCharPos) {\n      const nextCp = this.html.charCodeAt(this.pos + 1);\n\n      if (unicode.isSurrogatePair(nextCp)) {\n        //NOTE: we have a surrogate pair. Peek pair character and recalculate code point.\n        this.pos++; //NOTE: add gap that should be avoided during retreat\n\n        this._addGap();\n\n        return unicode.getSurrogatePairCodePoint(cp, nextCp);\n      }\n    } //NOTE: we are at the end of a chunk, therefore we can't infer surrogate pair yet.\n    else if (!this.lastChunkWritten) {\n        this.endOfChunkHit = true;\n        return $.EOF;\n      } //NOTE: isolated surrogate\n\n\n    this._err(ERR.surrogateInInputStream);\n\n    return cp;\n  }\n\n  dropParsedChunk() {\n    if (this.pos > this.bufferWaterline) {\n      this.lastCharPos -= this.pos;\n      this.html = this.html.substring(this.pos);\n      this.pos = 0;\n      this.lastGapPos = -1;\n      this.gapStack = [];\n    }\n  }\n\n  write(chunk, isLastChunk) {\n    if (this.html) {\n      this.html += chunk;\n    } else {\n      this.html = chunk;\n    }\n\n    this.lastCharPos = this.html.length - 1;\n    this.endOfChunkHit = false;\n    this.lastChunkWritten = isLastChunk;\n  }\n\n  insertHtmlAtCurrentPos(chunk) {\n    this.html = this.html.substring(0, this.pos + 1) + chunk + this.html.substring(this.pos + 1, this.html.length);\n    this.lastCharPos = this.html.length - 1;\n    this.endOfChunkHit = false;\n  }\n\n  advance() {\n    this.pos++;\n\n    if (this.pos > this.lastCharPos) {\n      this.endOfChunkHit = !this.lastChunkWritten;\n      return $.EOF;\n    }\n\n    let cp = this.html.charCodeAt(this.pos); //NOTE: any U+000A LINE FEED (LF) characters that immediately follow a U+000D CARRIAGE RETURN (CR) character\n    //must be ignored.\n\n    if (this.skipNextNewLine && cp === $.LINE_FEED) {\n      this.skipNextNewLine = false;\n\n      this._addGap();\n\n      return this.advance();\n    } //NOTE: all U+000D CARRIAGE RETURN (CR) characters must be converted to U+000A LINE FEED (LF) characters\n\n\n    if (cp === $.CARRIAGE_RETURN) {\n      this.skipNextNewLine = true;\n      return $.LINE_FEED;\n    }\n\n    this.skipNextNewLine = false;\n\n    if (unicode.isSurrogate(cp)) {\n      cp = this._processSurrogate(cp);\n    } //OPTIMIZATION: first check if code point is in the common allowed\n    //range (ASCII alphanumeric, whitespaces, big chunk of BMP)\n    //before going into detailed performance cost validation.\n\n\n    const isCommonValidRange = cp > 0x1f && cp < 0x7f || cp === $.LINE_FEED || cp === $.CARRIAGE_RETURN || cp > 0x9f && cp < 0xfdd0;\n\n    if (!isCommonValidRange) {\n      this._checkForProblematicCharacters(cp);\n    }\n\n    return cp;\n  }\n\n  _checkForProblematicCharacters(cp) {\n    if (unicode.isControlCodePoint(cp)) {\n      this._err(ERR.controlCharacterInInputStream);\n    } else if (unicode.isUndefinedCodePoint(cp)) {\n      this._err(ERR.noncharacterInInputStream);\n    }\n  }\n\n  retreat() {\n    if (this.pos === this.lastGapPos) {\n      this.lastGapPos = this.gapStack.pop();\n      this.pos--;\n    }\n\n    this.pos--;\n  }\n\n}\n\nmodule.exports = Preprocessor;","map":null,"metadata":{},"sourceType":"script"}