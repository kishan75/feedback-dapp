{"ast":null,"code":"import { NextArbitrary } from '../../check/arbitrary/definition/NextArbitrary.js';\nimport { NextValue } from '../../check/arbitrary/definition/NextValue.js';\nimport { Stream } from '../../stream/Stream.js';\nconst AdaptedValue = Symbol('adapted-value');\n\nfunction toAdapterNextValue(rawValue, adapter) {\n  const adapted = adapter(rawValue.value_);\n\n  if (!adapted.adapted) {\n    return rawValue;\n  }\n\n  return new NextValue(adapted.value, AdaptedValue);\n}\n\nclass AdapterArbitrary extends NextArbitrary {\n  constructor(sourceArb, adapter) {\n    super();\n    this.sourceArb = sourceArb;\n    this.adapter = adapter;\n\n    this.adaptNextValue = rawValue => toAdapterNextValue(rawValue, adapter);\n  }\n\n  generate(mrng, biasFactor) {\n    const rawValue = this.sourceArb.generate(mrng, biasFactor);\n    return this.adaptNextValue(rawValue);\n  }\n\n  canShrinkWithoutContext(value) {\n    return this.sourceArb.canShrinkWithoutContext(value) && !this.adapter(value).adapted;\n  }\n\n  shrink(value, context) {\n    if (context === AdaptedValue) {\n      if (!this.sourceArb.canShrinkWithoutContext(value)) {\n        return Stream.nil();\n      }\n\n      return this.sourceArb.shrink(value, undefined).map(this.adaptNextValue);\n    }\n\n    return this.sourceArb.shrink(value, context).map(this.adaptNextValue);\n  }\n\n}\n\nexport function adapter(sourceArb, adapter) {\n  return new AdapterArbitrary(sourceArb, adapter);\n}","map":null,"metadata":{},"sourceType":"module"}