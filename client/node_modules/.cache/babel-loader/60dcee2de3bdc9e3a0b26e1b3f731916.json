{"ast":null,"code":"import _slicedToArray from \"F:\\\\BlockChain\\\\Projects\\\\feedback-dapp\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nimport { escapeForTemplateString } from '../helpers/TextEscaper.js';\nimport { cloneMethod } from '../../../check/symbols.js';\nimport { stringify } from '../../../utils/stringify.js';\nexport class SchedulerImplem {\n  constructor(act, taskSelector) {\n    this.act = act;\n    this.taskSelector = taskSelector;\n    this.lastTaskId = 0;\n    this.sourceTaskSelector = taskSelector.clone();\n    this.scheduledTasks = [];\n    this.triggeredTasks = [];\n  }\n\n  static buildLog(reportItem) {\n    return \"[task${\".concat(reportItem.taskId, \"}] \").concat(reportItem.label.length !== 0 ? \"\".concat(reportItem.schedulingType, \"::\").concat(reportItem.label) : reportItem.schedulingType, \" \").concat(reportItem.status).concat(reportItem.outputValue !== undefined ? \" with value \".concat(escapeForTemplateString(reportItem.outputValue)) : '');\n  }\n\n  log(schedulingType, taskId, label, metadata, status, data) {\n    this.triggeredTasks.push({\n      status,\n      schedulingType,\n      taskId,\n      label,\n      metadata,\n      outputValue: data !== undefined ? stringify(data) : undefined\n    });\n  }\n\n  scheduleInternal(schedulingType, label, task, metadata, thenTaskToBeAwaited) {\n    let trigger = null;\n    const taskId = ++this.lastTaskId;\n    const scheduledPromise = new Promise((resolve, reject) => {\n      trigger = () => {\n        (thenTaskToBeAwaited ? task.then(() => thenTaskToBeAwaited()) : task).then(data => {\n          this.log(schedulingType, taskId, label, metadata, 'resolved', data);\n          return resolve(data);\n        }, err => {\n          this.log(schedulingType, taskId, label, metadata, 'rejected', err);\n          return reject(err);\n        });\n      };\n    });\n    this.scheduledTasks.push({\n      original: task,\n      scheduled: scheduledPromise,\n      trigger: trigger,\n      schedulingType,\n      taskId,\n      label,\n      metadata\n    });\n    return scheduledPromise;\n  }\n\n  schedule(task, label, metadata) {\n    return this.scheduleInternal('promise', label || '', task, metadata);\n  }\n\n  scheduleFunction(asyncFunction) {\n    return (...args) => this.scheduleInternal('function', \"\".concat(asyncFunction.name, \"(\").concat(args.map(stringify).join(','), \")\"), asyncFunction(...args), undefined);\n  }\n\n  scheduleSequence(sequenceBuilders) {\n    const status = {\n      done: false,\n      faulty: false\n    };\n    const dummyResolvedPromise = {\n      then: f => f()\n    };\n\n    let resolveSequenceTask = () => {};\n\n    const sequenceTask = new Promise(resolve => resolveSequenceTask = resolve);\n    sequenceBuilders.reduce((previouslyScheduled, item) => {\n      const _ref = typeof item === 'function' ? [item, item.name, undefined] : [item.builder, item.label, item.metadata],\n            _ref2 = _slicedToArray(_ref, 3),\n            builder = _ref2[0],\n            label = _ref2[1],\n            metadata = _ref2[2];\n\n      return previouslyScheduled.then(() => {\n        const scheduled = this.scheduleInternal('sequence', label, dummyResolvedPromise, metadata, () => builder());\n        scheduled.catch(() => {\n          status.faulty = true;\n          resolveSequenceTask();\n        });\n        return scheduled;\n      });\n    }, dummyResolvedPromise).then(() => {\n      status.done = true;\n      resolveSequenceTask();\n    }, () => {});\n    return Object.assign(status, {\n      task: Promise.resolve(sequenceTask).then(() => {\n        return {\n          done: status.done,\n          faulty: status.faulty\n        };\n      })\n    });\n  }\n\n  count() {\n    return this.scheduledTasks.length;\n  }\n\n  async internalWaitOne() {\n    if (this.scheduledTasks.length === 0) {\n      throw new Error('No task scheduled');\n    }\n\n    const taskIndex = this.taskSelector.nextTaskIndex(this.scheduledTasks);\n\n    const _this$scheduledTasks$ = this.scheduledTasks.splice(taskIndex, 1),\n          _this$scheduledTasks$2 = _slicedToArray(_this$scheduledTasks$, 1),\n          scheduledTask = _this$scheduledTasks$2[0];\n\n    scheduledTask.trigger();\n\n    try {\n      await scheduledTask.scheduled;\n    } catch (_err) {}\n  }\n\n  async waitOne() {\n    await this.act(async () => await this.internalWaitOne());\n  }\n\n  async waitAll() {\n    while (this.scheduledTasks.length > 0) {\n      await this.waitOne();\n    }\n  }\n\n  report() {\n    return [...this.triggeredTasks, ...this.scheduledTasks.map(t => ({\n      status: 'pending',\n      schedulingType: t.schedulingType,\n      taskId: t.taskId,\n      label: t.label,\n      metadata: t.metadata\n    }))];\n  }\n\n  toString() {\n    return 'schedulerFor()`\\n' + this.report().map(SchedulerImplem.buildLog).map(log => \"-> \".concat(log)).join('\\n') + '`';\n  }\n\n  [cloneMethod]() {\n    return new SchedulerImplem(this.act, this.sourceTaskSelector);\n  }\n\n}","map":null,"metadata":{},"sourceType":"module"}