{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nvar _slicedToArray = function () {\n  function sliceIterator(arr, i) {\n    var _arr = [];\n    var _n = true;\n    var _d = false;\n    var _e = undefined;\n\n    try {\n      for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n        _arr.push(_s.value);\n\n        if (i && _arr.length === i) break;\n      }\n    } catch (err) {\n      _d = true;\n      _e = err;\n    } finally {\n      try {\n        if (!_n && _i['return']) _i['return']();\n      } finally {\n        if (_d) throw _e;\n      }\n    }\n\n    return _arr;\n  }\n\n  return function (arr, i) {\n    if (Array.isArray(arr)) {\n      return arr;\n    } else if (Symbol.iterator in Object(arr)) {\n      return sliceIterator(arr, i);\n    } else {\n      throw new TypeError('Invalid attempt to destructure non-iterable instance');\n    }\n  };\n}();\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    'default': obj\n  };\n}\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _reactDom = require('react-dom');\n\nvar _reactDom2 = _interopRequireDefault(_reactDom);\n\nvar _propTypes = require('prop-types');\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _helpersBaseStyles = require('./helpers/baseStyles');\n\nvar _helpersBaseStyles2 = _interopRequireDefault(_helpersBaseStyles);\n\nvar _helpersDom = require('./helpers/dom');\n\nvar _componentsBurgerIcon = require('./components/BurgerIcon');\n\nvar _componentsBurgerIcon2 = _interopRequireDefault(_componentsBurgerIcon);\n\nvar _componentsCrossIcon = require('./components/CrossIcon');\n\nvar _componentsCrossIcon2 = _interopRequireDefault(_componentsCrossIcon);\n\nexports['default'] = function (styles) {\n  if (!styles) {\n    throw new Error('No styles supplied');\n  }\n\n  var ARROW_DOWN = 'ArrowDown';\n  var ARROW_UP = 'ArrowUp';\n  var ESCAPE = 'Escape';\n  var SPACE = ' ';\n  var HOME = 'Home';\n  var END = 'End';\n\n  function usePrevious(value) {\n    var ref = _react2['default'].useRef(value);\n\n    _react2['default'].useEffect(function () {\n      ref.current = value;\n    });\n\n    return ref.current;\n  }\n\n  var Menu = function Menu(props) {\n    var _React$useState = _react2['default'].useState(false);\n\n    var _React$useState2 = _slicedToArray(_React$useState, 2);\n\n    var isOpen = _React$useState2[0];\n    var setIsOpen = _React$useState2[1];\n\n    var timeoutId = _react2['default'].useRef();\n\n    var toggleOptions = _react2['default'].useRef({});\n\n    var prevIsOpenProp = usePrevious(props.isOpen);\n\n    _react2['default'].useEffect(function () {\n      if (props.isOpen) {\n        toggleMenu({\n          isOpen: true,\n          noStateChange: true\n        });\n      }\n\n      return function cleanup() {\n        applyWrapperStyles(false);\n        clearCurrentTimeout();\n      };\n    }, []);\n\n    _react2['default'].useEffect(function () {\n      var wasToggled = typeof props.isOpen !== 'undefined' && props.isOpen !== isOpen && props.isOpen !== prevIsOpenProp;\n\n      if (wasToggled) {\n        toggleMenu(); // Toggling changes SVG animation requirements, so defer these until next update\n\n        return;\n      }\n\n      if (styles.svg) {\n        (function () {\n          var morphShape = document.getElementById('bm-morph-shape');\n          var path = styles.svg.lib(morphShape).select('path');\n\n          if (isOpen) {\n            // Animate SVG path\n            styles.svg.animate(path);\n          } else {\n            // Reset path (timeout ensures animation happens off screen)\n            setTimeout(function () {\n              path.attr('d', styles.svg.pathInitial);\n            }, 300);\n          }\n        })();\n      }\n    });\n\n    _react2['default'].useEffect(function () {\n      var _toggleOptions$current = toggleOptions.current;\n      var noStateChange = _toggleOptions$current.noStateChange;\n      var focusOnLastItem = _toggleOptions$current.focusOnLastItem;\n\n      if (!noStateChange) {\n        props.onStateChange({\n          isOpen: isOpen\n        });\n      }\n\n      if (!props.disableAutoFocus) {\n        // For accessibility reasons, ensures that when we toggle open,\n        // we focus the first or last menu item according to given parameter\n        if (isOpen) {\n          focusOnLastItem ? (0, _helpersDom.focusOnLastMenuItem)() : (0, _helpersDom.focusOnFirstMenuItem)();\n        } else {\n          if (document.activeElement) {\n            document.activeElement.blur();\n          } else {\n            document.body.blur(); // Needed for IE\n          }\n        }\n      } // Timeout ensures wrappers are cleared after animation finishes\n\n\n      clearCurrentTimeout();\n      timeoutId.current = setTimeout(function () {\n        timeoutId.current = null;\n\n        if (!isOpen) {\n          applyWrapperStyles(false);\n        }\n      }, 500); // Bind keydown handlers (or custom function if supplied)\n\n      var defaultOnKeyDown = isOpen ? onKeyDownOpen : onKeyDownClosed;\n      var onKeyDown = props.customOnKeyDown || defaultOnKeyDown;\n      window.addEventListener('keydown', onKeyDown);\n      return function cleanup() {\n        window.removeEventListener('keydown', onKeyDown);\n      };\n    }, [isOpen]);\n\n    function toggleMenu() {\n      var options = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];\n      toggleOptions.current = options;\n      applyWrapperStyles(); // Ensures wrapper styles are applied before the menu is toggled\n\n      setTimeout(function () {\n        setIsOpen(function (open) {\n          return typeof options.isOpen !== 'undefined' ? options.isOpen : !open;\n        });\n      });\n    }\n\n    function open() {\n      if (typeof props.onOpen === 'function') {\n        props.onOpen();\n      } else {\n        toggleMenu();\n      }\n    }\n\n    function close() {\n      if (typeof props.onClose === 'function') {\n        props.onClose();\n      } else {\n        toggleMenu();\n      }\n    }\n\n    function getStyle(style, index) {\n      var width = props.width;\n      var right = props.right;\n      var formattedWidth = typeof width !== 'string' ? width + 'px' : width;\n      return style(isOpen, formattedWidth, right, index);\n    } // Builds styles incrementally for a given element\n\n\n    function getStyles(el, index, inline) {\n      var propName = 'bm' + el.replace(el.charAt(0), el.charAt(0).toUpperCase()); // Set base styles\n\n      var output = _helpersBaseStyles2['default'][el] ? getStyle(_helpersBaseStyles2['default'][el]) : {}; // Add animation-specific styles\n\n      if (styles[el]) {\n        output = _extends({}, output, getStyle(styles[el], index + 1));\n      } // Add custom styles\n\n\n      if (props.styles[propName]) {\n        output = _extends({}, output, props.styles[propName]);\n      } // Add element inline styles\n\n\n      if (inline) {\n        output = _extends({}, output, inline);\n      } // Remove transition if required\n      // (useful if rendering open initially)\n\n\n      if (props.noTransition) {\n        delete output.transition;\n      }\n\n      return output;\n    } // Sets or unsets styles on DOM elements outside the menu component\n    // This is necessary for correct page interaction with some of the menus\n    // Throws and returns if the required external elements don't exist,\n    // which means any external page animations won't be applied\n\n\n    function handleExternalWrapper(id, wrapperStyles, set) {\n      var wrapper = document.getElementById(id);\n\n      if (!wrapper) {\n        console.error(\"Element with ID '\" + id + \"' not found\");\n        return;\n      }\n\n      var builtStyles = getStyle(wrapperStyles);\n\n      for (var prop in builtStyles) {\n        if (builtStyles.hasOwnProperty(prop)) {\n          wrapper.style[prop] = set ? builtStyles[prop] : '';\n        }\n      } // Prevent any horizontal scroll\n      // Only set overflow-x as an inline style if htmlClassName or\n      // bodyClassName is not passed in. Otherwise, it is up to the caller to\n      // decide if they want to set the overflow style in CSS using the custom\n      // class names\n\n\n      var applyOverflow = function applyOverflow(el) {\n        return el.style['overflow-x'] = set ? 'hidden' : '';\n      };\n\n      if (!props.htmlClassName) {\n        applyOverflow(document.querySelector('html'));\n      }\n\n      if (!props.bodyClassName) {\n        applyOverflow(document.querySelector('body'));\n      }\n    } // Applies component-specific styles to external wrapper elements\n\n\n    function applyWrapperStyles() {\n      var set = arguments.length <= 0 || arguments[0] === undefined ? true : arguments[0];\n\n      var applyClass = function applyClass(el, className) {\n        return el.classList[set ? 'add' : 'remove'](className);\n      };\n\n      if (props.htmlClassName) {\n        applyClass(document.querySelector('html'), props.htmlClassName);\n      }\n\n      if (props.bodyClassName) {\n        applyClass(document.querySelector('body'), props.bodyClassName);\n      }\n\n      if (styles.pageWrap && props.pageWrapId) {\n        handleExternalWrapper(props.pageWrapId, styles.pageWrap, set);\n      }\n\n      if (styles.outerContainer && props.outerContainerId) {\n        handleExternalWrapper(props.outerContainerId, styles.outerContainer, set);\n      }\n\n      var menuWrap = document.querySelector('.bm-menu-wrap');\n\n      if (menuWrap) {\n        if (set) {\n          menuWrap.removeAttribute('hidden');\n        } else {\n          menuWrap.setAttribute('hidden', true);\n        }\n      }\n    } // Avoids potentially attempting to update an unmounted component\n\n\n    function clearCurrentTimeout() {\n      if (timeoutId.current) {\n        clearTimeout(timeoutId.current);\n      }\n    }\n\n    function onKeyDownOpen(e) {\n      e = e || window.event;\n\n      switch (e.key) {\n        case ESCAPE:\n          // Close on ESC, unless disabled\n          if (!props.disableCloseOnEsc) {\n            close();\n            (0, _helpersDom.focusOnMenuButton)();\n          }\n\n          break;\n\n        case ARROW_DOWN:\n          (0, _helpersDom.focusOnNextMenuItem)();\n          break;\n\n        case ARROW_UP:\n          (0, _helpersDom.focusOnPreviousMenuItem)();\n          break;\n\n        case HOME:\n          (0, _helpersDom.focusOnFirstMenuItem)();\n          break;\n\n        case END:\n          (0, _helpersDom.focusOnLastMenuItem)();\n          break;\n      }\n    }\n\n    function onKeyDownClosed(e) {\n      e = e || window.event; // Key downs came from menu button\n\n      if (e.target === document.getElementById('react-burger-menu-btn')) {\n        switch (e.key) {\n          case ARROW_DOWN:\n          case SPACE:\n            // If down arrow, space or enter, open menu and focus on first menuitem\n            toggleMenu();\n            break;\n\n          case ARROW_UP:\n            // If arrow up, open menu and focus on last menuitem\n            toggleMenu({\n              focusOnLastItem: true\n            });\n            break;\n        }\n      }\n    }\n\n    function handleOverlayClick() {\n      if (props.disableOverlayClick === true || typeof props.disableOverlayClick === 'function' && props.disableOverlayClick()) {\n        return;\n      } else {\n        close();\n      }\n    }\n\n    return _react2['default'].createElement('div', null, !props.noOverlay && _react2['default'].createElement('div', {\n      className: ('bm-overlay ' + props.overlayClassName).trim(),\n      onClick: handleOverlayClick,\n      style: getStyles('overlay')\n    }), props.customBurgerIcon !== false && _react2['default'].createElement('div', {\n      style: getStyles('burgerIcon')\n    }, _react2['default'].createElement(_componentsBurgerIcon2['default'], {\n      onClick: open,\n      styles: props.styles,\n      customIcon: props.customBurgerIcon,\n      className: props.burgerButtonClassName,\n      barClassName: props.burgerBarClassName,\n      onIconStateChange: props.onIconStateChange\n    })), _react2['default'].createElement('div', {\n      id: props.id,\n      className: ('bm-menu-wrap ' + props.className).trim(),\n      style: getStyles('menuWrap'),\n      'aria-hidden': !isOpen\n    }, styles.svg && _react2['default'].createElement('div', {\n      id: 'bm-morph-shape',\n      className: ('bm-morph-shape ' + props.morphShapeClassName).trim(),\n      style: getStyles('morphShape')\n    }, _react2['default'].createElement('svg', {\n      width: '100%',\n      height: '100%',\n      viewBox: '0 0 100 800',\n      preserveAspectRatio: 'none'\n    }, _react2['default'].createElement('path', {\n      d: styles.svg.pathInitial\n    }))), _react2['default'].createElement('div', {\n      className: ('bm-menu ' + props.menuClassName).trim(),\n      style: getStyles('menu')\n    }, _react2['default'].createElement(props.itemListElement, {\n      className: ('bm-item-list ' + props.itemListClassName).trim(),\n      style: getStyles('itemList')\n    }, _react2['default'].Children.map(props.children, function (item, index) {\n      if (item) {\n        var classList = ['bm-item', props.itemClassName, item.props.className].filter(function (className) {\n          return !!className;\n        }).join(' ');\n        var extraProps = {\n          key: index,\n          className: classList,\n          style: getStyles('item', index, item.props.style),\n          tabIndex: isOpen ? 0 : -1\n        };\n        return _react2['default'].cloneElement(item, extraProps);\n      }\n    }))), props.customCrossIcon !== false && _react2['default'].createElement('div', {\n      style: getStyles('closeButton')\n    }, _react2['default'].createElement(_componentsCrossIcon2['default'], {\n      onClick: close,\n      styles: props.styles,\n      customIcon: props.customCrossIcon,\n      className: props.crossButtonClassName,\n      crossClassName: props.crossClassName,\n      isOpen: isOpen\n    }))));\n  };\n\n  Menu.propTypes = {\n    bodyClassName: _propTypes2['default'].string,\n    burgerBarClassName: _propTypes2['default'].string,\n    burgerButtonClassName: _propTypes2['default'].string,\n    className: _propTypes2['default'].string,\n    crossButtonClassName: _propTypes2['default'].string,\n    crossClassName: _propTypes2['default'].string,\n    customBurgerIcon: _propTypes2['default'].oneOfType([_propTypes2['default'].element, _propTypes2['default'].oneOf([false])]),\n    customCrossIcon: _propTypes2['default'].oneOfType([_propTypes2['default'].element, _propTypes2['default'].oneOf([false])]),\n    customOnKeyDown: _propTypes2['default'].func,\n    disableAutoFocus: _propTypes2['default'].bool,\n    disableCloseOnEsc: _propTypes2['default'].bool,\n    disableOverlayClick: _propTypes2['default'].oneOfType([_propTypes2['default'].bool, _propTypes2['default'].func]),\n    htmlClassName: _propTypes2['default'].string,\n    id: _propTypes2['default'].string,\n    isOpen: _propTypes2['default'].bool,\n    itemClassName: _propTypes2['default'].string,\n    itemListClassName: _propTypes2['default'].string,\n    itemListElement: _propTypes2['default'].oneOf(['div', 'nav']),\n    menuClassName: _propTypes2['default'].string,\n    morphShapeClassName: _propTypes2['default'].string,\n    noOverlay: _propTypes2['default'].bool,\n    noTransition: _propTypes2['default'].bool,\n    onClose: _propTypes2['default'].func,\n    onIconHoverChange: _propTypes2['default'].func,\n    onOpen: _propTypes2['default'].func,\n    onStateChange: _propTypes2['default'].func,\n    outerContainerId: styles && styles.outerContainer ? _propTypes2['default'].string.isRequired : _propTypes2['default'].string,\n    overlayClassName: _propTypes2['default'].string,\n    pageWrapId: styles && styles.pageWrap ? _propTypes2['default'].string.isRequired : _propTypes2['default'].string,\n    right: _propTypes2['default'].bool,\n    styles: _propTypes2['default'].object,\n    width: _propTypes2['default'].oneOfType([_propTypes2['default'].number, _propTypes2['default'].string])\n  };\n  Menu.defaultProps = {\n    bodyClassName: '',\n    burgerBarClassName: '',\n    burgerButtonClassName: '',\n    className: '',\n    crossButtonClassName: '',\n    crossClassName: '',\n    disableAutoFocus: false,\n    disableCloseOnEsc: false,\n    htmlClassName: '',\n    id: '',\n    itemClassName: '',\n    itemListClassName: '',\n    menuClassName: '',\n    morphShapeClassName: '',\n    noOverlay: false,\n    noTransition: false,\n    onStateChange: function onStateChange() {},\n    outerContainerId: '',\n    overlayClassName: '',\n    pageWrapId: '',\n    styles: {},\n    width: 300,\n    onIconHoverChange: function onIconHoverChange() {},\n    itemListElement: 'nav'\n  };\n  return Menu;\n};\n\nmodule.exports = exports['default'];","map":null,"metadata":{},"sourceType":"script"}