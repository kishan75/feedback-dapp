{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.prevElementSibling = exports.nextElementSibling = exports.getName = exports.hasAttrib = exports.getAttributeValue = exports.getSiblings = exports.getParent = exports.getChildren = void 0;\n\nvar domhandler_1 = require(\"domhandler\");\n\nvar emptyArray = [];\n/**\n * Get a node's children.\n *\n * @param elem Node to get the children of.\n * @returns `elem`'s children, or an empty array.\n */\n\nfunction getChildren(elem) {\n  var _a;\n\n  return (_a = elem.children) !== null && _a !== void 0 ? _a : emptyArray;\n}\n\nexports.getChildren = getChildren;\n/**\n * Get a node's parent.\n *\n * @param elem Node to get the parent of.\n * @returns `elem`'s parent node.\n */\n\nfunction getParent(elem) {\n  return elem.parent || null;\n}\n\nexports.getParent = getParent;\n/**\n * Gets an elements siblings, including the element itself.\n *\n * Attempts to get the children through the element's parent first.\n * If we don't have a parent (the element is a root node),\n * we walk the element's `prev` & `next` to get all remaining nodes.\n *\n * @param elem Element to get the siblings of.\n * @returns `elem`'s siblings.\n */\n\nfunction getSiblings(elem) {\n  var _a, _b;\n\n  var parent = getParent(elem);\n  if (parent != null) return getChildren(parent);\n  var siblings = [elem];\n  var prev = elem.prev,\n      next = elem.next;\n\n  while (prev != null) {\n    siblings.unshift(prev);\n    _a = prev, prev = _a.prev;\n  }\n\n  while (next != null) {\n    siblings.push(next);\n    _b = next, next = _b.next;\n  }\n\n  return siblings;\n}\n\nexports.getSiblings = getSiblings;\n/**\n * Gets an attribute from an element.\n *\n * @param elem Element to check.\n * @param name Attribute name to retrieve.\n * @returns The element's attribute value, or `undefined`.\n */\n\nfunction getAttributeValue(elem, name) {\n  var _a;\n\n  return (_a = elem.attribs) === null || _a === void 0 ? void 0 : _a[name];\n}\n\nexports.getAttributeValue = getAttributeValue;\n/**\n * Checks whether an element has an attribute.\n *\n * @param elem Element to check.\n * @param name Attribute name to look for.\n * @returns Returns whether `elem` has the attribute `name`.\n */\n\nfunction hasAttrib(elem, name) {\n  return elem.attribs != null && Object.prototype.hasOwnProperty.call(elem.attribs, name) && elem.attribs[name] != null;\n}\n\nexports.hasAttrib = hasAttrib;\n/**\n * Get the tag name of an element.\n *\n * @param elem The element to get the name for.\n * @returns The tag name of `elem`.\n */\n\nfunction getName(elem) {\n  return elem.name;\n}\n\nexports.getName = getName;\n/**\n * Returns the next element sibling of a node.\n *\n * @param elem The element to get the next sibling of.\n * @returns `elem`'s next sibling that is a tag.\n */\n\nfunction nextElementSibling(elem) {\n  var _a;\n\n  var next = elem.next;\n\n  while (next !== null && !(0, domhandler_1.isTag)(next)) _a = next, next = _a.next;\n\n  return next;\n}\n\nexports.nextElementSibling = nextElementSibling;\n/**\n * Returns the previous element sibling of a node.\n *\n * @param elem The element to get the previous sibling of.\n * @returns `elem`'s previous sibling that is a tag.\n */\n\nfunction prevElementSibling(elem) {\n  var _a;\n\n  var prev = elem.prev;\n\n  while (prev !== null && !(0, domhandler_1.isTag)(prev)) _a = prev, prev = _a.prev;\n\n  return prev;\n}\n\nexports.prevElementSibling = prevElementSibling;","map":null,"metadata":{},"sourceType":"script"}