{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nconst _excluded = [\"onClick\"];\nimport * as React from 'react';\nimport { useGridSelector } from '../../hooks/utils/useGridSelector';\nimport { gridPreferencePanelStateSelector } from '../../hooks/features/preferencesPanel/gridPreferencePanelSelector';\nimport { GridPreferencePanelsValue } from '../../hooks/features/preferencesPanel/gridPreferencePanelsValue';\nimport { useGridApiContext } from '../../hooks/utils/useGridApiContext';\nimport { useGridRootProps } from '../../hooks/utils/useGridRootProps';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport const GridToolbarColumnsButton =\n/*#__PURE__*/\nReact.forwardRef(function GridToolbarColumnsButton(props, ref) {\n  var _rootProps$components;\n\n  const onClick = props.onClick,\n        other = _objectWithoutPropertiesLoose(props, _excluded);\n\n  const apiRef = useGridApiContext();\n  const rootProps = useGridRootProps();\n\n  const _useGridSelector = useGridSelector(apiRef, gridPreferencePanelStateSelector),\n        open = _useGridSelector.open,\n        openedPanelValue = _useGridSelector.openedPanelValue;\n\n  const showColumns = event => {\n    if (open && openedPanelValue === GridPreferencePanelsValue.columns) {\n      apiRef.current.hidePreferences();\n    } else {\n      apiRef.current.showPreferences(GridPreferencePanelsValue.columns);\n    }\n\n    onClick == null ? void 0 : onClick(event);\n  }; // Disable the button if the corresponding is disabled\n\n\n  if (rootProps.disableColumnSelector) {\n    return null;\n  }\n\n  return (\n    /*#__PURE__*/\n    _jsx(rootProps.components.BaseButton, _extends({\n      ref: ref,\n      size: \"small\",\n      color: \"primary\",\n      \"aria-label\": apiRef.current.getLocaleText('toolbarColumnsLabel'),\n      startIcon:\n      /*#__PURE__*/\n      _jsx(rootProps.components.ColumnSelectorIcon, {})\n    }, other, {\n      onClick: showColumns\n    }, (_rootProps$components = rootProps.componentsProps) == null ? void 0 : _rootProps$components.baseButton, {\n      children: apiRef.current.getLocaleText('toolbarColumns')\n    }))\n  );\n});","map":null,"metadata":{},"sourceType":"module"}