{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.isHtml = exports.cloneDom = exports.domEach = exports.cssCase = exports.camelCase = exports.isCheerio = exports.isTag = void 0;\n\nvar htmlparser2_1 = require(\"htmlparser2\");\n\nvar domhandler_1 = require(\"domhandler\");\n/**\n * Check if the DOM element is a tag.\n *\n * `isTag(type)` includes `<script>` and `<style>` tags.\n *\n * @private\n * @category Utils\n * @param type - DOM node to check.\n * @returns Whether the node is a tag.\n */\n\n\nexports.isTag = htmlparser2_1.DomUtils.isTag;\n/**\n * Checks if an object is a Cheerio instance.\n *\n * @category Utils\n * @param maybeCheerio - The object to check.\n * @returns Whether the object is a Cheerio instance.\n */\n\nfunction isCheerio(maybeCheerio) {\n  return maybeCheerio.cheerio != null;\n}\n\nexports.isCheerio = isCheerio;\n/**\n * Convert a string to camel case notation.\n *\n * @private\n * @category Utils\n * @param str - String to be converted.\n * @returns String in camel case notation.\n */\n\nfunction camelCase(str) {\n  return str.replace(/[_.-](\\w|$)/g, function (_, x) {\n    return x.toUpperCase();\n  });\n}\n\nexports.camelCase = camelCase;\n/**\n * Convert a string from camel case to \"CSS case\", where word boundaries are\n * described by hyphens (\"-\") and all characters are lower-case.\n *\n * @private\n * @category Utils\n * @param str - String to be converted.\n * @returns String in \"CSS case\".\n */\n\nfunction cssCase(str) {\n  return str.replace(/[A-Z]/g, '-$&').toLowerCase();\n}\n\nexports.cssCase = cssCase;\n/**\n * Iterate over each DOM element without creating intermediary Cheerio instances.\n *\n * This is indented for use internally to avoid otherwise unnecessary memory\n * pressure introduced by _make.\n *\n * @category Utils\n * @param array - Array to iterate over.\n * @param fn - Function to call.\n * @returns The original instance.\n */\n\nfunction domEach(array, fn) {\n  var len = array.length;\n\n  for (var i = 0; i < len; i++) fn(array[i], i);\n\n  return array;\n}\n\nexports.domEach = domEach;\n/**\n * Create a deep copy of the given DOM structure. Sets the parents of the copies\n * of the passed nodes to `null`.\n *\n * @private\n * @category Utils\n * @param dom - The htmlparser2-compliant DOM structure.\n * @returns - The cloned DOM.\n */\n\nfunction cloneDom(dom) {\n  var clone = 'length' in dom ? Array.prototype.map.call(dom, function (el) {\n    return domhandler_1.cloneNode(el, true);\n  }) : [domhandler_1.cloneNode(dom, true)]; // Add a root node around the cloned nodes\n\n  var root = new domhandler_1.Document(clone);\n  clone.forEach(function (node) {\n    node.parent = root;\n  });\n  return clone;\n}\n\nexports.cloneDom = cloneDom;\n/**\n * A simple way to check for HTML strings. Tests for a `<` within a string,\n * immediate followed by a letter and eventually followed by a `>`.\n *\n * @private\n */\n\nvar quickExpr = /<[a-zA-Z][^]*>/;\n/**\n * Check if string is HTML.\n *\n * @private\n * @category Utils\n * @param str - String to check.\n * @returns Indicates if `str` is HTML.\n */\n\nfunction isHtml(str) {\n  // Run the regex\n  return quickExpr.test(str);\n}\n\nexports.isHtml = isHtml;","map":null,"metadata":{},"sourceType":"script"}