{"ast":null,"code":"import _slicedToArray from \"F:\\\\BlockChain\\\\Projects\\\\feedback-dapp\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nexport function partsToUrlMapper(data) {\n  const _data = _slicedToArray(data, 3),\n        scheme = _data[0],\n        authority = _data[1],\n        path = _data[2];\n\n  const query = data[3] === null ? '' : \"?\".concat(data[3]);\n  const fragments = data[4] === null ? '' : \"#\".concat(data[4]);\n  return \"\".concat(scheme, \"://\").concat(authority).concat(path).concat(query).concat(fragments);\n}\nconst UrlSplitRegex = /^([[A-Za-z][A-Za-z0-9+.-]*):\\/\\/([^/?#]*)([^?#]*)(\\?[A-Za-z0-9\\-._~!$&'()*+,;=:@/?%]*)?(#[A-Za-z0-9\\-._~!$&'()*+,;=:@/?%]*)?$/;\nexport function partsToUrlUnmapper(value) {\n  if (typeof value !== 'string') {\n    throw new Error('Incompatible value received: type');\n  }\n\n  const m = UrlSplitRegex.exec(value);\n\n  if (m === null) {\n    throw new Error('Incompatible value received');\n  }\n\n  const scheme = m[1];\n  const authority = m[2];\n  const path = m[3];\n  const query = m[4];\n  const fragments = m[5];\n  return [scheme, authority, path, query !== undefined ? query.substring(1) : null, fragments !== undefined ? fragments.substring(1) : null];\n}","map":null,"metadata":{},"sourceType":"module"}