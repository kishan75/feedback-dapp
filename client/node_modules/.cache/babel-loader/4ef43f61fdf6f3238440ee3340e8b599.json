{"ast":null,"code":"const debug = require(\"debug\")(\"contract:contract\");\n\nlet Web3 = require(\"web3\");\n\nconst webUtils = require(\"web3-utils\");\n\nconst execute = require(\"../execute\");\n\nconst bootstrap = require(\"./bootstrap\");\n\nconst constructorMethods = require(\"./constructorMethods\");\n\nconst properties = require(\"./properties\"); // For browserified version. If browserify gave us an empty version,\n// look for the one provided by the user.\n\n\nif (typeof Web3 === \"object\" && Object.keys(Web3).length === 0) {\n  Web3 = global.Web3;\n}\n\n(function (module) {\n  // Accepts a contract object created with web3.eth.Contract or an address.\n  function Contract(contract) {\n    var instance = this;\n    var constructor = instance.constructor; // Disambiguate between .at() and .new()\n\n    if (typeof contract === \"string\") {\n      var web3Instance = new constructor.web3.eth.Contract(constructor.abi);\n      web3Instance.options.address = contract;\n      contract = web3Instance;\n    } // Core:\n\n\n    instance.methods = {};\n    instance.abi = constructor.abi;\n    instance.address = contract.options.address;\n    instance.transactionHash = contract.transactionHash;\n    instance.contract = contract; //for stacktracing in tests\n\n    if (constructor.debugger) {\n      instance.debugger = constructor.debugger;\n    } // User defined methods, overloaded methods, events\n\n\n    instance.abi.forEach(function (item) {\n      switch (item.type) {\n        case \"function\":\n          var isConstant = [\"pure\", \"view\"].includes(item.stateMutability) || item.constant; // new form // deprecated case\n\n          var signature = webUtils._jsonInterfaceMethodToString(item);\n\n          var method = function (constant, web3Method) {\n            var fn;\n            constant ? fn = execute.call.call(constructor, web3Method, item, instance.address) : fn = execute.send.call(constructor, web3Method, item, instance.address);\n            fn.call = execute.call.call(constructor, web3Method, item, instance.address);\n            fn.sendTransaction = execute.send.call(constructor, web3Method, item, instance.address);\n            fn.estimateGas = execute.estimate.call(constructor, web3Method, item, instance.address);\n            fn.request = execute.request.call(constructor, web3Method, item, instance.address);\n            return fn;\n          }; // Only define methods once. Any overloaded methods will have all their\n          // accessors available by ABI signature available on the `methods` key below.\n\n\n          if (instance[item.name] === undefined) {\n            instance[item.name] = method(isConstant, contract.methods[item.name]);\n          } // Overloaded methods should be invoked via the .methods property\n\n\n          instance.methods[signature] = method(isConstant, contract.methods[signature]);\n          break;\n\n        case \"event\":\n          instance[item.name] = execute.event.call(constructor, contract.events[item.name]);\n          break;\n      }\n    }); // sendTransaction / send\n\n    instance.sendTransaction = execute.send.call(constructor, null, null, instance.address); // Prefer user defined `send`\n\n    if (!instance.send) {\n      instance.send = (value, txParams = {}) => {\n        const packet = Object.assign({\n          value: value\n        }, txParams);\n        return instance.sendTransaction(packet);\n      };\n    } // Other events\n\n\n    instance.allEvents = execute.allEvents.call(constructor, contract);\n    instance.getPastEvents = execute.getPastEvents.call(constructor, contract);\n  }\n\n  Contract._constructorMethods = constructorMethods(Contract); // Getter functions are scoped to Contract object.\n\n  Contract._properties = properties;\n  bootstrap(Contract);\n  module.exports = Contract;\n  return Contract;\n})(module || {});","map":null,"metadata":{},"sourceType":"script"}