{"ast":null,"code":"import TransactorJSON from '../contracts/Transactor.json';\nimport BHUTokenJSON from '../contracts/BHUToken.json';\nimport FeedbackDataJSON from '../contracts/FeedbackData.json';\nimport Web3 from 'web3';\nexport let web3;\n\nvar contract = require(\"@truffle/contract\");\n\nexport const loadAll = async () => {\n  web3 = await loadWeb3();\n  const accountAddress = await loadAccount();\n\n  const _ref = await loadContracts(),\n        transactorContract = _ref.transactorContract,\n        bhuTokenContract = _ref.bhuTokenContract,\n        feedbackDataContract = _ref.feedbackDataContract;\n\n  const accountBalance = loadBalance(transactorContract, accountAddress);\n  return {\n    accountAddress,\n    accountBalance,\n    transactorContract,\n    bhuTokenContract,\n    feedbackDataContract\n  };\n};\n\nconst loadContracts = async () => {\n  let theContract = contract(TransactorJSON);\n  theContract.setProvider(web3.eth.currentProvider);\n  const transactorContract = await theContract.deployed();\n  theContract = contract(BHUTokenJSON);\n  theContract.setProvider(web3.eth.currentProvider);\n  const bhuTokenContract = await theContract.deployed();\n  theContract = contract(FeedbackDataJSON);\n  theContract.setProvider(web3.eth.currentProvider);\n  const feedbackDataContract = await theContract.deployed();\n  return {\n    transactorContract,\n    bhuTokenContract,\n    feedbackDataContract\n  };\n};\n\nexport const loadAccount = async () => {\n  const addressAccount = await web3.eth.getCoinbase();\n  return addressAccount;\n};\nexport const loadBalance = async (transactorContract, accountAddress) => {\n  const accountBalance = await transactorContract.checkBalance(accountAddress);\n  return accountBalance;\n};\nexport const loadProfessorData = async (transactorContract, accountAddress) => {\n  const accountBalance = await transactorContract.checkBalance(accountAddress);\n  return accountBalance;\n}; // export const loadAccountChange = async () => {\n//     const web3 = await loadWeb3();\n//     const addressAccount = await web3.eth.getCoinbase();\n//     const accountBalance = await transactorContract.checkBalance(accountAddress);\n//     return {web3, addressAccount, accountBalance};\n// }\n// Web3 loading needs to be updated\n\nexport const loadWeb3 = async () => {\n  // Modern dapp browsers...\n  if (window.ethereum) {\n    const web3 = new Web3(window.ethereum);\n\n    try {\n      // Request account access if needed\n      await window.ethereum.enable(); // Acccounts now exposed\n\n      return web3;\n    } catch (error) {\n      console.error(error);\n    }\n  } // Legacy dapp browsers...\n  else if (window.web3) {\n      // Use Mist/MetaMask's provider.\n      const web3 = window.web3;\n      console.log(\"Injected web3 detected.\");\n      return web3;\n    } // Fallback to localhost; use dev console port by default...\n    else {\n        const provider = new Web3.providers.HttpProvider(\"http://127.0.0.1:9545\");\n        const web3 = new Web3(provider);\n        console.log(\"No web3 instance injected, using Local web3.\");\n        return web3;\n      }\n};","map":{"version":3,"sources":["F:/BlockChain/Projects/feedback-dapp/client/src/scripts/loader.js"],"names":["TransactorJSON","BHUTokenJSON","FeedbackDataJSON","Web3","web3","contract","require","loadAll","loadWeb3","accountAddress","loadAccount","loadContracts","transactorContract","bhuTokenContract","feedbackDataContract","accountBalance","loadBalance","theContract","setProvider","eth","currentProvider","deployed","addressAccount","getCoinbase","checkBalance","loadProfessorData","window","ethereum","enable","error","console","log","provider","providers","HttpProvider"],"mappings":"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","sourcesContent":["import TransactorJSON from '../contracts/Transactor.json';\r\nimport BHUTokenJSON from '../contracts/BHUToken.json';\r\nimport FeedbackDataJSON from '../contracts/FeedbackData.json';\r\nimport Web3 from 'web3';\r\n\r\nexport let web3;\r\nvar contract = require(\"@truffle/contract\");\r\n\r\nexport const loadAll = async () => {\r\n  web3 = await loadWeb3();\r\n  const accountAddress = await loadAccount();\r\n  const { transactorContract, bhuTokenContract, feedbackDataContract } = await loadContracts();\r\n  const accountBalance = loadBalance(transactorContract, accountAddress)\r\n\r\n  return { accountAddress, accountBalance, transactorContract, bhuTokenContract, feedbackDataContract };\r\n};\r\n\r\nconst loadContracts = async () => {\r\n  let theContract = contract(TransactorJSON);\r\n  theContract.setProvider(web3.eth.currentProvider);\r\n  const transactorContract = await theContract.deployed();\r\n\r\n  theContract = contract(BHUTokenJSON);\r\n  theContract.setProvider(web3.eth.currentProvider);\r\n  const bhuTokenContract = await theContract.deployed();\r\n\r\n  theContract = contract(FeedbackDataJSON);\r\n  theContract.setProvider(web3.eth.currentProvider);\r\n  const feedbackDataContract = await theContract.deployed();\r\n\r\n  return { transactorContract, bhuTokenContract, feedbackDataContract }\r\n};\r\n\r\nexport const loadAccount = async () => {\r\n  const addressAccount = await web3.eth.getCoinbase();\r\n  return addressAccount;\r\n};\r\n\r\nexport const loadBalance = async (transactorContract, accountAddress) => {\r\n  const accountBalance = await transactorContract.checkBalance(accountAddress);\r\n  return accountBalance;\r\n}\r\n\r\nexport const loadProfessorData = async (transactorContract, accountAddress) => {\r\n  const accountBalance = await transactorContract.checkBalance(accountAddress);\r\n  return accountBalance;\r\n}\r\n\r\n// export const loadAccountChange = async () => {\r\n//     const web3 = await loadWeb3();\r\n//     const addressAccount = await web3.eth.getCoinbase();\r\n//     const accountBalance = await transactorContract.checkBalance(accountAddress);\r\n//     return {web3, addressAccount, accountBalance};\r\n// }\r\n\r\n// Web3 loading needs to be updated\r\nexport const loadWeb3 = async () => {\r\n  // Modern dapp browsers...\r\n  if (window.ethereum) {\r\n    const web3 = new Web3(window.ethereum);\r\n    try {\r\n      // Request account access if needed\r\n      await window.ethereum.enable();\r\n      // Acccounts now exposed\r\n      return web3;\r\n    } catch (error) {\r\n      console.error(error);\r\n    }\r\n  }\r\n  // Legacy dapp browsers...\r\n  else if (window.web3) {\r\n    // Use Mist/MetaMask's provider.\r\n    const web3 = window.web3;\r\n    console.log(\"Injected web3 detected.\");\r\n    return web3;\r\n  }\r\n  // Fallback to localhost; use dev console port by default...\r\n  else {\r\n    const provider = new Web3.providers.HttpProvider(\"http://127.0.0.1:9545\");\r\n    const web3 = new Web3(provider);\r\n    console.log(\"No web3 instance injected, using Local web3.\");\r\n    return web3;\r\n  }\r\n};\r\n"]},"metadata":{},"sourceType":"module"}