{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.tie = void 0;\n\nconst debug_1 = __importDefault(require(\"debug\"));\n\nconst debug = debug_1.default(\"codec:format:utils:circularity\");\n\nfunction tie(untied) {\n  return tieWithTable(untied, []);\n}\n\nexports.tie = tie;\n\nfunction tieWithTable(untied, seenSoFar) {\n  if (untied.kind === \"error\") {\n    return untied;\n  }\n\n  let reference;\n\n  switch (untied.type.typeClass) {\n    case \"array\":\n      let untiedAsArray = untied; //dammit TS\n\n      reference = untiedAsArray.reference;\n\n      if (reference === undefined) {\n        //we need to do some pointer stuff here, so let's first create our new\n        //object we'll be pointing to\n        //[we don't want to alter the original accidentally so let's clone a bit]\n        let tied = Object.assign(Object.assign({}, untiedAsArray), {\n          value: [...untiedAsArray.value]\n        }); //now, we can't use a map here, or we'll screw things up!\n        //we want to *mutate* value, not replace it with a new object\n\n        for (let index in tied.value) {\n          tied.value[index] = tieWithTable(tied.value[index], [tied, ...seenSoFar]);\n        }\n\n        return tied;\n      } else {\n        return Object.assign(Object.assign({}, seenSoFar[reference - 1]), {\n          reference\n        });\n      }\n\n    case \"struct\":\n      let untiedAsStruct = untied; //dammit TS\n\n      reference = untiedAsStruct.reference;\n\n      if (reference === undefined) {\n        //we need to do some pointer stuff here, so let's first create our new\n        //object we'll be pointing to\n        //[we don't want to alter the original accidentally so let's clone a bit]\n        let tied = Object.assign(Object.assign({}, untiedAsStruct), {\n          value: untiedAsStruct.value.map(component => Object.assign({}, component))\n        }); //now, we can't use a map here, or we'll screw things up!\n        //we want to *mutate* value, not replace it with a new object\n\n        for (let index in tied.value) {\n          tied.value[index] = Object.assign(Object.assign({}, tied.value[index]), {\n            value: tieWithTable(tied.value[index].value, [tied, ...seenSoFar])\n          });\n        }\n\n        return tied;\n      } else {\n        return Object.assign(Object.assign({}, seenSoFar[reference - 1]), {\n          reference\n        });\n      }\n\n    case \"tuple\":\n      //currently there are no memory tuples, but may as well\n      //can't be circular, just recurse\n      //note we can just recurse with a straight tie here; don't need tieWithTable\n      let untiedAsTuple = untied; //dammit TS\n      //we need to do some pointer stuff here, so let's first create our new\n      //object we'll be pointing to\n\n      let tied = Object.assign({}, untiedAsTuple);\n      tied.value = tied.value.map(component => Object.assign(Object.assign({}, component), {\n        value: tie(component.value)\n      }));\n      return tied;\n\n    default:\n      //other types either:\n      //1. aren't containers and so need no recursion\n      //2. are containers but can't go in or contain memory things\n      //and so still need no recursion\n      //(or, in the case of mappings, can't contain *nontrivial* memory\n      //things)\n      return untied;\n  }\n}","map":null,"metadata":{},"sourceType":"script"}