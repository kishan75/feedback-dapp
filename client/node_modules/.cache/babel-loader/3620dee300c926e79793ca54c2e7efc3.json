{"ast":null,"code":"const TruffleError = require(\"@truffle/error\");\n\nconst utils = require(\"./utils\");\n\nconst defaultGas = 90000;\n\nclass StatusError extends TruffleError {\n  constructor(args, tx, receipt, reason) {\n    let message;\n    const gasLimit = args.gas || defaultGas;\n    let reasonString = \"\";\n    if (reason) reasonString = \"Reason given: \".concat(reason, \".\");\n\n    if (utils.bigNumberify(receipt.gasUsed).eq(utils.bigNumberify(gasLimit))) {\n      message = \"Transaction: \" + tx + \" exited with an error (status 0) after consuming all gas.\\n\" + \"     Please check that the transaction:\\n\" + \"     - satisfies all conditions set by Solidity `assert` statements.\\n\" + \"     - has enough gas to execute the full transaction.\\n\" + \"     - does not trigger an invalid opcode by other means (ex: accessing an array out of bounds).\";\n    } else {\n      message = \"Transaction: \".concat(tx, \" exited with an error (status 0). \").concat(reasonString, \"\\n\") + \"     Please check that the transaction:\\n\" + \"     - satisfies all conditions set by Solidity `require` statements.\\n\" + \"     - does not trigger a Solidity `revert` statement.\\n\";\n    }\n\n    super(message);\n    this.tx = tx;\n    this.receipt = receipt;\n    this.reason = reason;\n  }\n\n}\n\nmodule.exports = StatusError;","map":null,"metadata":{},"sourceType":"script"}