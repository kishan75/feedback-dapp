{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { unstable_composeClasses as composeClasses } from '@mui/material';\nimport IconButton from '@mui/material/IconButton';\nimport InputLabel from '@mui/material/InputLabel';\nimport FormControl from '@mui/material/FormControl';\nimport { capitalize, unstable_useId as useId } from '@mui/material/utils';\nimport { styled } from '@mui/material/styles';\nimport clsx from 'clsx';\nimport { gridFilterableColumnDefinitionsSelector } from '../../../hooks/features/columns/gridColumnsSelector';\nimport { useGridSelector } from '../../../hooks/utils/useGridSelector';\nimport { GridLinkOperator } from '../../../models/gridFilterItem';\nimport { useGridApiContext } from '../../../hooks/utils/useGridApiContext';\nimport { useGridRootProps } from '../../../hooks/utils/useGridRootProps';\nimport { getDataGridUtilityClass } from '../../../constants/gridClasses';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nconst useUtilityClasses = ownerState => {\n  const classes = ownerState.classes;\n  const slots = {\n    root: ['filterForm'],\n    deleteIcon: ['filterFormDeleteIcon'],\n    linkOperatorInput: ['filterFormLinkOperatorInput'],\n    columnInput: ['filterFormColumnInput'],\n    operatorInput: ['filterFormOperatorInput'],\n    valueInput: ['filterFormValueInput']\n  };\n  return composeClasses(slots, getDataGridUtilityClass, classes);\n};\n\nconst GridFilterFormRoot = styled('div', {\n  name: 'MuiDataGrid',\n  slot: 'FilterForm',\n  overridesResolver: (props, styles) => styles.filterForm\n})(({\n  theme\n}) => ({\n  display: 'flex',\n  padding: theme.spacing(1)\n}));\nconst FilterFormDeleteIcon = styled(FormControl, {\n  name: 'MuiDataGrid',\n  slot: 'FilterFormDeleteIcon',\n  overridesResolver: (_, styles) => styles.filterFormDeleteIcon\n})(({\n  theme\n}) => ({\n  flexShrink: 0,\n  justifyContent: 'flex-end',\n  marginRight: theme.spacing(0.5),\n  marginBottom: theme.spacing(0.2)\n}));\nconst FilterFormLinkOperatorInput = styled(FormControl, {\n  name: 'MuiDataGrid',\n  slot: 'FilterFormLinkOperatorInput',\n  overridesResolver: (_, styles) => styles.filterFormLinkOperatorInput\n})({\n  minWidth: 55,\n  marginRight: 5,\n  justifyContent: 'end'\n});\nconst FilterFormColumnInput = styled(FormControl, {\n  name: 'MuiDataGrid',\n  slot: 'FilterFormColumnInput',\n  overridesResolver: (_, styles) => styles.filterFormColumnInput\n})({\n  width: 150\n});\nconst FilterFormOperatorInput = styled(FormControl, {\n  name: 'MuiDataGrid',\n  slot: 'FilterFormOperatorInput',\n  overridesResolver: (_, styles) => styles.filterFormOperatorInput\n})({\n  width: 120\n});\nconst FilterFormValueInput = styled(FormControl, {\n  name: 'MuiDataGrid',\n  slot: 'FilterFormValueInput',\n  overridesResolver: (_, styles) => styles.filterFormValueInput\n})({\n  width: 190\n});\n\nconst getLinkOperatorLocaleKey = linkOperator => {\n  switch (linkOperator) {\n    case GridLinkOperator.And:\n      return 'filterPanelOperatorAnd';\n\n    case GridLinkOperator.Or:\n      return 'filterPanelOperatorOr';\n\n    default:\n      throw new Error('MUI: Invalid `linkOperator` property in the `GridFilterPanel`.');\n  }\n};\n\nconst getColumnLabel = col => col.headerName || col.field;\n\nconst collator = new Intl.Collator();\n\nfunction GridFilterForm(props) {\n  var _rootProps$components, _rootProps$components2, _rootProps$components3, _rootProps$components4, _currentColumn$filter2;\n\n  const item = props.item,\n        hasMultipleFilters = props.hasMultipleFilters,\n        deleteFilter = props.deleteFilter,\n        applyFilterChanges = props.applyFilterChanges,\n        multiFilterOperator = props.multiFilterOperator,\n        showMultiFilterOperators = props.showMultiFilterOperators,\n        disableMultiFilterOperator = props.disableMultiFilterOperator,\n        applyMultiFilterOperatorChanges = props.applyMultiFilterOperatorChanges,\n        focusElementRef = props.focusElementRef,\n        _props$linkOperators = props.linkOperators,\n        linkOperators = _props$linkOperators === void 0 ? [GridLinkOperator.And, GridLinkOperator.Or] : _props$linkOperators,\n        columnsSort = props.columnsSort,\n        _props$deleteIconProp = props.deleteIconProps,\n        deleteIconProps = _props$deleteIconProp === void 0 ? {} : _props$deleteIconProp,\n        _props$linkOperatorIn = props.linkOperatorInputProps,\n        linkOperatorInputProps = _props$linkOperatorIn === void 0 ? {} : _props$linkOperatorIn,\n        _props$operatorInputP = props.operatorInputProps,\n        operatorInputProps = _props$operatorInputP === void 0 ? {} : _props$operatorInputP,\n        _props$columnInputPro = props.columnInputProps,\n        columnInputProps = _props$columnInputPro === void 0 ? {} : _props$columnInputPro,\n        _props$valueInputProp = props.valueInputProps,\n        valueInputProps = _props$valueInputProp === void 0 ? {} : _props$valueInputProp;\n  const apiRef = useGridApiContext();\n  const filterableColumns = useGridSelector(apiRef, gridFilterableColumnDefinitionsSelector);\n  const columnSelectId = useId();\n  const columnSelectLabelId = useId();\n  const operatorSelectId = useId();\n  const operatorSelectLabelId = useId();\n  const rootProps = useGridRootProps();\n  const ownerState = {\n    classes: rootProps.classes\n  };\n  const classes = useUtilityClasses(ownerState);\n  const valueRef = React.useRef(null);\n  const filterSelectorRef = React.useRef(null);\n  const hasLinkOperatorColumn = hasMultipleFilters && linkOperators.length > 0;\n  const baseFormControlProps = ((_rootProps$components = rootProps.componentsProps) == null ? void 0 : _rootProps$components.baseFormControl) || {};\n  const sortedFilterableColumns = React.useMemo(() => {\n    switch (columnsSort) {\n      case 'asc':\n        return filterableColumns.sort((a, b) => collator.compare(getColumnLabel(a), getColumnLabel(b)));\n\n      case 'desc':\n        return filterableColumns.sort((a, b) => -collator.compare(getColumnLabel(a), getColumnLabel(b)));\n\n      default:\n        return filterableColumns;\n    }\n  }, [filterableColumns, columnsSort]);\n  const currentColumn = item.columnField ? apiRef.current.getColumn(item.columnField) : null;\n  const currentOperator = React.useMemo(() => {\n    var _currentColumn$filter;\n\n    if (!item.operatorValue || !currentColumn) {\n      return null;\n    }\n\n    return (_currentColumn$filter = currentColumn.filterOperators) == null ? void 0 : _currentColumn$filter.find(operator => operator.value === item.operatorValue);\n  }, [item, currentColumn]);\n  const changeColumn = React.useCallback(event => {\n    const columnField = event.target.value;\n    const column = apiRef.current.getColumn(columnField);\n\n    if (column.field === currentColumn.field) {\n      // column did not change\n      return;\n    } // try to keep the same operator when column change\n\n\n    const newOperator = column.filterOperators.find(operator => operator.value === item.operatorValue) || column.filterOperators[0]; // Erase filter value if the input component is modified\n\n    const eraseItemValue = !newOperator.InputComponent || newOperator.InputComponent !== (currentOperator == null ? void 0 : currentOperator.InputComponent);\n    applyFilterChanges(_extends({}, item, {\n      columnField,\n      operatorValue: newOperator.value,\n      value: eraseItemValue ? undefined : item.value\n    }));\n  }, [apiRef, applyFilterChanges, item, currentColumn, currentOperator]);\n  const changeOperator = React.useCallback(event => {\n    const operatorValue = event.target.value;\n    const newOperator = currentColumn == null ? void 0 : currentColumn.filterOperators.find(operator => operator.value === operatorValue);\n    const eraseItemValue = !(newOperator != null && newOperator.InputComponent) || (newOperator == null ? void 0 : newOperator.InputComponent) !== (currentOperator == null ? void 0 : currentOperator.InputComponent);\n    applyFilterChanges(_extends({}, item, {\n      operatorValue,\n      value: eraseItemValue ? undefined : item.value\n    }));\n  }, [applyFilterChanges, item, currentColumn, currentOperator]);\n  const changeLinkOperator = React.useCallback(event => {\n    const linkOperator = event.target.value === GridLinkOperator.And.toString() ? GridLinkOperator.And : GridLinkOperator.Or;\n    applyMultiFilterOperatorChanges(linkOperator);\n  }, [applyMultiFilterOperatorChanges]);\n\n  const handleDeleteFilter = () => {\n    if (rootProps.disableMultipleColumnsFiltering) {\n      if (item.value === undefined) {\n        deleteFilter(item);\n      } else {\n        // TODO v6: simplify the behavior by always remove the filter form\n        applyFilterChanges(_extends({}, item, {\n          value: undefined\n        }));\n      }\n    } else {\n      deleteFilter(item);\n    }\n  };\n\n  React.useImperativeHandle(focusElementRef, () => ({\n    focus: () => {\n      if (currentOperator != null && currentOperator.InputComponent) {\n        var _valueRef$current;\n\n        valueRef == null ? void 0 : (_valueRef$current = valueRef.current) == null ? void 0 : _valueRef$current.focus();\n      } else {\n        filterSelectorRef.current.focus();\n      }\n    }\n  }), [currentOperator]);\n  return (\n    /*#__PURE__*/\n    _jsxs(GridFilterFormRoot, {\n      className: classes.root,\n      children: [\n      /*#__PURE__*/\n      _jsx(FilterFormDeleteIcon, _extends({\n        variant: \"standard\",\n        as: rootProps.components.BaseFormControl\n      }, baseFormControlProps, deleteIconProps, {\n        className: clsx(classes.deleteIcon, baseFormControlProps.className, deleteIconProps.className),\n        children:\n        /*#__PURE__*/\n        _jsx(IconButton, {\n          \"aria-label\": apiRef.current.getLocaleText('filterPanelDeleteIconLabel'),\n          title: apiRef.current.getLocaleText('filterPanelDeleteIconLabel'),\n          onClick: handleDeleteFilter,\n          size: \"small\",\n          children:\n          /*#__PURE__*/\n          _jsx(rootProps.components.FilterPanelDeleteIcon, {\n            fontSize: \"small\"\n          })\n        })\n      })),\n      /*#__PURE__*/\n      _jsx(FilterFormLinkOperatorInput, _extends({\n        variant: \"standard\",\n        as: rootProps.components.BaseFormControl\n      }, baseFormControlProps, linkOperatorInputProps, {\n        sx: _extends({\n          display: hasLinkOperatorColumn ? 'flex' : 'none',\n          visibility: showMultiFilterOperators ? 'visible' : 'hidden'\n        }, baseFormControlProps.sx || {}, linkOperatorInputProps.sx || {}),\n        className: clsx(classes.linkOperatorInput, baseFormControlProps.className, linkOperatorInputProps.className),\n        children:\n        /*#__PURE__*/\n        _jsx(rootProps.components.BaseSelect, _extends({\n          inputProps: {\n            'aria-label': apiRef.current.getLocaleText('filterPanelLinkOperator')\n          },\n          value: multiFilterOperator,\n          onChange: changeLinkOperator,\n          disabled: !!disableMultiFilterOperator || linkOperators.length === 1,\n          native: true\n        }, (_rootProps$components2 = rootProps.componentsProps) == null ? void 0 : _rootProps$components2.baseSelect, {\n          children: linkOperators.map(linkOperator =>\n          /*#__PURE__*/\n          _jsx(\"option\", {\n            value: linkOperator.toString(),\n            children: apiRef.current.getLocaleText(getLinkOperatorLocaleKey(linkOperator))\n          }, linkOperator.toString()))\n        }))\n      })),\n      /*#__PURE__*/\n      _jsxs(FilterFormColumnInput, _extends({\n        variant: \"standard\",\n        as: rootProps.components.BaseFormControl\n      }, baseFormControlProps, columnInputProps, {\n        className: clsx(classes.columnInput, baseFormControlProps.className, columnInputProps.className),\n        children: [\n        /*#__PURE__*/\n        _jsx(InputLabel, {\n          htmlFor: columnSelectId,\n          id: columnSelectLabelId,\n          children: apiRef.current.getLocaleText('filterPanelColumns')\n        }),\n        /*#__PURE__*/\n        _jsx(rootProps.components.BaseSelect, _extends({\n          labelId: columnSelectLabelId,\n          id: columnSelectId,\n          label: apiRef.current.getLocaleText('filterPanelColumns'),\n          value: item.columnField || '',\n          onChange: changeColumn,\n          native: true\n        }, (_rootProps$components3 = rootProps.componentsProps) == null ? void 0 : _rootProps$components3.baseSelect, {\n          children: sortedFilterableColumns.map(col =>\n          /*#__PURE__*/\n          _jsx(\"option\", {\n            value: col.field,\n            children: getColumnLabel(col)\n          }, col.field))\n        }))]\n      })),\n      /*#__PURE__*/\n      _jsxs(FilterFormOperatorInput, _extends({\n        variant: \"standard\",\n        as: rootProps.components.BaseFormControl\n      }, baseFormControlProps, operatorInputProps, {\n        className: clsx(classes.operatorInput, baseFormControlProps.className, operatorInputProps.className),\n        children: [\n        /*#__PURE__*/\n        _jsx(InputLabel, {\n          htmlFor: operatorSelectId,\n          id: operatorSelectLabelId,\n          children: apiRef.current.getLocaleText('filterPanelOperators')\n        }),\n        /*#__PURE__*/\n        _jsx(rootProps.components.BaseSelect, _extends({\n          labelId: operatorSelectLabelId,\n          label: apiRef.current.getLocaleText('filterPanelOperators'),\n          id: operatorSelectId,\n          value: item.operatorValue,\n          onChange: changeOperator,\n          native: true,\n          inputRef: filterSelectorRef\n        }, (_rootProps$components4 = rootProps.componentsProps) == null ? void 0 : _rootProps$components4.baseSelect, {\n          children: currentColumn == null ? void 0 : (_currentColumn$filter2 = currentColumn.filterOperators) == null ? void 0 : _currentColumn$filter2.map(operator =>\n          /*#__PURE__*/\n          _jsx(\"option\", {\n            value: operator.value,\n            children: operator.label || apiRef.current.getLocaleText(\"filterOperator\".concat(capitalize(operator.value)))\n          }, operator.value))\n        }))]\n      })),\n      /*#__PURE__*/\n      _jsx(FilterFormValueInput, _extends({\n        variant: \"standard\",\n        as: rootProps.components.BaseFormControl\n      }, baseFormControlProps, valueInputProps, {\n        className: clsx(classes.valueInput, baseFormControlProps.className, valueInputProps.className),\n        children: currentOperator != null && currentOperator.InputComponent ?\n        /*#__PURE__*/\n        _jsx(currentOperator.InputComponent, _extends({\n          apiRef: apiRef,\n          item: item,\n          applyValue: applyFilterChanges,\n          focusElementRef: valueRef\n        }, currentOperator.InputComponentProps)) : null\n      }))]\n    })\n  );\n}\n\nprocess.env.NODE_ENV !== \"production\" ? GridFilterForm.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // | To update them edit the TypeScript types and run \"yarn proptypes\"  |\n  // ----------------------------------------------------------------------\n  applyFilterChanges: PropTypes.func.isRequired,\n  applyMultiFilterOperatorChanges: PropTypes.func.isRequired,\n  columnInputProps: PropTypes.any,\n  columnsSort: PropTypes.oneOf(['asc', 'desc']),\n  deleteFilter: PropTypes.func.isRequired,\n  deleteIconProps: PropTypes.any,\n  disableMultiFilterOperator: PropTypes.bool,\n  focusElementRef: PropTypes\n  /* @typescript-to-proptypes-ignore */\n  .oneOfType([PropTypes.func, PropTypes.object]),\n  hasMultipleFilters: PropTypes.bool.isRequired,\n  item: PropTypes.shape({\n    columnField: PropTypes.string.isRequired,\n    id: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n    operatorValue: PropTypes.string,\n    value: PropTypes.any\n  }).isRequired,\n  linkOperatorInputProps: PropTypes.any,\n  linkOperators: PropTypes.arrayOf(PropTypes.oneOf(['and', 'or']).isRequired),\n  multiFilterOperator: PropTypes.oneOf(['and', 'or']),\n  operatorInputProps: PropTypes.any,\n  showMultiFilterOperators: PropTypes.bool,\n  valueInputProps: PropTypes.any\n} : void 0;\nexport { GridFilterForm };","map":null,"metadata":{},"sourceType":"module"}