{"ast":null,"code":"import _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nconst _excluded = [\"children\", \"className\", \"cols\", \"component\", \"rows\", \"style\"];\nimport { unstable_composeClasses as composeClasses } from '@mui/base';\nimport { integerPropType } from '@mui/utils';\nimport clsx from 'clsx';\nimport PropTypes from 'prop-types';\nimport * as React from 'react';\nimport { isFragment } from 'react-is';\nimport ImageListContext from '../ImageList/ImageListContext';\nimport styled from '../styles/styled';\nimport useThemeProps from '../styles/useThemeProps';\nimport isMuiElement from '../utils/isMuiElement';\nimport imageListItemClasses, { getImageListItemUtilityClass } from './imageListItemClasses';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nconst useUtilityClasses = ownerState => {\n  const classes = ownerState.classes,\n        variant = ownerState.variant;\n  const slots = {\n    root: ['root', variant],\n    img: ['img']\n  };\n  return composeClasses(slots, getImageListItemUtilityClass, classes);\n};\n\nconst ImageListItemRoot = styled('li', {\n  name: 'MuiImageListItem',\n  slot: 'Root',\n  overridesResolver: (props, styles) => {\n    const ownerState = props.ownerState;\n    return [{\n      [\"& .\".concat(imageListItemClasses.img)]: styles.img\n    }, styles.root, styles[ownerState.variant]];\n  }\n})(({\n  ownerState\n}) => _extends({\n  display: 'inline-block',\n  position: 'relative',\n  lineHeight: 0\n}, ownerState.variant === 'standard' && {\n  // For titlebar under list item\n  display: 'flex',\n  flexDirection: 'column'\n}, ownerState.variant === 'woven' && {\n  height: '100%',\n  alignSelf: 'center',\n  '&:nth-of-type(even)': {\n    height: '70%'\n  }\n}, {\n  [\"& .\".concat(imageListItemClasses.img)]: _extends({\n    objectFit: 'cover',\n    width: '100%',\n    height: '100%'\n  }, ownerState.variant === 'standard' && {\n    height: 'auto',\n    flexGrow: 1\n  })\n}));\nconst ImageListItem =\n/*#__PURE__*/\nReact.forwardRef(function ImageListItem(inProps, ref) {\n  const props = useThemeProps({\n    props: inProps,\n    name: 'MuiImageListItem'\n  }); // TODO: - Use jsdoc @default?: \"cols rows default values are for docs only\"\n\n  const children = props.children,\n        className = props.className,\n        _props$cols = props.cols,\n        cols = _props$cols === void 0 ? 1 : _props$cols,\n        _props$component = props.component,\n        component = _props$component === void 0 ? 'li' : _props$component,\n        _props$rows = props.rows,\n        rows = _props$rows === void 0 ? 1 : _props$rows,\n        style = props.style,\n        other = _objectWithoutPropertiesLoose(props, _excluded);\n\n  const _React$useContext = React.useContext(ImageListContext),\n        _React$useContext$row = _React$useContext.rowHeight,\n        rowHeight = _React$useContext$row === void 0 ? 'auto' : _React$useContext$row,\n        gap = _React$useContext.gap,\n        variant = _React$useContext.variant;\n\n  let height = 'auto';\n\n  if (variant === 'woven') {\n    height = undefined;\n  } else if (rowHeight !== 'auto') {\n    height = rowHeight * rows + gap * (rows - 1);\n  }\n\n  const ownerState = _extends({}, props, {\n    cols,\n    component,\n    gap,\n    rowHeight,\n    rows,\n    variant\n  });\n\n  const classes = useUtilityClasses(ownerState);\n  return (\n    /*#__PURE__*/\n    _jsx(ImageListItemRoot, _extends({\n      as: component,\n      className: clsx(classes.root, classes[variant], className),\n      ref: ref,\n      style: _extends({\n        height,\n        gridColumnEnd: variant !== 'masonry' ? \"span \".concat(cols) : undefined,\n        gridRowEnd: variant !== 'masonry' ? \"span \".concat(rows) : undefined,\n        marginBottom: variant === 'masonry' ? gap : undefined\n      }, style),\n      ownerState: ownerState\n    }, other, {\n      children: React.Children.map(children, child => {\n        if (!\n        /*#__PURE__*/\n        React.isValidElement(child)) {\n          return null;\n        }\n\n        if (process.env.NODE_ENV !== 'production') {\n          if (isFragment(child)) {\n            console.error([\"MUI: The ImageListItem component doesn't accept a Fragment as a child.\", 'Consider providing an array instead.'].join('\\n'));\n          }\n        }\n\n        if (child.type === 'img' || isMuiElement(child, ['Image'])) {\n          return (\n            /*#__PURE__*/\n            React.cloneElement(child, {\n              className: clsx(classes.img, child.props.className)\n            })\n          );\n        }\n\n        return child;\n      })\n    }))\n  );\n});\nprocess.env.NODE_ENV !== \"production\" ? ImageListItem.propTypes\n/* remove-proptypes */\n= {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * The content of the component, normally an `<img>`.\n   */\n  children: PropTypes.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * Width of the item in number of grid columns.\n   * @default 1\n   */\n  cols: integerPropType,\n\n  /**\n   * The component used for the root node.\n   * Either a string to use a HTML element or a component.\n   */\n  component: PropTypes.elementType,\n\n  /**\n   * Height of the item in number of grid rows.\n   * @default 1\n   */\n  rows: integerPropType,\n\n  /**\n   * @ignore\n   */\n  style: PropTypes.object,\n\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object])\n} : void 0;\nexport default ImageListItem;","map":null,"metadata":{},"sourceType":"module"}