{"ast":null,"code":"'use strict';\n\nconst Mixin = require('../../utils/mixin');\n\nclass PositionTrackingPreprocessorMixin extends Mixin {\n  constructor(preprocessor) {\n    super(preprocessor);\n    this.preprocessor = preprocessor;\n    this.isEol = false;\n    this.lineStartPos = 0;\n    this.droppedBufferSize = 0;\n    this.offset = 0;\n    this.col = 0;\n    this.line = 1;\n  }\n\n  _getOverriddenMethods(mxn, orig) {\n    return {\n      advance() {\n        const pos = this.pos + 1;\n        const ch = this.html[pos]; //NOTE: LF should be in the last column of the line\n\n        if (mxn.isEol) {\n          mxn.isEol = false;\n          mxn.line++;\n          mxn.lineStartPos = pos;\n        }\n\n        if (ch === '\\n' || ch === '\\r' && this.html[pos + 1] !== '\\n') {\n          mxn.isEol = true;\n        }\n\n        mxn.col = pos - mxn.lineStartPos + 1;\n        mxn.offset = mxn.droppedBufferSize + pos;\n        return orig.advance.call(this);\n      },\n\n      retreat() {\n        orig.retreat.call(this);\n        mxn.isEol = false;\n        mxn.col = this.pos - mxn.lineStartPos + 1;\n      },\n\n      dropParsedChunk() {\n        const prevPos = this.pos;\n        orig.dropParsedChunk.call(this);\n        const reduction = prevPos - this.pos;\n        mxn.lineStartPos -= reduction;\n        mxn.droppedBufferSize += reduction;\n        mxn.offset = mxn.droppedBufferSize + this.pos;\n      }\n\n    };\n  }\n\n}\n\nmodule.exports = PositionTrackingPreprocessorMixin;","map":null,"metadata":{},"sourceType":"script"}