{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { unstable_composeClasses as composeClasses } from '@mui/material';\nimport IconButton from '@mui/material/IconButton';\nimport Badge from '@mui/material/Badge';\nimport { gridPreferencePanelStateSelector } from '../../hooks/features/preferencesPanel/gridPreferencePanelSelector';\nimport { GridPreferencePanelsValue } from '../../hooks/features/preferencesPanel/gridPreferencePanelsValue';\nimport { useGridApiContext } from '../../hooks/utils/useGridApiContext';\nimport { getDataGridUtilityClass } from '../../constants/gridClasses';\nimport { useGridRootProps } from '../../hooks/utils/useGridRootProps';\nimport { GridIconButtonContainer } from './GridIconButtonContainer';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nconst useUtilityClasses = ownerState => {\n  const classes = ownerState.classes;\n  const slots = {\n    icon: ['filterIcon']\n  };\n  return composeClasses(slots, getDataGridUtilityClass, classes);\n};\n\nexport function ColumnHeaderFilterIcon(props) {\n  var _rootProps$components;\n\n  const counter = props.counter;\n  const apiRef = useGridApiContext();\n  const rootProps = useGridRootProps();\n\n  const ownerState = _extends({}, props, {\n    classes: rootProps.classes\n  });\n\n  const classes = useUtilityClasses(ownerState);\n  const toggleFilter = React.useCallback(event => {\n    event.preventDefault();\n    event.stopPropagation();\n\n    const _gridPreferencePanelS = gridPreferencePanelStateSelector(apiRef.current.state),\n          open = _gridPreferencePanelS.open,\n          openedPanelValue = _gridPreferencePanelS.openedPanelValue;\n\n    if (open && openedPanelValue === GridPreferencePanelsValue.filters) {\n      apiRef.current.hideFilterPanel();\n    } else {\n      apiRef.current.showFilterPanel();\n    }\n  }, [apiRef]);\n\n  if (!counter) {\n    return null;\n  }\n\n  const iconButton =\n  /*#__PURE__*/\n  _jsx(IconButton, {\n    onClick: toggleFilter,\n    color: \"default\",\n    \"aria-label\": apiRef.current.getLocaleText('columnHeaderFiltersLabel'),\n    size: \"small\",\n    tabIndex: -1,\n    children:\n    /*#__PURE__*/\n    _jsx(rootProps.components.ColumnFilteredIcon, {\n      className: classes.icon,\n      fontSize: \"small\"\n    })\n  });\n\n  return (\n    /*#__PURE__*/\n    _jsx(rootProps.components.BaseTooltip, _extends({\n      title: apiRef.current.getLocaleText('columnHeaderFiltersTooltipActive')(counter),\n      enterDelay: 1000\n    }, (_rootProps$components = rootProps.componentsProps) == null ? void 0 : _rootProps$components.baseTooltip, {\n      children:\n      /*#__PURE__*/\n      _jsxs(GridIconButtonContainer, {\n        children: [counter > 1 &&\n        /*#__PURE__*/\n        _jsx(Badge, {\n          badgeContent: counter,\n          color: \"default\",\n          children: iconButton\n        }), counter === 1 && iconButton]\n      })\n    }))\n  );\n}","map":null,"metadata":{},"sourceType":"module"}