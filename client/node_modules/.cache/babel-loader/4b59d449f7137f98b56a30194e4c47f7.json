{"ast":null,"code":"import _slicedToArray from \"F:\\\\BlockChain\\\\Projects\\\\feedback-dapp-full\\\\feedback-dapp\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { unstable_composeClasses as composeClasses } from '@mui/material';\nimport { unstable_useId as useId } from '@mui/material/utils';\nimport { GridEvents } from '../../models/events';\nimport { useGridApiContext } from '../../hooks/utils/useGridApiContext';\nimport { GridColumnHeaderSortIcon } from './GridColumnHeaderSortIcon';\nimport { GridColumnHeaderTitle } from './GridColumnHeaderTitle';\nimport { GridColumnHeaderSeparator } from './GridColumnHeaderSeparator';\nimport { ColumnHeaderMenuIcon } from './ColumnHeaderMenuIcon';\nimport { ColumnHeaderFilterIcon } from './ColumnHeaderFilterIcon';\nimport { GridColumnHeaderMenu } from '../menu/columnMenu/GridColumnHeaderMenu';\nimport { getDataGridUtilityClass } from '../../constants/gridClasses';\nimport { useGridRootProps } from '../../hooks/utils/useGridRootProps';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nconst useUtilityClasses = ownerState => {\n  const column = ownerState.column,\n        classes = ownerState.classes,\n        isDragging = ownerState.isDragging,\n        sortDirection = ownerState.sortDirection,\n        showRightBorder = ownerState.showRightBorder;\n  const isColumnSorted = sortDirection != null; // todo refactor to a prop on col isNumeric or ?? ie: coltype===price wont work\n\n  const isColumnNumeric = column.type === 'number';\n  const slots = {\n    root: ['columnHeader', column.headerAlign === 'left' && 'columnHeader--alignLeft', column.headerAlign === 'center' && 'columnHeader--alignCenter', column.headerAlign === 'right' && 'columnHeader--alignRight', column.sortable && 'columnHeader--sortable', isDragging && 'columnHeader--moving', isColumnSorted && 'columnHeader--sorted', isColumnNumeric && 'columnHeader--numeric', showRightBorder && 'withBorder'],\n    draggableContainer: ['columnHeaderDraggableContainer'],\n    titleContainer: ['columnHeaderTitleContainer'],\n    titleContainerContent: ['columnHeaderTitleContainerContent']\n  };\n  return composeClasses(slots, getDataGridUtilityClass, classes);\n};\n\nfunction GridColumnHeaderItem(props) {\n  var _apiRef$current$getRo, _column$sortingOrder, _column$headerName, _rootProps$components;\n\n  const column = props.column,\n        columnMenuOpen = props.columnMenuOpen,\n        colIndex = props.colIndex,\n        headerHeight = props.headerHeight,\n        isResizing = props.isResizing,\n        isLastColumn = props.isLastColumn,\n        sortDirection = props.sortDirection,\n        sortIndex = props.sortIndex,\n        filterItemsCounter = props.filterItemsCounter,\n        hasFocus = props.hasFocus,\n        tabIndex = props.tabIndex,\n        extendRowFullWidth = props.extendRowFullWidth,\n        disableReorder = props.disableReorder,\n        separatorSide = props.separatorSide;\n  const apiRef = useGridApiContext();\n  const rootProps = useGridRootProps();\n  const headerCellRef = React.useRef(null);\n  const columnMenuId = useId();\n  const columnMenuButtonId = useId();\n  const iconButtonRef = React.useRef(null);\n\n  const _React$useState = React.useState(columnMenuOpen),\n        _React$useState2 = _slicedToArray(_React$useState, 2),\n        showColumnMenuIcon = _React$useState2[0],\n        setShowColumnMenuIcon = _React$useState2[1];\n\n  const _ref = (_apiRef$current$getRo = apiRef.current.getRootDimensions()) != null ? _apiRef$current$getRo : {\n    hasScrollX: false,\n    hasScrollY: false\n  },\n        hasScrollX = _ref.hasScrollX,\n        hasScrollY = _ref.hasScrollY;\n\n  let headerComponent = null;\n\n  if (column.renderHeader) {\n    headerComponent = column.renderHeader(apiRef.current.getColumnHeaderParams(column.field));\n  }\n\n  const publish = React.useCallback(eventName => event => {\n    // Ignore portal\n    // See https://github.com/mui/mui-x/issues/1721\n    if (!event.currentTarget.contains(event.target)) {\n      return;\n    }\n\n    apiRef.current.publishEvent(eventName, apiRef.current.getColumnHeaderParams(column.field), event);\n  }, [apiRef, column.field]);\n  const mouseEventsHandlers = {\n    onClick: publish(GridEvents.columnHeaderClick),\n    onDoubleClick: publish(GridEvents.columnHeaderDoubleClick),\n    onMouseOver: publish(GridEvents.columnHeaderOver),\n    // TODO remove as it's not used\n    onMouseOut: publish(GridEvents.columnHeaderOut),\n    // TODO remove as it's not used\n    onMouseEnter: publish(GridEvents.columnHeaderEnter),\n    // TODO remove as it's not used\n    onMouseLeave: publish(GridEvents.columnHeaderLeave),\n    // TODO remove as it's not used\n    onKeyDown: publish(GridEvents.columnHeaderKeyDown),\n    onFocus: publish(GridEvents.columnHeaderFocus),\n    onBlur: publish(GridEvents.columnHeaderBlur)\n  };\n  const draggableEventHandlers = {\n    onDragStart: publish(GridEvents.columnHeaderDragStart),\n    onDragEnter: publish(GridEvents.columnHeaderDragEnter),\n    onDragOver: publish(GridEvents.columnHeaderDragOver),\n    onDragEnd: publish(GridEvents.columnHeaderDragEnd)\n  };\n  const removeLastBorderRight = isLastColumn && hasScrollX && !hasScrollY;\n  const showRightBorder = !isLastColumn ? rootProps.showColumnRightBorder : !removeLastBorderRight && !extendRowFullWidth;\n\n  const ownerState = _extends({}, props, {\n    classes: rootProps.classes,\n    showRightBorder\n  });\n\n  const classes = useUtilityClasses(ownerState);\n  const width = column.computedWidth;\n  let ariaSort;\n\n  if (sortDirection != null) {\n    ariaSort = sortDirection === 'asc' ? 'ascending' : 'descending';\n  }\n\n  React.useEffect(() => {\n    if (!showColumnMenuIcon) {\n      setShowColumnMenuIcon(columnMenuOpen);\n    }\n  }, [showColumnMenuIcon, columnMenuOpen]);\n  const handleExited = React.useCallback(() => {\n    setShowColumnMenuIcon(false);\n  }, []);\n\n  const columnMenuIconButton = !rootProps.disableColumnMenu && !column.disableColumnMenu &&\n  /*#__PURE__*/\n  _jsx(ColumnHeaderMenuIcon, {\n    column: column,\n    columnMenuId: columnMenuId,\n    columnMenuButtonId: columnMenuButtonId,\n    open: showColumnMenuIcon,\n    iconButtonRef: iconButtonRef\n  });\n\n  const sortingOrder = (_column$sortingOrder = column.sortingOrder) != null ? _column$sortingOrder : rootProps.sortingOrder;\n\n  const columnTitleIconButtons =\n  /*#__PURE__*/\n  _jsxs(React.Fragment, {\n    children: [!rootProps.disableColumnFilter &&\n    /*#__PURE__*/\n    _jsx(ColumnHeaderFilterIcon, {\n      counter: filterItemsCounter\n    }), column.sortable && !column.hideSortIcons &&\n    /*#__PURE__*/\n    _jsx(GridColumnHeaderSortIcon, {\n      direction: sortDirection,\n      index: sortIndex,\n      sortingOrder: sortingOrder\n    })]\n  });\n\n  React.useLayoutEffect(() => {\n    const columnMenuState = apiRef.current.state.columnMenu;\n\n    if (hasFocus && !columnMenuState.open) {\n      const focusableElement = headerCellRef.current.querySelector('[tabindex=\"0\"]');\n\n      if (focusableElement) {\n        focusableElement.focus();\n      } else {\n        headerCellRef.current.focus();\n      }\n    }\n  });\n  const headerClassName = typeof column.headerClassName === 'function' ? column.headerClassName({\n    field: column.field,\n    colDef: column\n  }) : column.headerClassName;\n  return (\n    /*#__PURE__*/\n    _jsxs(\"div\", _extends({\n      ref: headerCellRef,\n      className: clsx(classes.root, headerClassName),\n      \"data-field\": column.field,\n      style: {\n        width,\n        minWidth: width,\n        maxWidth: width\n      },\n      role: \"columnheader\",\n      tabIndex: tabIndex,\n      \"aria-colindex\": colIndex + 1,\n      \"aria-sort\": ariaSort\n    }, mouseEventsHandlers, {\n      children: [\n      /*#__PURE__*/\n      _jsxs(\"div\", _extends({\n        className: classes.draggableContainer,\n        draggable: !rootProps.disableColumnReorder && !disableReorder && !column.disableReorder\n      }, draggableEventHandlers, {\n        children: [\n        /*#__PURE__*/\n        _jsxs(\"div\", {\n          className: classes.titleContainer,\n          children: [\n          /*#__PURE__*/\n          _jsx(\"div\", {\n            className: classes.titleContainerContent,\n            children: headerComponent ||\n            /*#__PURE__*/\n            _jsx(GridColumnHeaderTitle, {\n              label: (_column$headerName = column.headerName) != null ? _column$headerName : column.field,\n              description: column.description,\n              columnWidth: width\n            })\n          }), columnTitleIconButtons]\n        }), columnMenuIconButton]\n      })),\n      /*#__PURE__*/\n      _jsx(GridColumnHeaderSeparator, {\n        resizable: !rootProps.disableColumnResize && !!column.resizable,\n        resizing: isResizing,\n        height: headerHeight,\n        onMouseDown: publish(GridEvents.columnSeparatorMouseDown),\n        side: separatorSide\n      }),\n      /*#__PURE__*/\n      _jsx(GridColumnHeaderMenu, {\n        columnMenuId: columnMenuId,\n        columnMenuButtonId: columnMenuButtonId,\n        field: column.field,\n        open: columnMenuOpen,\n        target: iconButtonRef.current,\n        ContentComponent: rootProps.components.ColumnMenu,\n        contentComponentProps: (_rootProps$components = rootProps.componentsProps) == null ? void 0 : _rootProps$components.columnMenu,\n        onExited: handleExited\n      })]\n    }))\n  );\n}\n\nprocess.env.NODE_ENV !== \"production\" ? GridColumnHeaderItem.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // | To update them edit the TypeScript types and run \"yarn proptypes\"  |\n  // ----------------------------------------------------------------------\n  colIndex: PropTypes.number.isRequired,\n  column: PropTypes.object.isRequired,\n  columnMenuOpen: PropTypes.bool.isRequired,\n  disableReorder: PropTypes.bool,\n  extendRowFullWidth: PropTypes.bool.isRequired,\n  filterItemsCounter: PropTypes.number,\n  hasFocus: PropTypes.bool,\n  headerHeight: PropTypes.number.isRequired,\n  isDragging: PropTypes.bool.isRequired,\n  isLastColumn: PropTypes.bool.isRequired,\n  isResizing: PropTypes.bool.isRequired,\n  separatorSide: PropTypes.oneOf(['left', 'right']),\n  sortDirection: PropTypes.oneOf(['asc', 'desc']),\n  sortIndex: PropTypes.number,\n  tabIndex: PropTypes.oneOf([-1, 0]).isRequired\n} : void 0;\nexport { GridColumnHeaderItem };","map":null,"metadata":{},"sourceType":"module"}