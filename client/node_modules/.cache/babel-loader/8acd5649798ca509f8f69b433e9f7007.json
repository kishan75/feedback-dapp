{"ast":null,"code":"import { ArrayArbitrary } from './_internals/ArrayArbitrary.js';\nimport { convertFromNext, convertToNext } from '../check/arbitrary/definition/Converters.js';\nimport { MaxLengthUpperBound, maxGeneratedLengthFromSizeForArbitrary } from './_internals/helpers/MaxLengthFromMinLength.js';\nimport { CustomEqualSet } from './_internals/helpers/CustomEqualSet.js';\nimport { StrictlyEqualSet } from './_internals/helpers/StrictlyEqualSet.js';\nimport { SameValueSet } from './_internals/helpers/SameValueSet.js';\nimport { SameValueZeroSet } from './_internals/helpers/SameValueZeroSet.js';\n\nfunction buildSetBuilder(constraints) {\n  const compare = constraints.compare || {};\n\n  if (typeof compare === 'function') {\n    const isEqualForBuilder = (nextA, nextB) => compare(nextA.value_, nextB.value_);\n\n    return () => new CustomEqualSet(isEqualForBuilder);\n  }\n\n  const selector = compare.selector || (v => v);\n\n  const refinedSelector = next => selector(next.value_);\n\n  switch (compare.type) {\n    case 'SameValue':\n      return () => new SameValueSet(refinedSelector);\n\n    case 'SameValueZero':\n      return () => new SameValueZeroSet(refinedSelector);\n\n    case 'IsStrictlyEqual':\n    case undefined:\n      return () => new StrictlyEqualSet(refinedSelector);\n  }\n}\n\nfunction buildCompleteSetConstraints(constraints) {\n  const minLength = constraints.minLength !== undefined ? constraints.minLength : 0;\n  const maxLength = constraints.maxLength !== undefined ? constraints.maxLength : MaxLengthUpperBound;\n  const maxGeneratedLength = maxGeneratedLengthFromSizeForArbitrary(constraints.size, minLength, maxLength, constraints.maxLength !== undefined);\n  const setBuilder = buildSetBuilder(constraints);\n  return {\n    minLength,\n    maxGeneratedLength,\n    maxLength,\n    setBuilder\n  };\n}\n\nfunction extractSetConstraints(args) {\n  if (args[0] === undefined) {\n    return {};\n  }\n\n  if (args[1] === undefined) {\n    const sargs = args;\n    if (typeof sargs[0] === 'number') return {\n      maxLength: sargs[0]\n    };\n    if (typeof sargs[0] === 'function') return {\n      compare: sargs[0]\n    };\n    return sargs[0];\n  }\n\n  if (args[2] === undefined) {\n    const sargs = args;\n    if (typeof sargs[1] === 'number') return {\n      minLength: sargs[0],\n      maxLength: sargs[1]\n    };\n    return {\n      maxLength: sargs[0],\n      compare: sargs[1]\n    };\n  }\n\n  const sargs = args;\n  return {\n    minLength: sargs[0],\n    maxLength: sargs[1],\n    compare: sargs[2]\n  };\n}\n\nfunction set(arb, ...args) {\n  const constraints = buildCompleteSetConstraints(extractSetConstraints(args));\n  const minLength = constraints.minLength;\n  const maxLength = constraints.maxLength;\n  const maxGeneratedLength = constraints.maxGeneratedLength;\n  const setBuilder = constraints.setBuilder;\n  const nextArb = convertToNext(arb);\n  const arrayArb = convertFromNext(new ArrayArbitrary(nextArb, minLength, maxGeneratedLength, maxLength, setBuilder));\n  if (minLength === 0) return arrayArb;\n  return arrayArb.filter(tab => tab.length >= minLength);\n}\n\nexport { set };","map":null,"metadata":{},"sourceType":"module"}