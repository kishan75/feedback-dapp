{"ast":null,"code":"\"use strict\";\n\nconst Blockchain = {\n  getBlockByNumber(blockNumber, provider, callback) {\n    const params = [blockNumber, true];\n    provider.send({\n      jsonrpc: \"2.0\",\n      method: \"eth_getBlockByNumber\",\n      params,\n      id: Date.now()\n    }, callback);\n  },\n\n  getBlockByHash(blockHash, provider, callback) {\n    const params = [blockHash, true];\n    provider.send({\n      jsonrpc: \"2.0\",\n      method: \"eth_getBlockByHash\",\n      params,\n      id: Date.now()\n    }, callback);\n  },\n\n  parse(uri) {\n    const parsed = {};\n    if (uri.indexOf(\"blockchain://\") !== 0) return parsed;\n    const cleanUri = uri.replace(\"blockchain://\", \"\");\n    const pieces = cleanUri.split(\"/block/\");\n    parsed.genesis_hash = \"0x\".concat(pieces[0]);\n    parsed.block_hash = \"0x\".concat(pieces[1]);\n    return parsed;\n  },\n\n  asURI(provider) {\n    return new Promise((resolve, reject) => {\n      let genesis, latest;\n      this.getBlockByNumber(\"0x0\", provider, (err, {\n        result\n      }) => {\n        if (err) return reject(err);\n        genesis = result;\n        this.getBlockByNumber(\"latest\", provider, (err, {\n          result\n        }) => {\n          if (err) return reject(err);\n          latest = result;\n          const url = \"blockchain://\".concat(genesis.hash.replace(\"0x\", \"\"), \"/block/\").concat(latest.hash.replace(\"0x\", \"\"));\n          resolve(url);\n        });\n      });\n    });\n  },\n\n  matches(uri, provider) {\n    return new Promise((resolve, reject) => {\n      const parsedUri = this.parse(uri);\n      const expectedGenesis = parsedUri.genesis_hash;\n      const expectedBlock = parsedUri.block_hash;\n      this.getBlockByNumber(\"0x0\", provider, (err, {\n        result\n      }) => {\n        if (err) return reject(err);\n        const block = result;\n        if (block.hash !== expectedGenesis) return resolve(false);\n        this.getBlockByHash(expectedBlock, provider, (err, {\n          result\n        }) => {\n          // Treat an error as if the block didn't exist. This is because\n          // some clients respond differently.\n          const block = result;\n\n          if (err || block == null) {\n            return resolve(false);\n          }\n\n          resolve(true);\n        });\n      });\n    });\n  }\n\n};\nmodule.exports = Blockchain;","map":null,"metadata":{},"sourceType":"script"}