{"ast":null,"code":"import _slicedToArray from \"F:\\\\BlockChain\\\\Projects\\\\feedback-dapp\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nconst _excluded = [\"item\", \"applyValue\", \"type\", \"apiRef\", \"focusElementRef\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport Autocomplete from '@mui/material/Autocomplete';\nimport Chip from '@mui/material/Chip';\nimport TextField from '@mui/material/TextField';\nimport { unstable_useId as useId } from '@mui/material/utils';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nfunction GridFilterInputMultipleValue(props) {\n  const item = props.item,\n        applyValue = props.applyValue,\n        type = props.type,\n        apiRef = props.apiRef,\n        focusElementRef = props.focusElementRef,\n        other = _objectWithoutPropertiesLoose(props, _excluded);\n\n  const _React$useState = React.useState(item.value || []),\n        _React$useState2 = _slicedToArray(_React$useState, 2),\n        filterValueState = _React$useState2[0],\n        setFilterValueState = _React$useState2[1];\n\n  const id = useId();\n  React.useEffect(() => {\n    var _item$value;\n\n    const itemValue = (_item$value = item.value) != null ? _item$value : [];\n    setFilterValueState(itemValue.map(String));\n  }, [item.value]);\n  const handleChange = React.useCallback((event, value) => {\n    setFilterValueState(value.map(String));\n    applyValue(_extends({}, item, {\n      value: [...value]\n    }));\n  }, [applyValue, item]);\n  return (\n    /*#__PURE__*/\n    _jsx(Autocomplete, _extends({\n      multiple: true,\n      freeSolo: true,\n      limitTags: 1,\n      options: [],\n      filterOptions: (options, params) => {\n        const inputValue = params.inputValue;\n        return inputValue == null || inputValue === '' ? [] : [inputValue];\n      },\n      id: id,\n      value: filterValueState,\n      onChange: handleChange,\n      renderTags: (value, getTagProps) => value.map((option, index) =>\n      /*#__PURE__*/\n      _jsx(Chip, _extends({\n        variant: \"outlined\",\n        size: \"small\",\n        label: option\n      }, getTagProps({\n        index\n      })))),\n      renderInput: params =>\n      /*#__PURE__*/\n      _jsx(TextField, _extends({}, params, {\n        label: apiRef.current.getLocaleText('filterPanelInputLabel'),\n        placeholder: apiRef.current.getLocaleText('filterPanelInputPlaceholder'),\n        InputLabelProps: _extends({}, params.InputLabelProps, {\n          shrink: true\n        }),\n        inputRef: focusElementRef,\n        type: type || 'text',\n        variant: \"standard\"\n      }))\n    }, other))\n  );\n}\n\nprocess.env.NODE_ENV !== \"production\" ? GridFilterInputMultipleValue.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // | To update them edit the TypeScript types and run \"yarn proptypes\"  |\n  // ----------------------------------------------------------------------\n  apiRef: PropTypes.any.isRequired,\n  applyValue: PropTypes.func.isRequired,\n  focusElementRef: PropTypes\n  /* @typescript-to-proptypes-ignore */\n  .oneOfType([PropTypes.func, PropTypes.object]),\n  item: PropTypes.shape({\n    columnField: PropTypes.string.isRequired,\n    id: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n    operatorValue: PropTypes.string,\n    value: PropTypes.any\n  }).isRequired,\n  type: PropTypes.oneOf(['number', 'text'])\n} : void 0;\nexport { GridFilterInputMultipleValue };","map":null,"metadata":{},"sourceType":"module"}