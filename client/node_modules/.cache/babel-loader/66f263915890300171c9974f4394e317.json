{"ast":null,"code":"import { convertFromNext, convertToNext } from '../check/arbitrary/definition/Converters.js';\nimport { nat } from './nat.js';\nimport { indexToMappedConstantMapperFor, indexToMappedConstantUnmapperFor } from './_internals/mappers/IndexToMappedConstant.js';\n\nfunction computeNumChoices(options) {\n  if (options.length === 0) throw new Error(\"fc.mapToConstant expects at least one option\");\n  let numChoices = 0;\n\n  for (let idx = 0; idx !== options.length; ++idx) {\n    if (options[idx].num < 0) throw new Error(\"fc.mapToConstant expects all options to have a number of entries greater or equal to zero\");\n    numChoices += options[idx].num;\n  }\n\n  if (numChoices === 0) throw new Error(\"fc.mapToConstant expects at least one choice among options\");\n  return numChoices;\n}\n\nexport function mapToConstant(...entries) {\n  const numChoices = computeNumChoices(entries);\n  return convertFromNext(convertToNext(nat({\n    max: numChoices - 1\n  })).map(indexToMappedConstantMapperFor(entries), indexToMappedConstantUnmapperFor(entries)));\n}","map":null,"metadata":{},"sourceType":"module"}