{"ast":null,"code":"export function wordsToJoinedStringMapper(words) {\n  return words.map(w => w[w.length - 1] === ',' ? w.substr(0, w.length - 1) : w).join(' ');\n}\nexport function wordsToJoinedStringUnmapperFor(wordsArbitrary) {\n  return function wordsToJoinedStringUnmapper(value) {\n    if (typeof value !== 'string') {\n      throw new Error('Unsupported type');\n    }\n\n    const words = [];\n\n    for (const candidate of value.split(' ')) {\n      if (wordsArbitrary.canShrinkWithoutContext(candidate)) words.push(candidate);else if (wordsArbitrary.canShrinkWithoutContext(candidate + ',')) words.push(candidate + ',');else throw new Error('Unsupported word');\n    }\n\n    return words;\n  };\n}\nexport function wordsToSentenceMapper(words) {\n  let sentence = words.join(' ');\n\n  if (sentence[sentence.length - 1] === ',') {\n    sentence = sentence.substr(0, sentence.length - 1);\n  }\n\n  return sentence[0].toUpperCase() + sentence.substring(1) + '.';\n}\nexport function wordsToSentenceUnmapperFor(wordsArbitrary) {\n  return function wordsToSentenceUnmapper(value) {\n    if (typeof value !== 'string') {\n      throw new Error('Unsupported type');\n    }\n\n    if (value.length < 2 || value[value.length - 1] !== '.' || value[value.length - 2] === ',' || value[0].toLowerCase().toUpperCase() !== value[0]) {\n      throw new Error('Unsupported value');\n    }\n\n    const adaptedValue = value[0].toLowerCase() + value.substring(1, value.length - 1);\n    const words = [];\n    const candidates = adaptedValue.split(' ');\n\n    for (let idx = 0; idx !== candidates.length; ++idx) {\n      const candidate = candidates[idx];\n      if (wordsArbitrary.canShrinkWithoutContext(candidate)) words.push(candidate);else if (idx === candidates.length - 1 && wordsArbitrary.canShrinkWithoutContext(candidate + ',')) words.push(candidate + ',');else throw new Error('Unsupported word');\n    }\n\n    return words;\n  };\n}\nexport function sentencesToParagraphMapper(sentences) {\n  return sentences.join(' ');\n}\nexport function sentencesToParagraphUnmapper(value) {\n  if (typeof value !== 'string') {\n    throw new Error('Unsupported type');\n  }\n\n  const sentences = value.split('. ');\n\n  for (let idx = 0; idx < sentences.length - 1; ++idx) {\n    sentences[idx] += '.';\n  }\n\n  return sentences;\n}","map":null,"metadata":{},"sourceType":"module"}