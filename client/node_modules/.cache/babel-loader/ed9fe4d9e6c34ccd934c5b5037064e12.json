{"ast":null,"code":"export function unsafeUniformBigIntDistribution(from, to, rng) {\n  var diff = to - from + BigInt(1);\n  var MinRng = BigInt(rng.min());\n  var NumValues = BigInt(rng.max() - rng.min() + 1);\n  var FinalNumValues = NumValues;\n  var NumIterations = BigInt(1);\n\n  while (FinalNumValues < diff) {\n    FinalNumValues *= NumValues;\n    ++NumIterations;\n  }\n\n  var MaxAcceptedRandom = FinalNumValues - FinalNumValues % diff;\n\n  while (true) {\n    var value = BigInt(0);\n\n    for (var num = BigInt(0); num !== NumIterations; ++num) {\n      var out = rng.unsafeNext();\n      value = NumValues * value + (BigInt(out) - MinRng);\n    }\n\n    if (value < MaxAcceptedRandom) {\n      var inDiff = value % diff;\n      return inDiff + from;\n    }\n  }\n}","map":null,"metadata":{},"sourceType":"module"}