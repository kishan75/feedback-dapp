{"ast":null,"code":"import { array } from './array.js';\nimport { buildLowerAlphaNumericArbitrary } from './_internals/builders/CharacterRangeArbitraryBuilder.js';\nimport { domain } from './domain.js';\nimport { stringOf } from './stringOf.js';\nimport { tuple } from './tuple.js';\nimport { convertFromNext, convertToNext } from '../check/arbitrary/definition/Converters.js';\nimport { adapter } from './_internals/AdapterArbitrary.js';\n\nfunction dotAdapter(a) {\n  let currentLength = a[0].length;\n\n  for (let index = 1; index !== a.length; ++index) {\n    currentLength += 1 + a[index].length;\n\n    if (currentLength > 64) {\n      return {\n        adapted: true,\n        value: a.slice(0, index)\n      };\n    }\n  }\n\n  return {\n    adapted: false,\n    value: a\n  };\n}\n\nfunction dotMapper(a) {\n  return a.join('.');\n}\n\nfunction dotUnmapper(value) {\n  if (typeof value !== 'string') {\n    throw new Error('Unsupported');\n  }\n\n  return value.split('.');\n}\n\nfunction atMapper(data) {\n  return \"\".concat(data[0], \"@\").concat(data[1]);\n}\n\nfunction atUnmapper(value) {\n  if (typeof value !== 'string') {\n    throw new Error('Unsupported');\n  }\n\n  return value.split('@', 2);\n}\n\nexport function emailAddress(constraints = {}) {\n  const others = ['!', '#', '$', '%', '&', \"'\", '*', '+', '-', '/', '=', '?', '^', '_', '`', '{', '|', '}', '~'];\n  const atextArb = buildLowerAlphaNumericArbitrary(others);\n  const localPartArb = convertFromNext(adapter(convertToNext(array(stringOf(atextArb, {\n    minLength: 1,\n    maxLength: 64,\n    size: constraints.size\n  }), {\n    minLength: 1,\n    maxLength: 32,\n    size: constraints.size\n  })), dotAdapter).map(dotMapper, dotUnmapper));\n  return convertFromNext(convertToNext(tuple(localPartArb, domain({\n    size: constraints.size\n  }))).map(atMapper, atUnmapper));\n}","map":null,"metadata":{},"sourceType":"module"}