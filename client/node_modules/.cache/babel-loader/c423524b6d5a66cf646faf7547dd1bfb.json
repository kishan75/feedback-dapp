{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nconst _excluded = [\"checked\", \"className\", \"component\", \"components\", \"componentsProps\", \"defaultChecked\", \"disabled\", \"onBlur\", \"onChange\", \"onFocus\", \"onFocusVisible\", \"readOnly\", \"required\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport useSwitch from './useSwitch';\nimport classes from './switchUnstyledClasses';\nimport appendOwnerState from '../utils/appendOwnerState';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n/**\n * The foundation for building custom-styled switches.\n *\n * Demos:\n *\n * - [Switches](https://mui.com/components/switches/)\n *\n * API:\n *\n * - [SwitchUnstyled API](https://mui.com/api/switch-unstyled/)\n */\n\nconst SwitchUnstyled =\n/*#__PURE__*/\nReact.forwardRef(function SwitchUnstyled(props, ref) {\n  var _ref, _components$Thumb, _componentsProps$thum, _components$Input, _componentsProps$inpu, _components$Track, _componentsProps$trac;\n\n  const checkedProp = props.checked,\n        className = props.className,\n        component = props.component,\n        _props$components = props.components,\n        components = _props$components === void 0 ? {} : _props$components,\n        _props$componentsProp = props.componentsProps,\n        componentsProps = _props$componentsProp === void 0 ? {} : _props$componentsProp,\n        defaultChecked = props.defaultChecked,\n        disabledProp = props.disabled,\n        onBlur = props.onBlur,\n        onChange = props.onChange,\n        onFocus = props.onFocus,\n        onFocusVisible = props.onFocusVisible,\n        readOnlyProp = props.readOnly,\n        otherProps = _objectWithoutPropertiesLoose(props, _excluded);\n\n  const useSwitchProps = {\n    checked: checkedProp,\n    defaultChecked,\n    disabled: disabledProp,\n    onBlur,\n    onChange,\n    onFocus,\n    onFocusVisible,\n    readOnly: readOnlyProp\n  };\n\n  const _useSwitch = useSwitch(useSwitchProps),\n        getInputProps = _useSwitch.getInputProps,\n        checked = _useSwitch.checked,\n        disabled = _useSwitch.disabled,\n        focusVisible = _useSwitch.focusVisible,\n        readOnly = _useSwitch.readOnly;\n\n  const ownerState = _extends({}, props, {\n    checked,\n    disabled,\n    focusVisible,\n    readOnly\n  });\n\n  const Root = (_ref = component != null ? component : components.Root) != null ? _ref : 'span';\n  const rootProps = appendOwnerState(Root, _extends({}, otherProps, componentsProps.root), ownerState);\n  const Thumb = (_components$Thumb = components.Thumb) != null ? _components$Thumb : 'span';\n  const thumbProps = appendOwnerState(Thumb, (_componentsProps$thum = componentsProps.thumb) != null ? _componentsProps$thum : {}, ownerState);\n  const Input = (_components$Input = components.Input) != null ? _components$Input : 'input';\n  const inputProps = appendOwnerState(Input, (_componentsProps$inpu = componentsProps.input) != null ? _componentsProps$inpu : {}, ownerState);\n  const Track = components.Track === null ? () => null : (_components$Track = components.Track) != null ? _components$Track : 'span';\n  const trackProps = appendOwnerState(Track, (_componentsProps$trac = componentsProps.track) != null ? _componentsProps$trac : {}, ownerState);\n  const stateClasses = clsx(checked && classes.checked, disabled && classes.disabled, focusVisible && classes.focusVisible, readOnly && classes.readOnly);\n  return (\n    /*#__PURE__*/\n    _jsxs(Root, _extends({\n      ref: ref\n    }, rootProps, {\n      className: clsx(classes.root, stateClasses, className, rootProps == null ? void 0 : rootProps.className),\n      children: [\n      /*#__PURE__*/\n      _jsx(Track, _extends({}, trackProps, {\n        className: clsx(classes.track, trackProps == null ? void 0 : trackProps.className)\n      })),\n      /*#__PURE__*/\n      _jsx(Thumb, _extends({}, thumbProps, {\n        className: clsx(classes.thumb, thumbProps == null ? void 0 : thumbProps.className)\n      })),\n      /*#__PURE__*/\n      _jsx(Input, _extends({}, getInputProps(inputProps), {\n        className: clsx(classes.input, inputProps == null ? void 0 : inputProps.className)\n      }))]\n    }))\n  );\n});\nprocess.env.NODE_ENV !== \"production\" ? SwitchUnstyled.propTypes\n/* remove-proptypes */\n= {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit TypeScript types and run \"yarn proptypes\"  |\n  // ----------------------------------------------------------------------\n\n  /**\n   * If `true`, the component is checked.\n   */\n  checked: PropTypes.bool,\n\n  /**\n   * Class name applied to the root element.\n   */\n  className: PropTypes.string,\n\n  /**\n   * The component used for the Root slot.\n   * Either a string to use a HTML element or a component.\n   * This is equivalent to `components.Root`. If both are provided, the `component` is used.\n   */\n  component: PropTypes.elementType,\n\n  /**\n   * The components used for each slot inside the Switch.\n   * Either a string to use a HTML element or a component.\n   * @default {}\n   */\n  components: PropTypes\n  /* @typescript-to-proptypes-ignore */\n  .shape({\n    Input: PropTypes.elementType,\n    Root: PropTypes.elementType,\n    Thumb: PropTypes.elementType,\n    Track: PropTypes.oneOfType([PropTypes.elementType, PropTypes.oneOf([null])])\n  }),\n\n  /**\n   * The props used for each slot inside the Switch.\n   * @default {}\n   */\n  componentsProps: PropTypes.shape({\n    input: PropTypes.object,\n    root: PropTypes.object,\n    thumb: PropTypes.object,\n    track: PropTypes.object\n  }),\n\n  /**\n   * The default checked state. Use when the component is not controlled.\n   */\n  defaultChecked: PropTypes.bool,\n\n  /**\n   * If `true`, the component is disabled.\n   */\n  disabled: PropTypes.bool,\n\n  /**\n   * @ignore\n   */\n  onBlur: PropTypes.func,\n\n  /**\n   * Callback fired when the state is changed.\n   *\n   * @param {React.ChangeEvent<HTMLInputElement>} event The event source of the callback.\n   * You can pull out the new value by accessing `event.target.value` (string).\n   * You can pull out the new checked state by accessing `event.target.checked` (boolean).\n   */\n  onChange: PropTypes.func,\n\n  /**\n   * @ignore\n   */\n  onFocus: PropTypes.func,\n\n  /**\n   * @ignore\n   */\n  onFocusVisible: PropTypes.func,\n\n  /**\n   * If `true`, the component is read only.\n   */\n  readOnly: PropTypes.bool,\n\n  /**\n   * If `true`, the `input` element is required.\n   */\n  required: PropTypes.bool\n} : void 0;\nexport default SwitchUnstyled;","map":null,"metadata":{},"sourceType":"module"}