{"ast":null,"code":"import { stringify } from '../../utils/stringify.js';\nimport { PreconditionFailure } from '../precondition/PreconditionFailure.js';\n\nfunction fromSyncCached(cachedValue) {\n  return cachedValue === null ? new PreconditionFailure() : cachedValue;\n}\n\nfunction fromCached(...data) {\n  if (data[1]) return data[0].then(fromSyncCached);\n  return fromSyncCached(data[0]);\n}\n\nfunction fromCachedUnsafe(cachedValue, isAsync) {\n  return fromCached(cachedValue, isAsync);\n}\n\nexport class IgnoreEqualValuesProperty {\n  constructor(property, skipRuns) {\n    this.property = property;\n    this.skipRuns = skipRuns;\n    this.coveredCases = new Map();\n  }\n\n  isAsync() {\n    return this.property.isAsync();\n  }\n\n  generate(mrng, runId) {\n    return this.property.generate(mrng, runId);\n  }\n\n  shrink(value) {\n    return this.property.shrink(value);\n  }\n\n  run(v) {\n    const stringifiedValue = stringify(v);\n\n    if (this.coveredCases.has(stringifiedValue)) {\n      const lastOutput = this.coveredCases.get(stringifiedValue);\n\n      if (!this.skipRuns) {\n        return lastOutput;\n      }\n\n      return fromCachedUnsafe(lastOutput, this.property.isAsync());\n    }\n\n    const out = this.property.run(v);\n    this.coveredCases.set(stringifiedValue, out);\n    return out;\n  }\n\n}","map":null,"metadata":{},"sourceType":"module"}