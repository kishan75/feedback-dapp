{"ast":null,"code":"'use strict';\n\nconst defaultTreeAdapter = require('../tree-adapters/default');\n\nconst mergeOptions = require('../utils/merge-options');\n\nconst doctype = require('../common/doctype');\n\nconst HTML = require('../common/html'); //Aliases\n\n\nconst $ = HTML.TAG_NAMES;\nconst NS = HTML.NAMESPACES; //Default serializer options\n\nconst DEFAULT_OPTIONS = {\n  treeAdapter: defaultTreeAdapter\n}; //Escaping regexes\n\nconst AMP_REGEX = /&/g;\nconst NBSP_REGEX = /\\u00a0/g;\nconst DOUBLE_QUOTE_REGEX = /\"/g;\nconst LT_REGEX = /</g;\nconst GT_REGEX = />/g; //Serializer\n\nclass Serializer {\n  constructor(node, options) {\n    this.options = mergeOptions(DEFAULT_OPTIONS, options);\n    this.treeAdapter = this.options.treeAdapter;\n    this.html = '';\n    this.startNode = node;\n  } //API\n\n\n  serialize() {\n    this._serializeChildNodes(this.startNode);\n\n    return this.html;\n  } //Internals\n\n\n  _serializeChildNodes(parentNode) {\n    const childNodes = this.treeAdapter.getChildNodes(parentNode);\n\n    if (childNodes) {\n      for (let i = 0, cnLength = childNodes.length; i < cnLength; i++) {\n        const currentNode = childNodes[i];\n\n        if (this.treeAdapter.isElementNode(currentNode)) {\n          this._serializeElement(currentNode);\n        } else if (this.treeAdapter.isTextNode(currentNode)) {\n          this._serializeTextNode(currentNode);\n        } else if (this.treeAdapter.isCommentNode(currentNode)) {\n          this._serializeCommentNode(currentNode);\n        } else if (this.treeAdapter.isDocumentTypeNode(currentNode)) {\n          this._serializeDocumentTypeNode(currentNode);\n        }\n      }\n    }\n  }\n\n  _serializeElement(node) {\n    const tn = this.treeAdapter.getTagName(node);\n    const ns = this.treeAdapter.getNamespaceURI(node);\n    this.html += '<' + tn;\n\n    this._serializeAttributes(node);\n\n    this.html += '>';\n\n    if (tn !== $.AREA && tn !== $.BASE && tn !== $.BASEFONT && tn !== $.BGSOUND && tn !== $.BR && tn !== $.COL && tn !== $.EMBED && tn !== $.FRAME && tn !== $.HR && tn !== $.IMG && tn !== $.INPUT && tn !== $.KEYGEN && tn !== $.LINK && tn !== $.META && tn !== $.PARAM && tn !== $.SOURCE && tn !== $.TRACK && tn !== $.WBR) {\n      const childNodesHolder = tn === $.TEMPLATE && ns === NS.HTML ? this.treeAdapter.getTemplateContent(node) : node;\n\n      this._serializeChildNodes(childNodesHolder);\n\n      this.html += '</' + tn + '>';\n    }\n  }\n\n  _serializeAttributes(node) {\n    const attrs = this.treeAdapter.getAttrList(node);\n\n    for (let i = 0, attrsLength = attrs.length; i < attrsLength; i++) {\n      const attr = attrs[i];\n      const value = Serializer.escapeString(attr.value, true);\n      this.html += ' ';\n\n      if (!attr.namespace) {\n        this.html += attr.name;\n      } else if (attr.namespace === NS.XML) {\n        this.html += 'xml:' + attr.name;\n      } else if (attr.namespace === NS.XMLNS) {\n        if (attr.name !== 'xmlns') {\n          this.html += 'xmlns:';\n        }\n\n        this.html += attr.name;\n      } else if (attr.namespace === NS.XLINK) {\n        this.html += 'xlink:' + attr.name;\n      } else {\n        this.html += attr.prefix + ':' + attr.name;\n      }\n\n      this.html += '=\"' + value + '\"';\n    }\n  }\n\n  _serializeTextNode(node) {\n    const content = this.treeAdapter.getTextNodeContent(node);\n    const parent = this.treeAdapter.getParentNode(node);\n    let parentTn = void 0;\n\n    if (parent && this.treeAdapter.isElementNode(parent)) {\n      parentTn = this.treeAdapter.getTagName(parent);\n    }\n\n    if (parentTn === $.STYLE || parentTn === $.SCRIPT || parentTn === $.XMP || parentTn === $.IFRAME || parentTn === $.NOEMBED || parentTn === $.NOFRAMES || parentTn === $.PLAINTEXT || parentTn === $.NOSCRIPT) {\n      this.html += content;\n    } else {\n      this.html += Serializer.escapeString(content, false);\n    }\n  }\n\n  _serializeCommentNode(node) {\n    this.html += '<!--' + this.treeAdapter.getCommentNodeContent(node) + '-->';\n  }\n\n  _serializeDocumentTypeNode(node) {\n    const name = this.treeAdapter.getDocumentTypeNodeName(node);\n    this.html += '<' + doctype.serializeContent(name, null, null) + '>';\n  }\n\n} // NOTE: used in tests and by rewriting stream\n\n\nSerializer.escapeString = function (str, attrMode) {\n  str = str.replace(AMP_REGEX, '&amp;').replace(NBSP_REGEX, '&nbsp;');\n\n  if (attrMode) {\n    str = str.replace(DOUBLE_QUOTE_REGEX, '&quot;');\n  } else {\n    str = str.replace(LT_REGEX, '&lt;').replace(GT_REGEX, '&gt;');\n  }\n\n  return str;\n};\n\nmodule.exports = Serializer;","map":null,"metadata":{},"sourceType":"script"}