{"ast":null,"code":"\"use strict\";\n\nvar _slicedToArray = require(\"F:\\\\BlockChain\\\\Projects\\\\feedback-dapp\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/slicedToArray\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.forBytecode = exports.forContract = exports.forContracts = void 0;\n\nfunction forContracts(contracts) {\n  // convert to list\n  return Object.values(contracts).map(forContract);\n}\n\nexports.forContracts = forContracts;\n\nfunction forContract(contract) {\n  const contractName = contract.contractName,\n        contract_name = contract.contract_name,\n        sourcePath = contract.sourcePath,\n        source = contract.source,\n        sourceMap = contract.sourceMap,\n        deployedSourceMap = contract.deployedSourceMap,\n        legacyAST = contract.legacyAST,\n        ast = contract.ast,\n        abi = contract.abi,\n        metadata = contract.metadata,\n        bytecode = contract.bytecode,\n        deployedBytecode = contract.deployedBytecode,\n        compiler = contract.compiler,\n        devdoc = contract.devdoc,\n        userdoc = contract.userdoc,\n        immutableReferences = contract.immutableReferences,\n        generatedSources = contract.generatedSources,\n        deployedGeneratedSources = contract.deployedGeneratedSources,\n        db = contract.db;\n  return {\n    contractName: contract_name || contractName,\n    sourcePath,\n    source,\n    sourceMap,\n    deployedSourceMap,\n    legacyAST,\n    ast,\n    abi,\n    metadata,\n    bytecode: forBytecode(bytecode),\n    deployedBytecode: forBytecode(deployedBytecode),\n    compiler,\n    devdoc,\n    userdoc,\n    immutableReferences,\n    generatedSources,\n    deployedGeneratedSources,\n    db\n  };\n}\n\nexports.forContract = forContract;\n\nfunction forBytecode(bytecode) {\n  if (!bytecode) {\n    return undefined;\n  }\n\n  if (typeof bytecode === \"object\") {\n    return bytecode;\n  }\n\n  const linkReferences = [];\n  const bytes = bytecode.slice(2) // remove 0x prefix\n  .replace(/__[^_]+_*/g, (linkReference, characterOffset) => {\n    const _linkReference$match = linkReference.match(/__([^_]+)_*/),\n          _linkReference$match2 = _slicedToArray(_linkReference$match, 2),\n          name = _linkReference$match2[1];\n\n    const characterLength = linkReference.length;\n    const offset = characterOffset / 2;\n    const length = characterLength / 2;\n    linkReferences.push({\n      offsets: [offset],\n      name,\n      length\n    });\n    return \"0\".repeat(characterLength);\n  });\n  return {\n    bytes,\n    linkReferences\n  };\n}\n\nexports.forBytecode = forBytecode;","map":null,"metadata":{},"sourceType":"script"}