{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport { formatMuiErrorMessage as _formatMuiErrorMessage } from \"@mui/utils\";\nconst _excluded = [\"colorSchemes\"],\n      _excluded2 = [\"colorSchemes\"],\n      _excluded3 = [\"components\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { GlobalStyles } from '@mui/styled-engine';\nimport { deepmerge, unstable_useEnhancedEffect as useEnhancedEffect } from '@mui/utils';\nimport createSpacing from '../createTheme/createSpacing';\nimport createBreakpoints from '../createTheme/createBreakpoints';\nimport cssVarsParser from './cssVarsParser';\nimport ThemeProvider from '../ThemeProvider';\nimport getInitColorSchemeScript, { DEFAULT_ATTRIBUTE, DEFAULT_MODE_STORAGE_KEY } from './getInitColorSchemeScript';\nimport useCurrentColorScheme from './useCurrentColorScheme';\nimport createGetCssVar from './createGetCssVar';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport const DISABLE_CSS_TRANSITION = '*{-webkit-transition:none!important;-moz-transition:none!important;-o-transition:none!important;-ms-transition:none!important;transition:none!important}';\nexport default function createCssVarsProvider(options) {\n  var _baseTheme$breakpoint;\n\n  const _options$theme = options.theme,\n        baseTheme = _options$theme === void 0 ? {} : _options$theme,\n        _options$defaultMode = options.defaultMode,\n        desisgnSystemMode = _options$defaultMode === void 0 ? 'light' : _options$defaultMode,\n        designSystemColorScheme = options.defaultColorScheme,\n        _options$disableTrans = options.disableTransitionOnChange,\n        designSystemTransitionOnChange = _options$disableTrans === void 0 ? false : _options$disableTrans,\n        _options$enableColorS = options.enableColorScheme,\n        designSystemEnableColorScheme = _options$enableColorS === void 0 ? true : _options$enableColorS,\n        _options$prefix = options.prefix,\n        designSystemPrefix = _options$prefix === void 0 ? '' : _options$prefix,\n        shouldSkipGeneratingVar = options.shouldSkipGeneratingVar,\n        resolveTheme = options.resolveTheme;\n  const systemSpacing = createSpacing(baseTheme.spacing);\n  const systemBreakpoints = createBreakpoints((_baseTheme$breakpoint = baseTheme.breakpoints) != null ? _baseTheme$breakpoint : {});\n\n  if (!baseTheme.colorSchemes || typeof designSystemColorScheme === 'string' && !baseTheme.colorSchemes[designSystemColorScheme] || typeof designSystemColorScheme === 'object' && !baseTheme.colorSchemes[designSystemColorScheme == null ? void 0 : designSystemColorScheme.light] || typeof designSystemColorScheme === 'object' && !baseTheme.colorSchemes[designSystemColorScheme == null ? void 0 : designSystemColorScheme.dark]) {\n    console.error(\"MUI: `\".concat(designSystemColorScheme, \"` does not exist in `theme.colorSchemes`.\"));\n  }\n\n  const ColorSchemeContext =\n  /*#__PURE__*/\n  React.createContext(undefined);\n\n  const useColorScheme = () => {\n    const value = React.useContext(ColorSchemeContext);\n\n    if (!value) {\n      throw new Error(process.env.NODE_ENV !== \"production\" ? \"MUI: `useColorScheme` must be called under <CssVarsProvider />\" : _formatMuiErrorMessage(19));\n    }\n\n    return value;\n  };\n\n  function CssVarsProvider({\n    children,\n    theme: themeProp = {},\n    prefix = designSystemPrefix,\n    modeStorageKey = DEFAULT_MODE_STORAGE_KEY,\n    attribute = DEFAULT_ATTRIBUTE,\n    defaultMode = desisgnSystemMode,\n    defaultColorScheme = designSystemColorScheme,\n    disableTransitionOnChange = designSystemTransitionOnChange,\n    enableColorScheme = designSystemEnableColorScheme\n  }) {\n    const _baseTheme$colorSchem = baseTheme.colorSchemes,\n          baseColorSchemes = _baseTheme$colorSchem === void 0 ? {} : _baseTheme$colorSchem,\n          restBaseTheme = _objectWithoutPropertiesLoose(baseTheme, _excluded);\n\n    const _themeProp$colorSchem = themeProp.colorSchemes,\n          colorSchemesProp = _themeProp$colorSchem === void 0 ? {} : _themeProp$colorSchem,\n          restThemeProp = _objectWithoutPropertiesLoose(themeProp, _excluded2);\n\n    const hasMounted = React.useRef(false); // eslint-disable-next-line prefer-const\n\n    let _deepmerge = deepmerge(restBaseTheme, restThemeProp),\n        _deepmerge$components = _deepmerge.components,\n        components = _deepmerge$components === void 0 ? {} : _deepmerge$components,\n        mergedTheme = _objectWithoutPropertiesLoose(_deepmerge, _excluded3);\n\n    const colorSchemes = deepmerge(baseColorSchemes, colorSchemesProp);\n    const allColorSchemes = Object.keys(colorSchemes);\n    const defaultLightColorScheme = typeof defaultColorScheme === 'string' ? defaultColorScheme : defaultColorScheme.light;\n    const defaultDarkColorScheme = typeof defaultColorScheme === 'string' ? defaultColorScheme : defaultColorScheme.dark;\n\n    const _useCurrentColorSchem = useCurrentColorScheme({\n      supportedColorSchemes: allColorSchemes,\n      defaultLightColorScheme,\n      defaultDarkColorScheme,\n      modeStorageKey,\n      defaultMode\n    }),\n          mode = _useCurrentColorSchem.mode,\n          setMode = _useCurrentColorSchem.setMode,\n          systemMode = _useCurrentColorSchem.systemMode,\n          lightColorScheme = _useCurrentColorSchem.lightColorScheme,\n          darkColorScheme = _useCurrentColorSchem.darkColorScheme,\n          colorScheme = _useCurrentColorSchem.colorScheme,\n          setColorScheme = _useCurrentColorSchem.setColorScheme;\n\n    const resolvedColorScheme = (() => {\n      if (!colorScheme) {\n        // This scope occurs on the server\n        if (defaultMode === 'dark') {\n          return defaultDarkColorScheme;\n        } // use light color scheme, if default mode is 'light' | 'auto'\n\n\n        return defaultLightColorScheme;\n      }\n\n      return colorScheme;\n    })();\n\n    const _cssVarsParser = cssVarsParser(mergedTheme, {\n      prefix,\n      basePrefix: designSystemPrefix,\n      shouldSkipGeneratingVar\n    }),\n          rootCss = _cssVarsParser.css,\n          rootVars = _cssVarsParser.vars,\n          parsedTheme = _cssVarsParser.parsedTheme;\n\n    mergedTheme = _extends({}, parsedTheme, {\n      components,\n      colorSchemes,\n      prefix,\n      vars: rootVars,\n      spacing: themeProp.spacing ? createSpacing(themeProp.spacing) : systemSpacing,\n      breakpoints: themeProp.breakpoints ? createBreakpoints(themeProp.breakpoints) : systemBreakpoints,\n      getCssVar: createGetCssVar(prefix)\n    });\n    const styleSheet = {};\n    Object.entries(colorSchemes).forEach(([key, scheme]) => {\n      const _cssVarsParser2 = cssVarsParser(scheme, {\n        prefix,\n        basePrefix: designSystemPrefix,\n        shouldSkipGeneratingVar\n      }),\n            css = _cssVarsParser2.css,\n            vars = _cssVarsParser2.vars,\n            parsedScheme = _cssVarsParser2.parsedTheme;\n\n      mergedTheme.vars = deepmerge(mergedTheme.vars, vars);\n\n      if (key === resolvedColorScheme) {\n        mergedTheme = _extends({}, mergedTheme, parsedScheme);\n      }\n\n      const resolvedDefaultColorScheme = (() => {\n        if (typeof defaultColorScheme === 'string') {\n          return defaultColorScheme;\n        }\n\n        if (defaultMode === 'dark') {\n          return defaultColorScheme.dark;\n        }\n\n        return defaultColorScheme.light;\n      })();\n\n      if (key === resolvedDefaultColorScheme) {\n        styleSheet[':root'] = css;\n      } else {\n        styleSheet[\"[\".concat(attribute, \"=\\\"\").concat(key, \"\\\"]\")] = css;\n      }\n    });\n    React.useEffect(() => {\n      if (colorScheme) {\n        // attaches attribute to <html> because the css variables are attached to :root (html)\n        document.documentElement.setAttribute(attribute, colorScheme);\n      }\n    }, [colorScheme, attribute]);\n    useEnhancedEffect(() => {\n      if (!mode || !enableColorScheme) {\n        return undefined;\n      }\n\n      const priorColorScheme = document.documentElement.style.getPropertyValue('color-scheme'); // `color-scheme` tells browser to render built-in elements according to its value: `light` or `dark`\n\n      if (mode === 'system') {\n        document.documentElement.style.setProperty('color-scheme', systemMode);\n      } else {\n        document.documentElement.style.setProperty('color-scheme', mode);\n      }\n\n      return () => {\n        document.documentElement.style.setProperty('color-scheme', priorColorScheme);\n      };\n    }, [mode, systemMode, enableColorScheme]);\n    React.useEffect(() => {\n      let timer;\n\n      if (disableTransitionOnChange && hasMounted.current) {\n        // credit: https://github.com/pacocoursey/next-themes/blob/b5c2bad50de2d61ad7b52a9c5cdc801a78507d7a/index.tsx#L313\n        const css = document.createElement('style');\n        css.appendChild(document.createTextNode(DISABLE_CSS_TRANSITION));\n        document.head.appendChild(css); // Force browser repaint\n\n        (() => window.getComputedStyle(document.body))();\n\n        timer = setTimeout(() => {\n          document.head.removeChild(css);\n        }, 1);\n      }\n\n      return () => {\n        clearTimeout(timer);\n      };\n    }, [colorScheme, disableTransitionOnChange]);\n    React.useEffect(() => {\n      hasMounted.current = true;\n      return () => {\n        hasMounted.current = false;\n      };\n    }, []);\n    return (\n      /*#__PURE__*/\n      _jsxs(ColorSchemeContext.Provider, {\n        value: {\n          mode,\n          setMode,\n          lightColorScheme,\n          darkColorScheme,\n          colorScheme,\n          setColorScheme,\n          allColorSchemes\n        },\n        children: [\n        /*#__PURE__*/\n        _jsx(GlobalStyles, {\n          styles: {\n            ':root': rootCss\n          }\n        }),\n        /*#__PURE__*/\n        _jsx(GlobalStyles, {\n          styles: styleSheet\n        }),\n        /*#__PURE__*/\n        _jsx(ThemeProvider, {\n          theme: resolveTheme ? resolveTheme(mergedTheme) : mergedTheme,\n          children: children\n        })]\n      })\n    );\n  }\n\n  process.env.NODE_ENV !== \"production\" ? CssVarsProvider.propTypes = {\n    /**\n     * The body attribute name to attach colorScheme.\n     */\n    attribute: PropTypes.string,\n\n    /**\n     * The component tree.\n     */\n    children: PropTypes.node,\n\n    /**\n     * The initial color scheme used.\n     */\n    defaultColorScheme: PropTypes.oneOfType([PropTypes.string, PropTypes.object]),\n\n    /**\n     * The initial mode used.\n     */\n    defaultMode: PropTypes.string,\n\n    /**\n     * Disable CSS transitions when switching between modes or color schemes\n     */\n    disableTransitionOnChange: PropTypes.bool,\n\n    /**\n     * Indicate to the browser which color scheme is used (light or dark) for rendering built-in UI\n     */\n    enableColorScheme: PropTypes.bool,\n\n    /**\n     * The key in the local storage used to store current color scheme.\n     */\n    modeStorageKey: PropTypes.string,\n\n    /**\n     * CSS variable prefix.\n     */\n    prefix: PropTypes.string,\n\n    /**\n     * The calculated theme object that will be passed through context.\n     */\n    theme: PropTypes.object\n  } : void 0;\n  return {\n    CssVarsProvider,\n    useColorScheme,\n    getInitColorSchemeScript\n  };\n}","map":null,"metadata":{},"sourceType":"module"}