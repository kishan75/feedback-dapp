{"ast":null,"code":"export function addArrayIntToNew(arrayIntA, arrayIntB) {\n  if (arrayIntA.sign !== arrayIntB.sign) {\n    return substractArrayIntToNew(arrayIntA, {\n      sign: -arrayIntB.sign,\n      data: arrayIntB.data\n    });\n  }\n\n  var data = [];\n  var reminder = 0;\n  var dataA = arrayIntA.data;\n  var dataB = arrayIntB.data;\n\n  for (var indexA = dataA.length - 1, indexB = dataB.length - 1; indexA >= 0 || indexB >= 0; --indexA, --indexB) {\n    var vA = indexA >= 0 ? dataA[indexA] : 0;\n    var vB = indexB >= 0 ? dataB[indexB] : 0;\n    var current = vA + vB + reminder;\n    data.push(current >>> 0);\n    reminder = ~~(current / 0x100000000);\n  }\n\n  if (reminder !== 0) {\n    data.push(reminder);\n  }\n\n  return {\n    sign: arrayIntA.sign,\n    data: data.reverse()\n  };\n}\nexport function addOneToPositiveArrayInt(arrayInt) {\n  arrayInt.sign = 1;\n  var data = arrayInt.data;\n\n  for (var index = data.length - 1; index >= 0; --index) {\n    if (data[index] === 0xffffffff) {\n      data[index] = 0;\n    } else {\n      data[index] += 1;\n      return arrayInt;\n    }\n  }\n\n  data.unshift(1);\n  return arrayInt;\n}\n\nfunction isStrictlySmaller(dataA, dataB) {\n  var maxLength = Math.max(dataA.length, dataB.length);\n\n  for (var index = 0; index < maxLength; ++index) {\n    var indexA = index + dataA.length - maxLength;\n    var indexB = index + dataB.length - maxLength;\n    var vA = indexA >= 0 ? dataA[indexA] : 0;\n    var vB = indexB >= 0 ? dataB[indexB] : 0;\n    if (vA < vB) return true;\n    if (vA > vB) return false;\n  }\n\n  return false;\n}\n\nexport function substractArrayIntToNew(arrayIntA, arrayIntB) {\n  if (arrayIntA.sign !== arrayIntB.sign) {\n    return addArrayIntToNew(arrayIntA, {\n      sign: -arrayIntB.sign,\n      data: arrayIntB.data\n    });\n  }\n\n  var dataA = arrayIntA.data;\n  var dataB = arrayIntB.data;\n\n  if (isStrictlySmaller(dataA, dataB)) {\n    var out = substractArrayIntToNew(arrayIntB, arrayIntA);\n    out.sign = -out.sign;\n    return out;\n  }\n\n  var data = [];\n  var reminder = 0;\n\n  for (var indexA = dataA.length - 1, indexB = dataB.length - 1; indexA >= 0 || indexB >= 0; --indexA, --indexB) {\n    var vA = indexA >= 0 ? dataA[indexA] : 0;\n    var vB = indexB >= 0 ? dataB[indexB] : 0;\n    var current = vA - vB - reminder;\n    data.push(current >>> 0);\n    reminder = current < 0 ? 1 : 0;\n  }\n\n  return {\n    sign: arrayIntA.sign,\n    data: data.reverse()\n  };\n}\nexport function trimArrayIntInplace(arrayInt) {\n  var data = arrayInt.data;\n  var firstNonZero = 0;\n\n  for (; firstNonZero !== data.length && data[firstNonZero] === 0; ++firstNonZero) {}\n\n  if (firstNonZero === data.length) {\n    arrayInt.sign = 1;\n    arrayInt.data = [0];\n    return arrayInt;\n  }\n\n  data.splice(0, firstNonZero);\n  return arrayInt;\n}\nexport function fromNumberToArrayInt64(out, n) {\n  if (n < 0) {\n    var posN = -n;\n    out.sign = -1;\n    out.data[0] = ~~(posN / 0x100000000);\n    out.data[1] = posN >>> 0;\n  } else {\n    out.sign = 1;\n    out.data[0] = ~~(n / 0x100000000);\n    out.data[1] = n >>> 0;\n  }\n\n  return out;\n}\nexport function substractArrayInt64(out, arrayIntA, arrayIntB) {\n  var lowA = arrayIntA.data[1];\n  var highA = arrayIntA.data[0];\n  var signA = arrayIntA.sign;\n  var lowB = arrayIntB.data[1];\n  var highB = arrayIntB.data[0];\n  var signB = arrayIntB.sign;\n  out.sign = 1;\n\n  if (signA === 1 && signB === -1) {\n    var low_1 = lowA + lowB;\n    var high = highA + highB + (low_1 > 0xffffffff ? 1 : 0);\n    out.data[0] = high >>> 0;\n    out.data[1] = low_1 >>> 0;\n    return out;\n  }\n\n  var lowFirst = lowA;\n  var highFirst = highA;\n  var lowSecond = lowB;\n  var highSecond = highB;\n\n  if (signA === -1) {\n    lowFirst = lowB;\n    highFirst = highB;\n    lowSecond = lowA;\n    highSecond = highA;\n  }\n\n  var reminderLow = 0;\n  var low = lowFirst - lowSecond;\n\n  if (low < 0) {\n    reminderLow = 1;\n    low = low >>> 0;\n  }\n\n  out.data[0] = highFirst - highSecond - reminderLow;\n  out.data[1] = low;\n  return out;\n}","map":null,"metadata":{},"sourceType":"module"}