{"ast":null,"code":"import _slicedToArray from \"F:\\\\BlockChain\\\\Projects\\\\feedback-dapp-full\\\\feedback-dapp\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nconst _excluded = [\"id\", \"value\", \"formattedValue\", \"api\", \"field\", \"row\", \"rowNode\", \"colDef\", \"cellMode\", \"isEditable\", \"tabIndex\", \"className\", \"getValue\", \"hasFocus\", \"isValidating\", \"error\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { unstable_useEnhancedEffect as useEnhancedEffect } from '@mui/material/utils';\nimport MenuItem from '@mui/material/MenuItem';\nimport { isEscapeKey } from '../../utils/keyboardUtils';\nimport { useGridRootProps } from '../../hooks/utils/useGridRootProps';\nimport { GridEditModes } from '../../models/gridEditRowModel';\nimport { GridEvents } from '../../models/events/gridEvents';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nconst renderSingleSelectOptions = option => typeof option === 'object' ?\n/*#__PURE__*/\n_jsx(MenuItem, {\n  value: option.value,\n  children: option.label\n}, option.value) :\n/*#__PURE__*/\n_jsx(MenuItem, {\n  value: option,\n  children: option\n}, option);\n\nfunction GridEditSingleSelectCell(props) {\n  var _rootProps$components;\n\n  const id = props.id,\n        value = props.value,\n        api = props.api,\n        field = props.field,\n        row = props.row,\n        colDef = props.colDef,\n        hasFocus = props.hasFocus,\n        error = props.error,\n        other = _objectWithoutPropertiesLoose(props, _excluded);\n\n  const ref = React.useRef();\n  const inputRef = React.useRef();\n  const rootProps = useGridRootProps();\n\n  const _React$useState = React.useState(rootProps.editMode === 'cell'),\n        _React$useState2 = _slicedToArray(_React$useState, 2),\n        open = _React$useState2[0],\n        setOpen = _React$useState2[1];\n\n  let valueOptionsFormatted;\n\n  if (typeof colDef.valueOptions === 'function') {\n    valueOptionsFormatted = colDef.valueOptions({\n      id,\n      row,\n      field\n    });\n  } else {\n    valueOptionsFormatted = colDef.valueOptions;\n  }\n\n  if (colDef.valueFormatter) {\n    valueOptionsFormatted = valueOptionsFormatted.map(option => {\n      if (typeof option === 'object') {\n        return option;\n      }\n\n      const params = {\n        field,\n        api,\n        value: option\n      };\n      return {\n        value: option,\n        label: String(colDef.valueFormatter(params))\n      };\n    });\n  }\n\n  const handleChange = async event => {\n    setOpen(false);\n    const isValid = await api.setEditCellValue({\n      id,\n      field,\n      value: event.target.value\n    }, event); // We use isValid === false because the default return is undefined which evaluates to true with !isValid\n\n    if (rootProps.editMode === GridEditModes.Row || isValid === false) {\n      return;\n    }\n\n    const canCommit = await Promise.resolve(api.commitCellChange({\n      id,\n      field\n    }, event));\n\n    if (canCommit) {\n      api.setCellMode(id, field, 'view');\n\n      if (event.key) {\n        // TODO v6: remove once we stop ignoring events fired from portals\n        const params = api.getCellParams(id, field);\n        api.publishEvent(GridEvents.cellNavigationKeyDown, params, event);\n      }\n    }\n  };\n\n  const handleClose = (event, reason) => {\n    if (rootProps.editMode === GridEditModes.Row) {\n      setOpen(false);\n      return;\n    }\n\n    if (reason === 'backdropClick' || isEscapeKey(event.key)) {\n      api.setCellMode(id, field, 'view');\n    }\n  };\n\n  const handleOpen = () => {\n    setOpen(true);\n  };\n\n  useEnhancedEffect(() => {\n    if (hasFocus) {\n      inputRef.current.focus();\n    }\n  }, [hasFocus]);\n  return (\n    /*#__PURE__*/\n    _jsx(rootProps.components.BaseSelect, _extends({\n      ref: ref,\n      inputRef: inputRef,\n      value: value,\n      onChange: handleChange,\n      open: open,\n      onOpen: handleOpen,\n      MenuProps: {\n        onClose: handleClose\n      },\n      error: error,\n      fullWidth: true\n    }, other, (_rootProps$components = rootProps.componentsProps) == null ? void 0 : _rootProps$components.baseSelect, {\n      children: valueOptionsFormatted.map(renderSingleSelectOptions)\n    }))\n  );\n}\n\nprocess.env.NODE_ENV !== \"production\" ? GridEditSingleSelectCell.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // | To update them edit the TypeScript types and run \"yarn proptypes\"  |\n  // ----------------------------------------------------------------------\n\n  /**\n   * GridApi that let you manipulate the grid.\n   * @deprecated Use the `apiRef` returned by `useGridApiContext` or `useGridApiRef` (only available in `@mui/x-data-grid-pro`)\n   */\n  api: PropTypes.any.isRequired,\n  isValidating: PropTypes.bool\n} : void 0;\nexport { GridEditSingleSelectCell };\nexport const renderEditSingleSelectCell = params =>\n/*#__PURE__*/\n_jsx(GridEditSingleSelectCell, _extends({}, params));","map":null,"metadata":{},"sourceType":"module"}