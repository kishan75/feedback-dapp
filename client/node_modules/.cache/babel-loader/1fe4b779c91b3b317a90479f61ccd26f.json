{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.compileToken = exports.compileUnsafe = exports.compile = void 0;\n\nvar css_what_1 = require(\"css-what\");\n\nvar boolbase_1 = require(\"boolbase\");\n\nvar sort_1 = __importDefault(require(\"./sort\"));\n\nvar procedure_1 = require(\"./procedure\");\n\nvar general_1 = require(\"./general\");\n\nvar subselects_1 = require(\"./pseudo-selectors/subselects\");\n/**\n * Compiles a selector to an executable function.\n *\n * @param selector Selector to compile.\n * @param options Compilation options.\n * @param context Optional context for the selector.\n */\n\n\nfunction compile(selector, options, context) {\n  var next = compileUnsafe(selector, options, context);\n  return (0, subselects_1.ensureIsTag)(next, options.adapter);\n}\n\nexports.compile = compile;\n\nfunction compileUnsafe(selector, options, context) {\n  var token = typeof selector === \"string\" ? (0, css_what_1.parse)(selector, options) : selector;\n  return compileToken(token, options, context);\n}\n\nexports.compileUnsafe = compileUnsafe;\n\nfunction includesScopePseudo(t) {\n  return t.type === \"pseudo\" && (t.name === \"scope\" || Array.isArray(t.data) && t.data.some(function (data) {\n    return data.some(includesScopePseudo);\n  }));\n}\n\nvar DESCENDANT_TOKEN = {\n  type: \"descendant\"\n};\nvar FLEXIBLE_DESCENDANT_TOKEN = {\n  type: \"_flexibleDescendant\"\n};\nvar SCOPE_TOKEN = {\n  type: \"pseudo\",\n  name: \"scope\",\n  data: null\n};\n/*\n * CSS 4 Spec (Draft): 3.3.1. Absolutizing a Scope-relative Selector\n * http://www.w3.org/TR/selectors4/#absolutizing\n */\n\nfunction absolutize(token, _a, context) {\n  var adapter = _a.adapter; // TODO Use better check if the context is a document\n\n  var hasContext = !!(context === null || context === void 0 ? void 0 : context.every(function (e) {\n    var parent = adapter.isTag(e) && adapter.getParent(e);\n    return e === subselects_1.PLACEHOLDER_ELEMENT || parent && adapter.isTag(parent);\n  }));\n\n  for (var _i = 0, token_1 = token; _i < token_1.length; _i++) {\n    var t = token_1[_i];\n\n    if (t.length > 0 && (0, procedure_1.isTraversal)(t[0]) && t[0].type !== \"descendant\") {// Don't continue in else branch\n    } else if (hasContext && !t.some(includesScopePseudo)) {\n      t.unshift(DESCENDANT_TOKEN);\n    } else {\n      continue;\n    }\n\n    t.unshift(SCOPE_TOKEN);\n  }\n}\n\nfunction compileToken(token, options, context) {\n  var _a;\n\n  token = token.filter(function (t) {\n    return t.length > 0;\n  });\n  token.forEach(sort_1.default);\n  context = (_a = options.context) !== null && _a !== void 0 ? _a : context;\n  var isArrayContext = Array.isArray(context);\n  var finalContext = context && (Array.isArray(context) ? context : [context]);\n  absolutize(token, options, finalContext);\n  var shouldTestNextSiblings = false;\n  var query = token.map(function (rules) {\n    if (rules.length >= 2) {\n      var first = rules[0],\n          second = rules[1];\n\n      if (first.type !== \"pseudo\" || first.name !== \"scope\") {// Ignore\n      } else if (isArrayContext && second.type === \"descendant\") {\n        rules[1] = FLEXIBLE_DESCENDANT_TOKEN;\n      } else if (second.type === \"adjacent\" || second.type === \"sibling\") {\n        shouldTestNextSiblings = true;\n      }\n    }\n\n    return compileRules(rules, options, finalContext);\n  }).reduce(reduceRules, boolbase_1.falseFunc);\n  query.shouldTestNextSiblings = shouldTestNextSiblings;\n  return query;\n}\n\nexports.compileToken = compileToken;\n\nfunction compileRules(rules, options, context) {\n  var _a;\n\n  return rules.reduce(function (previous, rule) {\n    return previous === boolbase_1.falseFunc ? boolbase_1.falseFunc : (0, general_1.compileGeneralSelector)(previous, rule, options, context, compileToken);\n  }, (_a = options.rootFunc) !== null && _a !== void 0 ? _a : boolbase_1.trueFunc);\n}\n\nfunction reduceRules(a, b) {\n  if (b === boolbase_1.falseFunc || a === boolbase_1.trueFunc) {\n    return a;\n  }\n\n  if (a === boolbase_1.falseFunc || b === boolbase_1.trueFunc) {\n    return b;\n  }\n\n  return function combine(elem) {\n    return a(elem) || b(elem);\n  };\n}","map":null,"metadata":{},"sourceType":"script"}