{"ast":null,"code":"import _slicedToArray from \"F:\\\\BlockChain\\\\Projects\\\\feedback-dapp\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\n\nfunction readBh(value) {\n  if (value.length === 0) return [];else return value.split(':');\n}\n\nfunction extractEhAndL(value) {\n  const valueSplits = value.split(':');\n\n  if (valueSplits.length >= 2 && valueSplits[valueSplits.length - 1].length <= 4) {\n    return [valueSplits.slice(0, valueSplits.length - 2), \"\".concat(valueSplits[valueSplits.length - 2], \":\").concat(valueSplits[valueSplits.length - 1])];\n  }\n\n  return [valueSplits.slice(0, valueSplits.length - 1), valueSplits[valueSplits.length - 1]];\n}\n\nexport function fullySpecifiedMapper(data) {\n  return \"\".concat(data[0].join(':'), \":\").concat(data[1]);\n}\nexport function fullySpecifiedUnmapper(value) {\n  if (typeof value !== 'string') throw new Error('Invalid type');\n  return extractEhAndL(value);\n}\nexport function onlyTrailingMapper(data) {\n  return \"::\".concat(data[0].join(':'), \":\").concat(data[1]);\n}\nexport function onlyTrailingUnmapper(value) {\n  if (typeof value !== 'string') throw new Error('Invalid type');\n  if (!value.startsWith('::')) throw new Error('Invalid value');\n  return extractEhAndL(value.substring(2));\n}\nexport function multiTrailingMapper(data) {\n  return \"\".concat(data[0].join(':'), \"::\").concat(data[1].join(':'), \":\").concat(data[2]);\n}\nexport function multiTrailingUnmapper(value) {\n  if (typeof value !== 'string') throw new Error('Invalid type');\n\n  const _value$split = value.split('::', 2),\n        _value$split2 = _slicedToArray(_value$split, 2),\n        bhString = _value$split2[0],\n        trailingString = _value$split2[1];\n\n  const _extractEhAndL = extractEhAndL(trailingString),\n        _extractEhAndL2 = _slicedToArray(_extractEhAndL, 2),\n        eh = _extractEhAndL2[0],\n        l = _extractEhAndL2[1];\n\n  return [readBh(bhString), eh, l];\n}\nexport function multiTrailingMapperOne(data) {\n  return multiTrailingMapper([data[0], [data[1]], data[2]]);\n}\nexport function multiTrailingUnmapperOne(value) {\n  const out = multiTrailingUnmapper(value);\n  return [out[0], out[1].join(':'), out[2]];\n}\nexport function singleTrailingMapper(data) {\n  return \"\".concat(data[0].join(':'), \"::\").concat(data[1]);\n}\nexport function singleTrailingUnmapper(value) {\n  if (typeof value !== 'string') throw new Error('Invalid type');\n\n  const _value$split3 = value.split('::', 2),\n        _value$split4 = _slicedToArray(_value$split3, 2),\n        bhString = _value$split4[0],\n        trailing = _value$split4[1];\n\n  return [readBh(bhString), trailing];\n}\nexport function noTrailingMapper(data) {\n  return \"\".concat(data[0].join(':'), \"::\");\n}\nexport function noTrailingUnmapper(value) {\n  if (typeof value !== 'string') throw new Error('Invalid type');\n  if (!value.endsWith('::')) throw new Error('Invalid value');\n  return [readBh(value.substring(0, value.length - 2))];\n}","map":null,"metadata":{},"sourceType":"module"}