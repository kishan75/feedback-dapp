{"ast":null,"code":"import _slicedToArray from \"F:\\\\BlockChain\\\\Projects\\\\feedback-dapp-full\\\\feedback-dapp\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nconst _excluded = [\"onClick\"];\nimport * as React from 'react';\nimport { unstable_useId as useId, useForkRef } from '@mui/material/utils';\nimport MenuList from '@mui/material/MenuList';\nimport MenuItem from '@mui/material/MenuItem';\nimport ListItemIcon from '@mui/material/ListItemIcon';\nimport { gridDensityValueSelector } from '../../hooks/features/density/densitySelector';\nimport { GridDensityTypes } from '../../models/gridDensity';\nimport { isHideMenuKey, isTabKey } from '../../utils/keyboardUtils';\nimport { useGridApiContext } from '../../hooks/utils/useGridApiContext';\nimport { useGridSelector } from '../../hooks/utils/useGridSelector';\nimport { GridMenu } from '../menu/GridMenu';\nimport { useGridRootProps } from '../../hooks/utils/useGridRootProps';\nimport { gridClasses } from '../../constants/gridClasses';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport const GridToolbarDensitySelector =\n/*#__PURE__*/\nReact.forwardRef(function GridToolbarDensitySelector(props, ref) {\n  var _rootProps$components;\n\n  const onClick = props.onClick,\n        other = _objectWithoutPropertiesLoose(props, _excluded);\n\n  const apiRef = useGridApiContext();\n  const rootProps = useGridRootProps();\n  const densityValue = useGridSelector(apiRef, gridDensityValueSelector);\n  const densityButtonId = useId();\n  const densityMenuId = useId();\n\n  const _React$useState = React.useState(false),\n        _React$useState2 = _slicedToArray(_React$useState, 2),\n        open = _React$useState2[0],\n        setOpen = _React$useState2[1];\n\n  const buttonRef = React.useRef(null);\n  const handleRef = useForkRef(ref, buttonRef);\n  const densityOptions = [{\n    icon:\n    /*#__PURE__*/\n    _jsx(rootProps.components.DensityCompactIcon, {}),\n    label: apiRef.current.getLocaleText('toolbarDensityCompact'),\n    value: GridDensityTypes.Compact\n  }, {\n    icon:\n    /*#__PURE__*/\n    _jsx(rootProps.components.DensityStandardIcon, {}),\n    label: apiRef.current.getLocaleText('toolbarDensityStandard'),\n    value: GridDensityTypes.Standard\n  }, {\n    icon:\n    /*#__PURE__*/\n    _jsx(rootProps.components.DensityComfortableIcon, {}),\n    label: apiRef.current.getLocaleText('toolbarDensityComfortable'),\n    value: GridDensityTypes.Comfortable\n  }];\n  const startIcon = React.useMemo(() => {\n    switch (densityValue) {\n      case GridDensityTypes.Compact:\n        return (\n          /*#__PURE__*/\n          _jsx(rootProps.components.DensityCompactIcon, {})\n        );\n\n      case GridDensityTypes.Comfortable:\n        return (\n          /*#__PURE__*/\n          _jsx(rootProps.components.DensityComfortableIcon, {})\n        );\n\n      default:\n        return (\n          /*#__PURE__*/\n          _jsx(rootProps.components.DensityStandardIcon, {})\n        );\n    }\n  }, [densityValue, rootProps]);\n\n  const handleDensitySelectorOpen = event => {\n    setOpen(true);\n    onClick == null ? void 0 : onClick(event);\n  };\n\n  const handleDensitySelectorClose = () => setOpen(false);\n\n  const handleDensityUpdate = newDensity => {\n    apiRef.current.setDensity(newDensity);\n    setOpen(false);\n  };\n\n  const handleListKeyDown = event => {\n    if (isTabKey(event.key)) {\n      event.preventDefault();\n    }\n\n    if (isHideMenuKey(event.key)) {\n      handleDensitySelectorClose();\n    }\n  }; // Disable the button if the corresponding is disabled\n\n\n  if (rootProps.disableDensitySelector) {\n    return null;\n  }\n\n  const densityElements = densityOptions.map((option, index) =>\n  /*#__PURE__*/\n  _jsxs(MenuItem, {\n    onClick: () => handleDensityUpdate(option.value),\n    selected: option.value === densityValue,\n    children: [\n    /*#__PURE__*/\n    _jsx(ListItemIcon, {\n      children: option.icon\n    }), option.label]\n  }, index));\n  return (\n    /*#__PURE__*/\n    _jsxs(React.Fragment, {\n      children: [\n      /*#__PURE__*/\n      _jsx(rootProps.components.BaseButton, _extends({\n        ref: handleRef,\n        color: \"primary\",\n        size: \"small\",\n        startIcon: startIcon,\n        \"aria-label\": apiRef.current.getLocaleText('toolbarDensityLabel'),\n        \"aria-expanded\": open ? 'true' : undefined,\n        \"aria-haspopup\": \"menu\",\n        \"aria-labelledby\": densityMenuId,\n        id: densityButtonId\n      }, other, {\n        onClick: handleDensitySelectorOpen\n      }, (_rootProps$components = rootProps.componentsProps) == null ? void 0 : _rootProps$components.baseButton, {\n        children: apiRef.current.getLocaleText('toolbarDensity')\n      })),\n      /*#__PURE__*/\n      _jsx(GridMenu, {\n        open: open,\n        target: buttonRef.current,\n        onClickAway: handleDensitySelectorClose,\n        position: \"bottom-start\",\n        children:\n        /*#__PURE__*/\n        _jsx(MenuList, {\n          id: densityMenuId,\n          className: gridClasses.menuList,\n          \"aria-labelledby\": densityButtonId,\n          onKeyDown: handleListKeyDown,\n          autoFocusItem: open,\n          children: densityElements\n        })\n      })]\n    })\n  );\n});","map":null,"metadata":{},"sourceType":"module"}