{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\n\nvar _circle;\n\nconst _excluded = [\"active\", \"className\", \"completed\", \"error\", \"icon\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { unstable_composeClasses as composeClasses } from '@mui/base';\nimport styled from '../styles/styled';\nimport useThemeProps from '../styles/useThemeProps';\nimport CheckCircle from '../internal/svg-icons/CheckCircle';\nimport Warning from '../internal/svg-icons/Warning';\nimport SvgIcon from '../SvgIcon';\nimport stepIconClasses, { getStepIconUtilityClass } from './stepIconClasses';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nconst useUtilityClasses = ownerState => {\n  const classes = ownerState.classes,\n        active = ownerState.active,\n        completed = ownerState.completed,\n        error = ownerState.error;\n  const slots = {\n    root: ['root', active && 'active', completed && 'completed', error && 'error'],\n    text: ['text']\n  };\n  return composeClasses(slots, getStepIconUtilityClass, classes);\n};\n\nconst StepIconRoot = styled(SvgIcon, {\n  name: 'MuiStepIcon',\n  slot: 'Root',\n  overridesResolver: (props, styles) => styles.root\n})(({\n  theme\n}) => ({\n  display: 'block',\n  transition: theme.transitions.create('color', {\n    duration: theme.transitions.duration.shortest\n  }),\n  color: theme.palette.text.disabled,\n  [\"&.\".concat(stepIconClasses.completed)]: {\n    color: theme.palette.primary.main\n  },\n  [\"&.\".concat(stepIconClasses.active)]: {\n    color: theme.palette.primary.main\n  },\n  [\"&.\".concat(stepIconClasses.error)]: {\n    color: theme.palette.error.main\n  }\n}));\nconst StepIconText = styled('text', {\n  name: 'MuiStepIcon',\n  slot: 'Text',\n  overridesResolver: (props, styles) => styles.text\n})(({\n  theme\n}) => ({\n  fill: theme.palette.primary.contrastText,\n  fontSize: theme.typography.caption.fontSize,\n  fontFamily: theme.typography.fontFamily\n}));\nconst StepIcon =\n/*#__PURE__*/\nReact.forwardRef(function StepIcon(inProps, ref) {\n  const props = useThemeProps({\n    props: inProps,\n    name: 'MuiStepIcon'\n  });\n\n  const _props$active = props.active,\n        active = _props$active === void 0 ? false : _props$active,\n        classNameProp = props.className,\n        _props$completed = props.completed,\n        completed = _props$completed === void 0 ? false : _props$completed,\n        _props$error = props.error,\n        error = _props$error === void 0 ? false : _props$error,\n        icon = props.icon,\n        other = _objectWithoutPropertiesLoose(props, _excluded);\n\n  const ownerState = _extends({}, props, {\n    active,\n    completed,\n    error\n  });\n\n  const classes = useUtilityClasses(ownerState);\n\n  if (typeof icon === 'number' || typeof icon === 'string') {\n    const className = clsx(classNameProp, classes.root);\n\n    if (error) {\n      return (\n        /*#__PURE__*/\n        _jsx(StepIconRoot, _extends({\n          as: Warning,\n          className: className,\n          ref: ref,\n          ownerState: ownerState\n        }, other))\n      );\n    }\n\n    if (completed) {\n      return (\n        /*#__PURE__*/\n        _jsx(StepIconRoot, _extends({\n          as: CheckCircle,\n          className: className,\n          ref: ref,\n          ownerState: ownerState\n        }, other))\n      );\n    }\n\n    return (\n      /*#__PURE__*/\n      _jsxs(StepIconRoot, _extends({\n        className: className,\n        ref: ref,\n        ownerState: ownerState\n      }, other, {\n        children: [_circle || (_circle =\n        /*#__PURE__*/\n        _jsx(\"circle\", {\n          cx: \"12\",\n          cy: \"12\",\n          r: \"12\"\n        })),\n        /*#__PURE__*/\n        _jsx(StepIconText, {\n          className: classes.text,\n          x: \"12\",\n          y: \"16\",\n          textAnchor: \"middle\",\n          ownerState: ownerState,\n          children: icon\n        })]\n      }))\n    );\n  }\n\n  return icon;\n});\nprocess.env.NODE_ENV !== \"production\" ? StepIcon.propTypes\n/* remove-proptypes */\n= {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * Whether this step is active.\n   * @default false\n   */\n  active: PropTypes.bool,\n\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * Mark the step as completed. Is passed to child components.\n   * @default false\n   */\n  completed: PropTypes.bool,\n\n  /**\n   * If `true`, the step is marked as failed.\n   * @default false\n   */\n  error: PropTypes.bool,\n\n  /**\n   * The label displayed in the step icon.\n   */\n  icon: PropTypes.node,\n\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object])\n} : void 0;\nexport default StepIcon;","map":null,"metadata":{},"sourceType":"module"}