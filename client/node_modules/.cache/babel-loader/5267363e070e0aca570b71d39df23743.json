{"ast":null,"code":"/**\n *\n * @namespace faker.vehicle\n */\nvar Vehicle = function (faker) {\n  var self = this;\n  var fake = faker.fake;\n  /**\n   * vehicle\n   *\n   * @method faker.vehicle.vehicle\n   */\n\n  self.vehicle = function () {\n    return fake('{{vehicle.manufacturer}} {{vehicle.model}}');\n  };\n\n  self.vehicle.schema = {\n    \"description\": \"Generates a random vehicle.\",\n    \"sampleResults\": [\"BMW Explorer\", \"Ford Camry\", \"Lamborghini Ranchero\"]\n  };\n  /**\n   * manufacturer\n   *\n   * @method faker.vehicle.manufacturer\n   */\n\n  self.manufacturer = function () {\n    return faker.random.arrayElement(faker.definitions.vehicle.manufacturer);\n  };\n\n  self.manufacturer.schema = {\n    \"description\": \"Generates a manufacturer name.\",\n    \"sampleResults\": [\"Ford\", \"Jeep\", \"Tesla\"]\n  };\n  /**\n   * model\n   *\n   * @method faker.vehicle.model\n   */\n\n  self.model = function () {\n    return faker.random.arrayElement(faker.definitions.vehicle.model);\n  };\n\n  self.model.schema = {\n    \"description\": \"Generates a vehicle model.\",\n    \"sampleResults\": [\"Explorer\", \"Camry\", \"Ranchero\"]\n  };\n  /**\n   * type\n   *\n   * @method faker.vehicle.type\n   */\n\n  self.type = function () {\n    return faker.random.arrayElement(faker.definitions.vehicle.type);\n  };\n\n  self.type.schema = {\n    \"description\": \"Generates a vehicle type.\",\n    \"sampleResults\": [\"Coupe\", \"Convertable\", \"Sedan\", \"SUV\"]\n  };\n  /**\n   * fuel\n   *\n   * @method faker.vehicle.fuel\n   */\n\n  self.fuel = function () {\n    return faker.random.arrayElement(faker.definitions.vehicle.fuel);\n  };\n\n  self.fuel.schema = {\n    \"description\": \"Generates a fuel type.\",\n    \"sampleResults\": [\"Electric\", \"Gasoline\", \"Diesel\"]\n  };\n  /**\n   * vin\n   *\n   * @method faker.vehicle.vin\n   */\n\n  self.vin = function () {\n    var bannedChars = ['o', 'i', 'q'];\n    return (faker.random.alphaNumeric(10, {\n      bannedChars: bannedChars\n    }) + faker.random.alpha({\n      count: 1,\n      upcase: true,\n      bannedChars: bannedChars\n    }) + faker.random.alphaNumeric(1, {\n      bannedChars: bannedChars\n    }) + faker.datatype.number({\n      min: 10000,\n      max: 100000\n    }) // return five digit #\n    ).toUpperCase();\n  };\n\n  self.vin.schema = {\n    \"description\": \"Generates a valid VIN number.\",\n    \"sampleResults\": [\"YV1MH682762184654\", \"3C7WRMBJ2EG208836\"]\n  };\n  /**\n   * color\n   *\n   * @method faker.vehicle.color\n   */\n\n  self.color = function () {\n    return fake('{{commerce.color}}');\n  };\n\n  self.color.schema = {\n    \"description\": \"Generates a color\",\n    \"sampleResults\": [\"red\", \"white\", \"black\"]\n  };\n  /**\n     * vrm\n     *\n     * @method faker.vehicle.vrm\n     */\n\n  self.vrm = function () {\n    return (faker.random.alpha({\n      count: 2,\n      upcase: true\n    }) + faker.datatype.number({\n      min: 0,\n      max: 9\n    }) + faker.datatype.number({\n      min: 0,\n      max: 9\n    }) + faker.random.alpha({\n      count: 3,\n      upcase: true\n    })).toUpperCase();\n  };\n\n  self.vrm.schema = {\n    \"description\": \"Generates a vehicle vrm\",\n    \"sampleResults\": [\"MF56UPA\", \"GL19AAQ\", \"SF20TTA\"]\n  };\n  /**\n  * bicycle\n  *\n  * @method faker.vehicle.bicycle\n  */\n\n  self.bicycle = function () {\n    return faker.random.arrayElement(faker.definitions.vehicle.bicycle_type);\n  };\n\n  self.bicycle.schema = {\n    \"description\": \"Generates a type of bicycle\",\n    \"sampleResults\": [\"Adventure Road Bicycle\", \"City Bicycle\", \"Recumbent Bicycle\"]\n  };\n};\n\nmodule[\"exports\"] = Vehicle;","map":null,"metadata":{},"sourceType":"script"}