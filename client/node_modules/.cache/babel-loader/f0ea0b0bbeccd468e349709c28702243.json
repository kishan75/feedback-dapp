{"ast":null,"code":"import { constantFrom } from './constantFrom.js';\nimport { constant } from './constant.js';\nimport { option } from './option.js';\nimport { tuple } from './tuple.js';\nimport { webQueryParameters } from './webQueryParameters.js';\nimport { webFragments } from './webFragments.js';\nimport { webAuthority } from './webAuthority.js';\nimport { convertFromNext, convertToNext } from '../check/arbitrary/definition/Converters.js';\nimport { partsToUrlMapper, partsToUrlUnmapper } from './_internals/mappers/PartsToUrl.js';\nimport { relativeSizeToSize, resolveSize } from './_internals/helpers/MaxLengthFromMinLength.js';\nimport { buildUriPathArbitrary } from './_internals/builders/UriPathArbitraryBuilder.js';\nexport function webUrl(constraints) {\n  const c = constraints || {};\n  const resolvedSize = resolveSize(c.size);\n  const resolvedAuthoritySettingsSize = c.authoritySettings !== undefined && c.authoritySettings.size !== undefined ? relativeSizeToSize(c.authoritySettings.size, resolvedSize) : resolvedSize;\n  const resolvedAuthoritySettings = Object.assign(Object.assign({}, c.authoritySettings), {\n    size: resolvedAuthoritySettingsSize\n  });\n  const validSchemes = c.validSchemes || ['http', 'https'];\n  const schemeArb = constantFrom(...validSchemes);\n  const authorityArb = webAuthority(resolvedAuthoritySettings);\n  const pathArb = buildUriPathArbitrary(resolvedSize);\n  return convertFromNext(convertToNext(tuple(schemeArb, authorityArb, pathArb, c.withQueryParameters === true ? option(webQueryParameters({\n    size: resolvedSize\n  })) : constant(null), c.withFragments === true ? option(webFragments({\n    size: resolvedSize\n  })) : constant(null))).map(partsToUrlMapper, partsToUrlUnmapper));\n}","map":null,"metadata":{},"sourceType":"module"}