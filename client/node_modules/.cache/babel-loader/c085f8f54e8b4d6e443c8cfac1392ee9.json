{"ast":null,"code":"import { usePreviousProps } from '@mui/utils';\nexport default function useBadge(props) {\n  const _props$anchorOrigin = props.anchorOrigin,\n        anchorOriginProp = _props$anchorOrigin === void 0 ? {\n    vertical: 'top',\n    horizontal: 'right'\n  } : _props$anchorOrigin,\n        badgeContentProp = props.badgeContent,\n        _props$invisible = props.invisible,\n        invisibleProp = _props$invisible === void 0 ? false : _props$invisible,\n        _props$max = props.max,\n        maxProp = _props$max === void 0 ? 99 : _props$max,\n        _props$showZero = props.showZero,\n        showZero = _props$showZero === void 0 ? false : _props$showZero,\n        _props$variant = props.variant,\n        variantProp = _props$variant === void 0 ? 'standard' : _props$variant;\n  const prevProps = usePreviousProps({\n    anchorOrigin: anchorOriginProp,\n    badgeContent: badgeContentProp,\n    max: maxProp,\n    variant: variantProp\n  });\n  let invisible = invisibleProp;\n\n  if (invisibleProp === false && (badgeContentProp === 0 && !showZero || badgeContentProp == null && variantProp !== 'dot')) {\n    invisible = true;\n  }\n\n  const _ref = invisible ? prevProps : props,\n        _ref$anchorOrigin = _ref.anchorOrigin,\n        anchorOrigin = _ref$anchorOrigin === void 0 ? anchorOriginProp : _ref$anchorOrigin,\n        badgeContent = _ref.badgeContent,\n        _ref$max = _ref.max,\n        max = _ref$max === void 0 ? maxProp : _ref$max,\n        _ref$variant = _ref.variant,\n        variant = _ref$variant === void 0 ? variantProp : _ref$variant;\n\n  let displayValue = '';\n\n  if (variant !== 'dot') {\n    displayValue = badgeContent && Number(badgeContent) > max ? \"\".concat(max, \"+\") : badgeContent;\n  }\n\n  return {\n    anchorOrigin,\n    badgeContent,\n    invisible,\n    max,\n    variant,\n    displayValue\n  };\n}","map":null,"metadata":{},"sourceType":"module"}