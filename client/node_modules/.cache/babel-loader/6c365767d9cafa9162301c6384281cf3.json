{"ast":null,"code":"export function unsafeUniformIntDistributionInternal(rangeSize, rng) {\n  var MinRng = rng.min();\n  var NumValues = rng.max() - rng.min() + 1;\n\n  if (rangeSize <= NumValues) {\n    var nrng_1 = rng;\n    var MaxAllowed = NumValues - NumValues % rangeSize;\n\n    while (true) {\n      var out = nrng_1.unsafeNext();\n      var deltaV = out - MinRng;\n\n      if (deltaV < MaxAllowed) {\n        return deltaV % rangeSize;\n      }\n    }\n  }\n\n  var FinalNumValues = NumValues * NumValues;\n  var NumIterations = 2;\n\n  while (FinalNumValues < rangeSize) {\n    FinalNumValues *= NumValues;\n    ++NumIterations;\n  }\n\n  var MaxAcceptedRandom = rangeSize * Math.floor(1 * FinalNumValues / rangeSize);\n  var nrng = rng;\n\n  while (true) {\n    var value = 0;\n\n    for (var num = 0; num !== NumIterations; ++num) {\n      var out = nrng.unsafeNext();\n      value = NumValues * value + (out - MinRng);\n    }\n\n    if (value < MaxAcceptedRandom) {\n      var inDiff = value - rangeSize * Math.floor(1 * value / rangeSize);\n      return inDiff;\n    }\n  }\n}","map":null,"metadata":{},"sourceType":"module"}