{"ast":null,"code":"import _slicedToArray from \"F:\\\\BlockChain\\\\Projects\\\\feedback-dapp\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { GridEvents } from '../../models/events';\nimport { useGridApiContext } from '../../hooks/utils/useGridApiContext';\nimport { GridMainContainer } from '../containers/GridMainContainer';\nimport { GridAutoSizer } from '../GridAutoSizer';\nimport { GridOverlays } from './GridOverlays';\nimport { useGridRootProps } from '../../hooks/utils/useGridRootProps';\nimport { useGridSelector } from '../../hooks/utils/useGridSelector';\nimport { gridDensityHeaderHeightSelector } from '../../hooks/features/density/densitySelector';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nfunction GridBody(props) {\n  const children = props.children,\n        VirtualScrollerComponent = props.VirtualScrollerComponent,\n        ColumnHeadersComponent = props.ColumnHeadersComponent;\n  const apiRef = useGridApiContext();\n  const rootProps = useGridRootProps();\n  const headerHeight = useGridSelector(apiRef, gridDensityHeaderHeightSelector);\n\n  const _React$useState = React.useState(rootProps.disableVirtualization),\n        _React$useState2 = _slicedToArray(_React$useState, 2),\n        isVirtualizationDisabled = _React$useState2[0],\n        setIsVirtualizationDisabled = _React$useState2[1];\n\n  const disableVirtualization = React.useCallback(() => {\n    setIsVirtualizationDisabled(true);\n  }, []);\n  const enableVirtualization = React.useCallback(() => {\n    setIsVirtualizationDisabled(false);\n  }, []); // The `useGridApiMethod` hook can't be used here, because it only installs the\n  // method if it doesn't exist yet. Once installed, it's never updated again.\n  // This break the methods above, since their closure comes from the first time\n  // they were installed. Which means that calling `setIsVirtualizationDisabled`\n  // will trigger a re-render, but it won't update the state. That can be solved\n  // by migrating the virtualization status to the global state.\n\n  apiRef.current.unstable_disableVirtualization = disableVirtualization;\n  apiRef.current.unstable_enableVirtualization = enableVirtualization;\n  const columnHeadersRef = React.useRef(null);\n  const columnsContainerRef = React.useRef(null);\n  const windowRef = React.useRef(null);\n  const renderingZoneRef = React.useRef(null);\n  apiRef.current.columnHeadersContainerElementRef = columnsContainerRef;\n  apiRef.current.columnHeadersElementRef = columnHeadersRef;\n  apiRef.current.windowRef = windowRef; // TODO rename, it's not attached to the window anymore\n\n  apiRef.current.renderingZoneRef = renderingZoneRef; // TODO remove, nobody should have access to internal parts of the virtualization\n\n  const handleResize = React.useCallback(size => {\n    apiRef.current.publishEvent(GridEvents.resize, size);\n  }, [apiRef]);\n  return (\n    /*#__PURE__*/\n    _jsxs(GridMainContainer, {\n      children: [\n      /*#__PURE__*/\n      _jsx(GridOverlays, {}),\n      /*#__PURE__*/\n      _jsx(ColumnHeadersComponent, {\n        ref: columnsContainerRef,\n        innerRef: columnHeadersRef\n      }),\n      /*#__PURE__*/\n      _jsx(GridAutoSizer, {\n        nonce: rootProps.nonce,\n        disableHeight: rootProps.autoHeight,\n        onResize: handleResize,\n        children: size => {\n          const style = {\n            width: size.width,\n            // If `autoHeight` is on, there will be no height value.\n            // In this case, let the container to grow whatever it needs.\n            height: size.height ? size.height - headerHeight : 'auto',\n            marginTop: headerHeight\n          };\n          return (\n            /*#__PURE__*/\n            _jsx(VirtualScrollerComponent, {\n              ref: windowRef,\n              style: style,\n              disableVirtualization: isVirtualizationDisabled\n            })\n          );\n        }\n      }), children]\n    })\n  );\n}\n\nprocess.env.NODE_ENV !== \"production\" ? GridBody.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // | To update them edit the TypeScript types and run \"yarn proptypes\"  |\n  // ----------------------------------------------------------------------\n  children: PropTypes.node,\n  ColumnHeadersComponent: PropTypes.elementType.isRequired,\n  VirtualScrollerComponent: PropTypes.elementType.isRequired\n} : void 0;\nexport { GridBody };","map":null,"metadata":{},"sourceType":"module"}