{"ast":null,"code":"'use strict';\n\nconst _require = require('../common/html'),\n      DOCUMENT_MODE = _require.DOCUMENT_MODE; //Node construction\n\n\nexports.createDocument = function () {\n  return {\n    nodeName: '#document',\n    mode: DOCUMENT_MODE.NO_QUIRKS,\n    childNodes: []\n  };\n};\n\nexports.createDocumentFragment = function () {\n  return {\n    nodeName: '#document-fragment',\n    childNodes: []\n  };\n};\n\nexports.createElement = function (tagName, namespaceURI, attrs) {\n  return {\n    nodeName: tagName,\n    tagName: tagName,\n    attrs: attrs,\n    namespaceURI: namespaceURI,\n    childNodes: [],\n    parentNode: null\n  };\n};\n\nexports.createCommentNode = function (data) {\n  return {\n    nodeName: '#comment',\n    data: data,\n    parentNode: null\n  };\n};\n\nconst createTextNode = function (value) {\n  return {\n    nodeName: '#text',\n    value: value,\n    parentNode: null\n  };\n}; //Tree mutation\n\n\nconst appendChild = exports.appendChild = function (parentNode, newNode) {\n  parentNode.childNodes.push(newNode);\n  newNode.parentNode = parentNode;\n};\n\nconst insertBefore = exports.insertBefore = function (parentNode, newNode, referenceNode) {\n  const insertionIdx = parentNode.childNodes.indexOf(referenceNode);\n  parentNode.childNodes.splice(insertionIdx, 0, newNode);\n  newNode.parentNode = parentNode;\n};\n\nexports.setTemplateContent = function (templateElement, contentElement) {\n  templateElement.content = contentElement;\n};\n\nexports.getTemplateContent = function (templateElement) {\n  return templateElement.content;\n};\n\nexports.setDocumentType = function (document, name, publicId, systemId) {\n  let doctypeNode = null;\n\n  for (let i = 0; i < document.childNodes.length; i++) {\n    if (document.childNodes[i].nodeName === '#documentType') {\n      doctypeNode = document.childNodes[i];\n      break;\n    }\n  }\n\n  if (doctypeNode) {\n    doctypeNode.name = name;\n    doctypeNode.publicId = publicId;\n    doctypeNode.systemId = systemId;\n  } else {\n    appendChild(document, {\n      nodeName: '#documentType',\n      name: name,\n      publicId: publicId,\n      systemId: systemId\n    });\n  }\n};\n\nexports.setDocumentMode = function (document, mode) {\n  document.mode = mode;\n};\n\nexports.getDocumentMode = function (document) {\n  return document.mode;\n};\n\nexports.detachNode = function (node) {\n  if (node.parentNode) {\n    const idx = node.parentNode.childNodes.indexOf(node);\n    node.parentNode.childNodes.splice(idx, 1);\n    node.parentNode = null;\n  }\n};\n\nexports.insertText = function (parentNode, text) {\n  if (parentNode.childNodes.length) {\n    const prevNode = parentNode.childNodes[parentNode.childNodes.length - 1];\n\n    if (prevNode.nodeName === '#text') {\n      prevNode.value += text;\n      return;\n    }\n  }\n\n  appendChild(parentNode, createTextNode(text));\n};\n\nexports.insertTextBefore = function (parentNode, text, referenceNode) {\n  const prevNode = parentNode.childNodes[parentNode.childNodes.indexOf(referenceNode) - 1];\n\n  if (prevNode && prevNode.nodeName === '#text') {\n    prevNode.value += text;\n  } else {\n    insertBefore(parentNode, createTextNode(text), referenceNode);\n  }\n};\n\nexports.adoptAttributes = function (recipient, attrs) {\n  const recipientAttrsMap = [];\n\n  for (let i = 0; i < recipient.attrs.length; i++) {\n    recipientAttrsMap.push(recipient.attrs[i].name);\n  }\n\n  for (let j = 0; j < attrs.length; j++) {\n    if (recipientAttrsMap.indexOf(attrs[j].name) === -1) {\n      recipient.attrs.push(attrs[j]);\n    }\n  }\n}; //Tree traversing\n\n\nexports.getFirstChild = function (node) {\n  return node.childNodes[0];\n};\n\nexports.getChildNodes = function (node) {\n  return node.childNodes;\n};\n\nexports.getParentNode = function (node) {\n  return node.parentNode;\n};\n\nexports.getAttrList = function (element) {\n  return element.attrs;\n}; //Node data\n\n\nexports.getTagName = function (element) {\n  return element.tagName;\n};\n\nexports.getNamespaceURI = function (element) {\n  return element.namespaceURI;\n};\n\nexports.getTextNodeContent = function (textNode) {\n  return textNode.value;\n};\n\nexports.getCommentNodeContent = function (commentNode) {\n  return commentNode.data;\n};\n\nexports.getDocumentTypeNodeName = function (doctypeNode) {\n  return doctypeNode.name;\n};\n\nexports.getDocumentTypeNodePublicId = function (doctypeNode) {\n  return doctypeNode.publicId;\n};\n\nexports.getDocumentTypeNodeSystemId = function (doctypeNode) {\n  return doctypeNode.systemId;\n}; //Node types\n\n\nexports.isTextNode = function (node) {\n  return node.nodeName === '#text';\n};\n\nexports.isCommentNode = function (node) {\n  return node.nodeName === '#comment';\n};\n\nexports.isDocumentTypeNode = function (node) {\n  return node.nodeName === '#documentType';\n};\n\nexports.isElementNode = function (node) {\n  return !!node.tagName;\n}; // Source code location\n\n\nexports.setNodeSourceCodeLocation = function (node, location) {\n  node.sourceCodeLocation = location;\n};\n\nexports.getNodeSourceCodeLocation = function (node) {\n  return node.sourceCodeLocation;\n};\n\nexports.updateNodeSourceCodeLocation = function (node, endLocation) {\n  node.sourceCodeLocation = Object.assign(node.sourceCodeLocation, endLocation);\n};","map":null,"metadata":{},"sourceType":"script"}