{"ast":null,"code":"import _defineProperty from \"F:\\\\BlockChain\\\\Projects\\\\feedback-dapp\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";\nimport _slicedToArray from \"F:\\\\BlockChain\\\\Projects\\\\feedback-dapp\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"F:\\\\BlockChain\\\\Projects\\\\feedback-dapp\\\\client\\\\src\\\\App.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useState, useEffect } from \"react\";\nimport { Routes, Route } from \"react-router-dom\";\nimport { getBalance, loadContracts, loadCourses, loadEmails, loadFeedbacks, loadProfsByEmail, loadSkills, loadSkillsCount, setupMetamask } from \"./scripts/loader\"; // Pages\n\nimport HomePage from \"./pages/HomePage/homePage\";\nimport \"./App.css\";\nimport { Loader } from \"./components/utils/Loader\";\n\nrequire('dotenv').config();\n\nconst App = () => {\n  const _useState = useState(null),\n        _useState2 = _slicedToArray(_useState, 2),\n        profEmails = _useState2[0],\n        setProfEmails = _useState2[1];\n\n  const _useState3 = useState(null),\n        _useState4 = _slicedToArray(_useState3, 2),\n        addressToEmail = _useState4[0],\n        setAddressToEmail = _useState4[1];\n\n  const _useState5 = useState(null),\n        _useState6 = _slicedToArray(_useState5, 2),\n        profsDetails = _useState6[0],\n        setProfsDetails = _useState6[1];\n\n  const _useState7 = useState(null),\n        _useState8 = _slicedToArray(_useState7, 2),\n        skillCount = _useState8[0],\n        setSkillCount = _useState8[1];\n\n  const _useState9 = useState(null),\n        _useState10 = _slicedToArray(_useState9, 2),\n        courses = _useState10[0],\n        setCourses = _useState10[1];\n\n  const _useState11 = useState(null),\n        _useState12 = _slicedToArray(_useState11, 2),\n        feedbacks = _useState12[0],\n        setFeedbacks = _useState12[1];\n\n  const _useState13 = useState(null),\n        _useState14 = _slicedToArray(_useState13, 2),\n        account = _useState14[0],\n        setAccount = _useState14[1];\n\n  const _useState15 = useState(null),\n        _useState16 = _slicedToArray(_useState15, 2),\n        balance = _useState16[0],\n        setBalance = _useState16[1];\n\n  const _useState17 = useState(true),\n        _useState18 = _slicedToArray(_useState17, 2),\n        showLoader = _useState18[0],\n        setLoader = _useState18[1];\n\n  const _useState19 = useState(null),\n        _useState20 = _slicedToArray(_useState19, 2),\n        contracts = _useState20[0],\n        setContracts = _useState20[1];\n\n  const _useState21 = useState(null),\n        _useState22 = _slicedToArray(_useState21, 2),\n        skills = _useState22[0],\n        setSkills = _useState22[1];\n\n  const _useState23 = useState(false),\n        _useState24 = _slicedToArray(_useState23, 2),\n        isProf = _useState24[0],\n        setIsProf = _useState24[1]; // React useEffects\n\n\n  useEffect(() => {\n    (async () => {\n      const account = await setupMetamask();\n      setAccount(account);\n      const contracts = await loadContracts();\n      setContracts(contracts);\n    })();\n  }, []);\n  useEffect(() => {\n    if (contracts) {\n      (async () => {\n        const skills = await loadSkills(contracts);\n        setSkills(skills);\n        const balance = await getBalance(contracts, account);\n        setBalance(balance);\n        const profEmails = await loadEmails(contracts);\n        setProfEmails(profEmails);\n\n        const _ref = await loadProfsByEmail(contracts, profEmails),\n              profsDetails = _ref.profsDetails,\n              addressToEmail = _ref.addressToEmail;\n\n        setProfsDetails(profsDetails);\n        setAddressToEmail(addressToEmail);\n        setIsProf(addressToEmail[account] !== undefined);\n        const courses = await loadCourses(contracts, profEmails);\n        setCourses(courses);\n\n        const _ref2 = await loadFeedbacks(contracts, profEmails, courses),\n              feedbacks = _ref2.feedbacks,\n              updatedCourses = _ref2.updatedCourses;\n\n        setFeedbacks(feedbacks);\n        setCourses(updatedCourses);\n\n        const _ref3 = await loadSkillsCount(contracts, profEmails, profsDetails),\n              skillsUpvote = _ref3.skillsUpvote,\n              updatedProfsDetail = _ref3.updatedProfsDetail;\n\n        setSkillCount(skillsUpvote);\n        setProfsDetails(updatedProfsDetail);\n        contracts.feedbackData.events.professorCreated((err, data) => professorCreated(err, data));\n        setLoader(false);\n      })();\n    }\n  }, [contracts]);\n\n  const professorCreated = (err, data) => {\n    if (err) alert(\"something is wrong\");\n    const professor = data[\"returnValues\"].professor;\n    const name = professor.name,\n          email = professor.email,\n          profilePicture = professor.profilePicture,\n          addressId = professor.addressId,\n          rating = professor.rating;\n    setProfsDetails(prev => _objectSpread({}, prev, {\n      [email]: {\n        name,\n        email,\n        profilePicture,\n        addressId,\n        rating\n      }\n    }));\n  };\n\n  return React.createElement(\"div\", {\n    className: \"App\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110\n    },\n    __self: this\n  }, React.createElement(Loader, {\n    show: showLoader,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111\n    },\n    __self: this\n  }), React.createElement(Routes, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112\n    },\n    __self: this\n  }, React.createElement(Route, {\n    exact: true,\n    path: \"/\",\n    element: React.createElement(HomePage, {\n      contracts: contracts,\n      profsDetails: profsDetails,\n      account: account,\n      emailMap: addressToEmail,\n      courses: courses,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117\n      },\n      __self: this\n    }),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113\n    },\n    __self: this\n  })));\n};\n\nexport default App;","map":{"version":3,"sources":["F:/BlockChain/Projects/feedback-dapp/client/src/App.js"],"names":["React","useState","useEffect","Routes","Route","getBalance","loadContracts","loadCourses","loadEmails","loadFeedbacks","loadProfsByEmail","loadSkills","loadSkillsCount","setupMetamask","HomePage","Loader","require","config","App","profEmails","setProfEmails","addressToEmail","setAddressToEmail","profsDetails","setProfsDetails","skillCount","setSkillCount","courses","setCourses","feedbacks","setFeedbacks","account","setAccount","balance","setBalance","showLoader","setLoader","contracts","setContracts","skills","setSkills","isProf","setIsProf","undefined","updatedCourses","skillsUpvote","updatedProfsDetail","feedbackData","events","professorCreated","err","data","alert","professor","name","email","profilePicture","addressId","rating","prev"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { Routes, Route } from \"react-router-dom\";\r\nimport {\r\n  getBalance,\r\n  loadContracts,\r\n  loadCourses,\r\n  loadEmails,\r\n  loadFeedbacks,\r\n  loadProfsByEmail,\r\n  loadSkills,\r\n  loadSkillsCount,\r\n  setupMetamask,\r\n} from \"./scripts/loader\";\r\n\r\n// Pages\r\nimport HomePage from \"./pages/HomePage/homePage\";\r\n\r\nimport \"./App.css\";\r\nimport { Loader } from \"./components/utils/Loader\";\r\n\r\nrequire('dotenv').config()\r\n\r\nconst App = () => {\r\n  const [profEmails, setProfEmails] = useState(null);\r\n  const [addressToEmail, setAddressToEmail] = useState(null);\r\n\r\n  const [profsDetails, setProfsDetails] = useState(null);\r\n  const [skillCount, setSkillCount] = useState(null);\r\n  const [courses, setCourses] = useState(null);\r\n  const [feedbacks, setFeedbacks] = useState(null);\r\n\r\n  const [account, setAccount] = useState(null);\r\n  const [balance, setBalance] = useState(null);\r\n  const [showLoader, setLoader] = useState(true);\r\n  const [contracts, setContracts] = useState(null);\r\n\r\n  const [skills, setSkills] = useState(null);\r\n  const [isProf, setIsProf] = useState(false);\r\n\r\n  // React useEffects\r\n  useEffect(() => {\r\n    (async () => {\r\n      const account = await setupMetamask();\r\n      setAccount(account);\r\n\r\n      const contracts = await loadContracts();\r\n      setContracts(contracts);\r\n    })();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (contracts) {\r\n      (async () => {\r\n        const skills = await loadSkills(contracts);\r\n        setSkills(skills);\r\n\r\n        const balance = await getBalance(contracts, account);\r\n        setBalance(balance);\r\n\r\n        const profEmails = await loadEmails(contracts);\r\n        setProfEmails(profEmails);\r\n\r\n        const { profsDetails, addressToEmail } = await loadProfsByEmail(\r\n          contracts,\r\n          profEmails\r\n        );\r\n        setProfsDetails(profsDetails);\r\n        setAddressToEmail(addressToEmail);\r\n        setIsProf(addressToEmail[account] !== undefined);\r\n\r\n        const courses = await loadCourses(contracts, profEmails);\r\n        setCourses(courses);\r\n\r\n        const { feedbacks, updatedCourses } = await loadFeedbacks(\r\n          contracts,\r\n          profEmails,\r\n          courses\r\n        );\r\n        setFeedbacks(feedbacks);\r\n        setCourses(updatedCourses);\r\n\r\n        const { skillsUpvote, updatedProfsDetail } = await loadSkillsCount(\r\n          contracts,\r\n          profEmails,\r\n          profsDetails\r\n        );\r\n        setSkillCount(skillsUpvote);\r\n        setProfsDetails(updatedProfsDetail);\r\n\r\n        contracts.feedbackData.events.professorCreated((err, data) =>\r\n          professorCreated(err, data)\r\n        );\r\n\r\n        setLoader(false);\r\n      })();\r\n    }\r\n  }, [contracts]);\r\n\r\n  const professorCreated = (err, data) => {\r\n    if (err) alert(\"something is wrong\");\r\n    const { professor } = data[\"returnValues\"];\r\n    const { name, email, profilePicture, addressId, rating } = professor;\r\n    setProfsDetails((prev) => ({\r\n      ...prev,\r\n      [email]: { name, email, profilePicture, addressId, rating },\r\n    }));\r\n  };\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <Loader show={showLoader}></Loader>\r\n      <Routes>\r\n        <Route\r\n          exact\r\n          path=\"/\"\r\n          element={\r\n            <HomePage\r\n              contracts={contracts}\r\n              profsDetails={profsDetails}\r\n              account={account}\r\n              emailMap={addressToEmail}\r\n              courses={courses}\r\n            />\r\n          }\r\n        />\r\n      </Routes>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n"]},"metadata":{},"sourceType":"module"}