{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.compilePseudoSelector = exports.aliases = exports.pseudos = exports.filters = void 0;\n/*\n * Pseudo selectors\n *\n * Pseudo selectors are available in three forms:\n *\n * 1. Filters are called when the selector is compiled and return a function\n *  that has to return either false, or the results of `next()`.\n * 2. Pseudos are called on execution. They have to return a boolean.\n * 3. Subselects work like filters, but have an embedded selector that will be run separately.\n *\n * Filters are great if you want to do some pre-processing, or change the call order\n * of `next()` and your code.\n * Pseudos should be used to implement simple checks.\n */\n\nvar boolbase_1 = require(\"boolbase\");\n\nvar css_what_1 = require(\"css-what\");\n\nvar filters_1 = require(\"./filters\");\n\nObject.defineProperty(exports, \"filters\", {\n  enumerable: true,\n  get: function () {\n    return filters_1.filters;\n  }\n});\n\nvar pseudos_1 = require(\"./pseudos\");\n\nObject.defineProperty(exports, \"pseudos\", {\n  enumerable: true,\n  get: function () {\n    return pseudos_1.pseudos;\n  }\n});\n\nvar aliases_1 = require(\"./aliases\");\n\nObject.defineProperty(exports, \"aliases\", {\n  enumerable: true,\n  get: function () {\n    return aliases_1.aliases;\n  }\n});\n\nvar subselects_1 = require(\"./subselects\");\n\nfunction compilePseudoSelector(next, selector, options, context, compileToken) {\n  var name = selector.name,\n      data = selector.data;\n\n  if (Array.isArray(data)) {\n    return subselects_1.subselects[name](next, data, options, context, compileToken);\n  }\n\n  if (name in aliases_1.aliases) {\n    if (data != null) {\n      throw new Error(\"Pseudo \".concat(name, \" doesn't have any arguments\"));\n    } // The alias has to be parsed here, to make sure options are respected.\n\n\n    var alias = (0, css_what_1.parse)(aliases_1.aliases[name], options);\n    return subselects_1.subselects.is(next, alias, options, context, compileToken);\n  }\n\n  if (name in filters_1.filters) {\n    return filters_1.filters[name](next, data, options, context);\n  }\n\n  if (name in pseudos_1.pseudos) {\n    var pseudo_1 = pseudos_1.pseudos[name];\n    (0, pseudos_1.verifyPseudoArgs)(pseudo_1, name, data);\n    return pseudo_1 === boolbase_1.falseFunc ? boolbase_1.falseFunc : next === boolbase_1.trueFunc ? function (elem) {\n      return pseudo_1(elem, options, data);\n    } : function (elem) {\n      return pseudo_1(elem, options, data) && next(elem);\n    };\n  }\n\n  throw new Error(\"unmatched pseudo-class :\".concat(name));\n}\n\nexports.compilePseudoSelector = compilePseudoSelector;","map":null,"metadata":{},"sourceType":"script"}