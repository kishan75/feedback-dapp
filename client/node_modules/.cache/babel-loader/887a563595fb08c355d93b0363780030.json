{"ast":null,"code":"import { readConfigureGlobal } from '../../../check/runner/configuration/GlobalParameters.js';\nexport const MaxLengthUpperBound = 0x7fffffff;\nconst orderedSize = ['xsmall', 'small', 'medium', 'large', 'xlarge'];\nconst orderedRelativeSize = ['-4', '-3', '-2', '-1', '=', '+1', '+2', '+3', '+4'];\nexport const DefaultSize = 'small';\nexport function maxLengthFromMinLength(minLength, size) {\n  switch (size) {\n    case 'xsmall':\n      return Math.floor(1.1 * minLength) + 1;\n\n    case 'small':\n      return 2 * minLength + 10;\n\n    case 'medium':\n      return 11 * minLength + 100;\n\n    case 'large':\n      return 101 * minLength + 1000;\n\n    case 'xlarge':\n      return 1001 * minLength + 10000;\n\n    default:\n      throw new Error(\"Unable to compute lengths based on received size: \".concat(size));\n  }\n}\nexport function relativeSizeToSize(size, defaultSize) {\n  const sizeInRelative = orderedRelativeSize.indexOf(size);\n\n  if (sizeInRelative === -1) {\n    return size;\n  }\n\n  const defaultSizeInSize = orderedSize.indexOf(defaultSize);\n\n  if (defaultSizeInSize === -1) {\n    throw new Error(\"Unable to offset size based on the unknown defaulted one: \".concat(defaultSize));\n  }\n\n  const resultingSizeInSize = defaultSizeInSize + sizeInRelative - 4;\n  return resultingSizeInSize < 0 ? orderedSize[0] : resultingSizeInSize >= orderedSize.length ? orderedSize[orderedSize.length - 1] : orderedSize[resultingSizeInSize];\n}\nexport function maxGeneratedLengthFromSizeForArbitrary(size, minLength, maxLength, specifiedMaxLength) {\n  const _ref = readConfigureGlobal() || {},\n        _ref$baseSize = _ref.baseSize,\n        defaultSize = _ref$baseSize === void 0 ? DefaultSize : _ref$baseSize,\n        _ref$defaultSizeToMax = _ref.defaultSizeToMaxWhenMaxSpecified,\n        defaultSizeToMaxWhenMaxSpecified = _ref$defaultSizeToMax === void 0 ? true : _ref$defaultSizeToMax;\n\n  const definedSize = size !== undefined ? size : specifiedMaxLength && defaultSizeToMaxWhenMaxSpecified ? 'max' : defaultSize;\n\n  if (definedSize === 'max') {\n    return maxLength;\n  }\n\n  const finalSize = relativeSizeToSize(definedSize, defaultSize);\n  return Math.min(maxLengthFromMinLength(minLength, finalSize), maxLength);\n}\nexport function resolveSize(size) {\n  const _ref2 = readConfigureGlobal() || {},\n        _ref2$baseSize = _ref2.baseSize,\n        defaultSize = _ref2$baseSize === void 0 ? DefaultSize : _ref2$baseSize;\n\n  if (size === undefined) {\n    return defaultSize;\n  }\n\n  return relativeSizeToSize(size, defaultSize);\n}","map":null,"metadata":{},"sourceType":"module"}