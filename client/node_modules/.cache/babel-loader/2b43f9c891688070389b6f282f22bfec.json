{"ast":null,"code":"import _slicedToArray from \"F:\\\\BlockChain\\\\Projects\\\\feedback-dapp\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nimport { array } from './array.js';\nimport { buildLowerAlphaArbitrary, buildLowerAlphaNumericArbitrary } from './_internals/builders/CharacterRangeArbitraryBuilder.js';\nimport { option } from './option.js';\nimport { stringOf } from './stringOf.js';\nimport { tuple } from './tuple.js';\nimport { filterInvalidSubdomainLabel } from './_internals/helpers/InvalidSubdomainLabelFiIter.js';\nimport { convertFromNext, convertToNext } from '../check/arbitrary/definition/Converters.js';\nimport { resolveSize, relativeSizeToSize } from './_internals/helpers/MaxLengthFromMinLength.js';\nimport { adapter } from './_internals/AdapterArbitrary.js';\n\nfunction toSubdomainLabelMapper([f, d]) {\n  return d === null ? f : \"\".concat(f).concat(d[0]).concat(d[1]);\n}\n\nfunction toSubdomainLabelUnmapper(value) {\n  if (typeof value !== 'string' || value.length === 0) {\n    throw new Error('Unsupported');\n  }\n\n  if (value.length === 1) {\n    return [value[0], null];\n  }\n\n  return [value[0], [value.substring(1, value.length - 1), value[value.length - 1]]];\n}\n\nfunction subdomainLabel(size) {\n  const alphaNumericArb = buildLowerAlphaNumericArbitrary([]);\n  const alphaNumericHyphenArb = buildLowerAlphaNumericArbitrary(['-']);\n  return convertFromNext(convertToNext(tuple(alphaNumericArb, option(tuple(stringOf(alphaNumericHyphenArb, {\n    size,\n    maxLength: 61\n  }), alphaNumericArb)))).map(toSubdomainLabelMapper, toSubdomainLabelUnmapper).filter(filterInvalidSubdomainLabel));\n}\n\nfunction labelsMapper(elements) {\n  return \"\".concat(elements[0].join('.'), \".\").concat(elements[1]);\n}\n\nfunction labelsUnmapper(value) {\n  if (typeof value !== 'string') {\n    throw new Error('Unsupported type');\n  }\n\n  const lastDotIndex = value.lastIndexOf('.');\n  return [value.substring(0, lastDotIndex).split('.'), value.substring(lastDotIndex + 1)];\n}\n\nfunction labelsAdapter(labels) {\n  const _labels = _slicedToArray(labels, 2),\n        subDomains = _labels[0],\n        suffix = _labels[1];\n\n  let lengthNotIncludingIndex = suffix.length;\n\n  for (let index = 0; index !== subDomains.length; ++index) {\n    lengthNotIncludingIndex += 1 + subDomains[index].length;\n\n    if (lengthNotIncludingIndex > 255) {\n      return {\n        adapted: true,\n        value: [subDomains.slice(0, index), suffix]\n      };\n    }\n  }\n\n  return {\n    adapted: false,\n    value: labels\n  };\n}\n\nexport function domain(constraints = {}) {\n  const resolvedSize = resolveSize(constraints.size);\n  const resolvedSizeMinusOne = relativeSizeToSize('-1', resolvedSize);\n  const alphaNumericArb = buildLowerAlphaArbitrary([]);\n  const publicSuffixArb = stringOf(alphaNumericArb, {\n    minLength: 2,\n    maxLength: 63,\n    size: resolvedSizeMinusOne\n  });\n  return convertFromNext(adapter(convertToNext(tuple(array(subdomainLabel(resolvedSize), {\n    size: resolvedSizeMinusOne,\n    minLength: 1,\n    maxLength: 127\n  }), publicSuffixArb)), labelsAdapter).map(labelsMapper, labelsUnmapper));\n}","map":null,"metadata":{},"sourceType":"module"}